import numpy as np

from enaml.widgets.api import Action
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi.core.enaml.api import PSIManifest
from psi.context.api import ContextGroup, Parameter
from ...experiment_action import ExperimentAction

PLUGIN_ID = 'psi.controller.action.room_light' 


def light_off(event):
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('room_light_toggle')
    output.set_low()
    

def light_on(event):
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('room_light_toggle')
    output.set_high()


enamldef RoomLightManifest(PSIManifest): manifest:

    id = PLUGIN_ID

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.light_off'
            handler = light_off
        Command:
            id = PLUGIN_ID + '.light_on'
            handler = light_on
            
    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment/room_light'
            label = 'Room light'
            ItemGroup:
                id = 'room_light'
        ActionItem:
            path = '/equipment/room_light/on'
            label = 'Light on'
            group = 'room_light'
            command = PLUGIN_ID + '.light_on'
        ActionItem:
            path = '/equipment/room_light/off'
            label = 'Light off'
            group = 'room_light'
            command = PLUGIN_ID + '.light_off'


enamldef AppetitiveRoomLightActions(PSIManifest):

    requires  = [
        'psi.controller.actions.room_light.RoomLightManifest',
    ]

    supplements = [
        'psi.controller.appetitive_manifest.AppetitiveManifest',
    ]

    Extension:
        id = 'action'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'timeout_start'
            command = PLUGIN_ID + '.light_off'
        ExperimentAction:
            event = 'timeout_end'
            command = PLUGIN_ID + '.light_on'
        ExperimentAction:
            event = 'experiment_start'
            command = PLUGIN_ID + '.light_on'
        ExperimentAction:
            event = 'experiment_end'
            command = PLUGIN_ID + '.light_off'
