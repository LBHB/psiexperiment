import numpy as np
from serial.tools import list_ports
import threading

from atom.api import Typed, Int, Bool, Unicode, Float
from enaml.application import deferred_call
from enaml.layout.api import InsertItem
from enaml.widgets.api import (Action, DockItem, Container, Label, PopupView,
                               Slider, HGroup, ToolButton, Field)
from enaml.workbench.api import Plugin, PluginManifest, Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi import get_config
from psi.core.enaml.api import PSIManifest
from psi.core.utils import find_extension
from psi.context.api import ContextGroup, Parameter, EnumParameter
from ...experiment_action import ExperimentAction

from new_era import PumpInterface

PLUGIN_ID = 'psi.controller.action.NE1000' 


def temporary_pause(f):
    def wrapper(self, *args, **kwargs):
        halted = self.iface.get_status() == 'halted'
        if not halted:
            self.iface.pause()
        f(self, *args, **kwargs)
        if not halted:
            self.iface.resume()
    return wrapper


enamldef PumpStateDockItem(DockItem):

    title = 'Pump Status'
    attr pump

    Container:
        Label:
            text << 'Total infused: {:0.4f} mL'.format(pump.total_infused)


enamldef PumpOverrideSettings(PopupView):

    parent_anchor = (1.0, 1.0)
    attr plugin

    HGroup:
        Label:
            text = 'Pump rate (mL/min)'
        Slider: slider:
            minimum = 1
            maximum = 9
            tick_interval = 1
            value := plugin.pump_override_rate
        Label:
            text << str(plugin.pump_override_rate)


class NE1000Plugin(Plugin):

    iface = Typed(PumpInterface)
    total_infused = Float()
    poll_interval = Float(0.1)
    pump_override_rate = Int(5)

    timer = Typed(object)
    lock = Typed(object)
    uninitialize_requested = Bool(False)

    def initialize(self, url, syringe_diameter):
        self.iface = PumpInterface(url=url)
        self.iface.set_diameter(syringe_diameter, unit='mm')
        self.lock = threading.Lock()
        self.update_total_infused()

    def uninitialize(self):
        with self.lock:
            self.uninitialize_requested = True

    def update_total_infused(self):
        with self.lock:
            self.total_infused = self.iface.get_infused(unit='ml')
            if self.uninitialize_requested:
                self.uninitialize_requested = False
                return
            self.timer = threading.Timer(self.poll_interval,
                                         self.update_total_infused)
            self.timer.start()

    def start_infusion(self):
        with self.lock:
            self.iface.set_volume(0, unit='ul')
            self.iface.set_rate(self.pump_override_rate, unit='ml/min')
            self.iface.run()

    def stop_infusion(self):
        with self.lock:
            self.iface.stop()

    def deliver_reward(self, volume, rate):
        with self.lock:
            self.iface.set_rate(rate, unit='ml/min')
            self.iface.set_volume(volume, unit='ul')
            self.iface.run()

    def stop(self):
        print 'stopping'


def deliver_reward(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    core = event.workbench.get_plugin('enaml.workbench.core')
    params = {'context_name': 'reward_volume', 'fail_mode': 'default'}
    volume = core.invoke_command('psi.context.get_value', params)
    params = {'context_name': 'infusion_rate', 'fail_mode': 'default'}
    rate = core.invoke_command('psi.context.get_value', params)
    plugin.deliver_reward(volume, rate)


def start_infusion(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    plugin.start_infusion()


def stop_infusion(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    plugin.stop_infusion()


def get_comports():
    return dict((name, '"{}"'.format(url)) \
            for (url, name, _) in list_ports.comports())


def initialize_pump(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    core = event.workbench.get_plugin('enaml.workbench.core')
    params = {'context_name': 'connection_url'}
    url = core.invoke_command('psi.context.get_value', params)
    params = {'context_name': 'syringe_diameter'}
    syringe_diameter = core.invoke_command('psi.context.get_value', params)
    plugin.initialize(url=url, syringe_diameter=syringe_diameter)
    

def uninitialize_pump(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    core = event.workbench.get_plugin('enaml.workbench.core')
    plugin.uninitialize()


def contribute_to_workspace(workbench, workspace):
    plugin = workbench.get_plugin(PLUGIN_ID)
    item = PumpStateDockItem(workspace.dock_area, pump=plugin,
                             name='pump_state')
    op = InsertItem(item=item.name, position='top')
    deferred_call(workspace.dock_area.update_layout, op)


enamldef NE1000Manifest(PSIManifest): manifest:

    id = PLUGIN_ID
    factory = NE1000Plugin

    Extension:
        id = 'parameters'
        point = 'psi.context.items'

        ContextGroup:
            name = PLUGIN_ID
            label = 'Pump Settings'
        Parameter:
            name = 'reward_volume'
            label = 'Reward volume (ul)'
            compact_label = 'Vol'
            dtype = np.dtype('float32')
            default = 20
            expression = '20'
            group = PLUGIN_ID
            scope = 'trial'
        Parameter:
            name = 'infusion_rate'
            label = 'Infusion rate (mm/min)'
            compact_label = 'Inf. rate'
            dtype = np.dtype('float32')
            default = 1
            expression = '1'
            group = PLUGIN_ID
            scope = 'trial'
        EnumParameter:
            name = 'syringe_diameter'
            label = 'Syringe'
            compact_label = 'Syringe'
            dtype = np.dtype('S32')
            group = PLUGIN_ID
            scope = 'experiment'
            default = get_config('SYRINGE_DEFAULT')
            choices = get_config('SYRINGE_DATA')
        EnumParameter:
            name = 'connection_url'
            label = 'Connection'
            compact_label = 'Cn. Str.'
            dtype = np.dtype('S32')
            group = PLUGIN_ID
            scope = 'experiment'
            choices = get_comports()
            default = get_comports().keys()[0]

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.deliver_reward'
            handler = deliver_reward
        Command:
            id = PLUGIN_ID + '.start_infusion'
            handler = start_infusion
        Command:
            id = PLUGIN_ID + '.stop_infusion'
            handler = stop_infusion
        Command:
            id = PLUGIN_ID + '.initialize_pump'
            handler = initialize_pump
        Command:
            id = PLUGIN_ID + '.uninitialize_pump'
            handler = uninitialize_pump

    Extension:
        id = 'pump_toolbar'
        point = 'psi.experiment.toolbar'
        rank = 2000
        Action:
            text = 'Pump override'
            checkable = True
            toggled ::
                if checked:
                    plugin = workbench.get_plugin(PLUGIN_ID)
                    plugin.start_infusion()
                else:
                    plugin = workbench.get_plugin(PLUGIN_ID)
                    plugin.stop_infusion()
            enabled <<  workbench.get_plugin('psi.controller').experiment_state \
                not in ('initialized', 'stopped')
        ToolButton:
            text = u'\u2699'
            clicked ::
                plugin = workbench.get_plugin(PLUGIN_ID)
                popup = PumpOverrideSettings(self, plugin=plugin)
                popup.show()
            enabled <<  workbench.get_plugin('psi.controller').experiment_state \
                not in ('initialized', 'stopped')

    Extension:
        id = 'pump_workspace'
        point = 'psi.experiment.workspace'
        factory = contribute_to_workspace


enamldef AppetitiveNE1000Actions(PSIManifest):

    supplements = [
        'psi.controller.appetitive_manifest.AppetitiveManifest'
    ]

    requires = [
        'psi.controller.actions.NE1000.NE1000Manifest'
    ]

    Extension:
        id = 'action'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_start'
            command = PLUGIN_ID + '.initialize_pump'
        ExperimentAction:
            event = 'experiment_end'
            command = PLUGIN_ID + '.uninitialize_pump'
        ExperimentAction:
            event = 'deliver_reward'
            command = PLUGIN_ID + '.deliver_reward'
