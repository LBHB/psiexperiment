import numpy as np

from atom.api import Typed, Int, Bool
from enaml.widgets.api import Action
from enaml.workbench.api import Plugin, PluginManifest, Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi import get_config
from psi.core.utils import find_extension
from psi.context.api import ContextGroup, Parameter, EnumParameter
from ...experiment_action import ExperimentAction

from new_era import PumpInterface

PLUGIN_ID = 'psi.controller.action.NE1000' 


def temporary_pause(f):
    def wrapper(self, *args, **kwargs):
        halted = self.iface.get_status() == 'halted'
        if not halted:
            self.iface.pause()
        f(self, *args, **kwargs)
        if not halted:
            self.iface.resume()
    return wrapper


class NE1000Plugin(Plugin):

    # TODO: Accept strings (e.g., for use on Linux systems)
    port = Int(1)
    iface = Typed(PumpInterface)
    pump_toggle = Bool(False)

    def start(self):
        self.iface = PumpInterface(port=self.port)

    def total_infused(self):
        return self.iface.get_infused(unit='ml')

    def run_continuously(self, foo):
        self.iface.set_volume(0)
        self.iface.set_trigger('rising', None)
        self.iface.run()

    @temporary_pause
    def set_pump_volume(self, value):
        self.iface.set_volume(value, unit='ul')

    @temporary_pause
    def set_pump_rate(self, value):
        self.iface.set_rate(value, unit='ml/min')

    @temporary_pause
    def set_pump_syringe_diameter(self, value):
        self.iface.set_diameter(value, unit='mm')

    def deliver_reward(self, volume=None):
        if volume is None:
            # Look up the volume
            core = self.workbench.get_plugin('enaml.workbench.core')
            params = {'context_name': 'reward_volume', 'fail_mode': 'default'}
            volume = core.invoke_command('psi.context.get_value', params)
        print 'delivering reward volume of {}'.format(volume)


def deliver_reward(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    plugin.deliver_reward()


def start_infusion(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    plugin.start_infusion()


def stop_infusion(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    plugin.stop_infusion()


enamldef NE1000Manifest(PluginManifest): manifest:

    id = PLUGIN_ID
    factory = NE1000Plugin

    Extension:
        id = 'parameters'
        point = 'psi.context.items'

        ContextGroup:
            name = PLUGIN_ID
            label = 'Pump Settings'
        Parameter:
            name = 'reward_volume'
            label = 'Reward volume (ul)'
            compact_label = 'Vol'
            dtype = np.dtype('float32')
            default = 20
            expression = '20'
            group = PLUGIN_ID
            scope = 'trial'
        EnumParameter:
            name = 'syringe_diameter'
            label = 'Syringe'
            compact_label = 'Syringe'
            dtype = np.dtype('S32')
            group = PLUGIN_ID
            scope = 'experiment'
            default = get_config('SYRINGE_DEFAULT')
            choices = get_config('SYRINGE_DATA')

        #Parameter:
        #    name = 'pump_mode'
        #    label = 'Pump mode'
        #    compact_label = 'Pump mode'
        #    dtype = np.dtype('S32')
        #    default = 'bolus'
        #    expression = 'bolus'
        #    group = PLUGIN_ID
        #    scope = 'experiment'

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.deliver_reward'
            handler = deliver_reward
        Command:
            id = PLUGIN_ID + '.start_infusion'
            handler = start_infusion
        Command:
            id = PLUGIN_ID + '.stop_infusion'
            handler = stop_infusion
            
    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment/pump'
            label = 'NE1000 pump'
            ItemGroup:
                id = 'pump'
        ActionItem:
            path = '/equipment/pump/trigger'
            label = 'Trigger pump'
            group = 'pump'
            command = PLUGIN_ID + '.deliver_reward'

    Extension:
        id = 'psi.experiment.toolbar'
        Action:
            text = 'Pump override'
            toggled ::
                if checked:
                    plugin = workbench.get_plugin(PLUGIN_ID)
                    plugin.start_infusion()
                else:
                    plugin = workbench.get_plugin(PLUGIN_ID)
                    plugin.stop_infusion()

    Extension:
        id = 'action'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'reward'
            command = PLUGIN_ID + '.deliver_reward'
        ExperimentAction:
            event = 'reward_start'
            command = PLUGIN_ID + '.start_infusion'
        ExperimentAction:
            event = 'reward_end'
            command = PLUGIN_ID + '.stop_infusion'
