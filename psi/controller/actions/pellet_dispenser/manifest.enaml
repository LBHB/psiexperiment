import numpy as np

from atom.api import Typed, Int, Bool, Unicode, Float
from enaml.application import deferred_call
from enaml.layout.api import InsertItem
from enaml.widgets.api import Action, DockItem, Container, Label
from enaml.workbench.api import Plugin, PluginManifest, Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi import get_config
from psi.core.enaml.api import PSIManifest
from psi.core.utils import find_extension
from psi.context.api import ContextGroup, Parameter, EnumParameter
from psi.experiment.api import CompatibleManifest, RequiredManifest
from ...experiment_action import ExperimentAction

PLUGIN_ID = 'psi.controller.action.pellet_dispenser' 


def contribute_to_workspace(workbench, workspace):
    plugin = workbench.get_plugin(PLUGIN_ID)
    item = PelletDispenserDockItem(workspace.dock_area, 
                                   plugin=plugin,
                                   name='pellet_dispenser')
    op = InsertItem(item=item.name, position='top')
    deferred_call(workspace.dock_area.update_layout, op)


def dispense_pellet(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    plugin.dispense_pellet()


enamldef PelletDispenserDockItem(DockItem):

    title = 'Pellet Dispenser' 
    attr plugin

    Container:
        Label:
            text << 'Pellets dispensed: {:d}'.format(plugin.pellets_dispensed)


class PelletDispenserPlugin(Plugin):

    pellets_dispensed = Int(0)

    def dispense_pellet(self):
        controller = self.workbench.get_plugin('psi.controller')
        output = controller.get_output('food_dispense_trigger')
        output.fire()
        self.pellets_dispensed += 1


enamldef PelletDispenserManifest(PluginManifest): manifest:

    id = PLUGIN_ID
    factory = PelletDispenserPlugin

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.dispense_pellet'
            handler = dispense_pellet

    Extension:
        id = 'pellet_toolbar'
        point = 'psi.experiment.toolbar'
        rank = 2000
        Action:
            text = 'Dispense pellet'
            triggered ::
                core = workbench.get_plugin('enaml.workbench.core')
                core.invoke_command(PLUGIN_ID + '.dispense_pellet')
            enabled <<  workbench.get_plugin('psi.controller').experiment_state \
                not in ('initialized', 'stopped')

    Extension:
        id = 'pump_workspace'
        point = 'psi.experiment.workspace'
        factory = contribute_to_workspace


enamldef AppetitivePelletDispenserActions(PSIManifest):

    id = PLUGIN_ID + '.appetitive'

    Extension:
        id = 'action'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'deliver_reward'
            command = PLUGIN_ID + '.dispense_pellet'
