from enaml.core.api import Looper, DynamicTemplate
from enaml.widgets.api import (DockItem, Container, VGroup, HGroup, Label,
                               Field, ObjectCombo)

from .output import EpochOutput, ContinuousOutput, AnalogOutput


def get_labels(tokens):
    return [t.label for t in tokens.values()]


def get_name(tokens, label):
    for t in tokens.values():
        if t.label == label:
            return t.name


template OutputTemplate(output, MemberType: ContinuousOutput):
    ObjectCombo:
        items << get_labels(workbench.get_plugin('psi.token')._continuous_tokens)
        selected << output._token.label if output._token is not None else ''
        selected ::
            name = get_name(workbench.get_plugin('psi.token')._continuous_tokens, selected)
            controller.configure_output(output.name, name)


template OutputTemplate(output, MemberType: EpochOutput):
    ObjectCombo:
        items << get_labels(workbench.get_plugin('psi.token')._epoch_tokens)
        selected << output._token.label if output._token is not None else ''
        selected ::
            name = get_name(workbench.get_plugin('psi.token')._epoch_tokens, selected)
            controller.configure_output(output.name, name)


enamldef OutputDockItem(DockItem):

    attr controller

    Container:
        VGroup:
            padding = 0
            spacing = 0
            Looper:
                iterable << [o for o in controller._outputs.values() \
                             if isinstance(o, AnalogOutput) and o.visible]
                HGroup:
                    enabled << controller.experiment_state == 'initialized'
                    padding = 0
                    Label:
                        text = loop_item.label
                    DynamicTemplate:
                        base = OutputTemplate
                        args = (loop_item, type(loop_item))
