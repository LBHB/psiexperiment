from __future__ import division

import logging
log = logging.getLogger(__name__)

import os.path
from functools import partial
from datetime import datetime 

import numpy as np

from atom.api import Int, Value, Tuple, Bool, Float

from enaml.core.api import d_
from enaml.qt import QtGui, QtCore
from enaml.widgets.api import RawWidget, DockItem, Container
from enaml.workbench.api import PluginManifest, Extension, Plugin
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import InsertItem
from enaml.application import deferred_call

import cv2

from qimage2ndarray import array2qimage

from ..device import Device
from ..device_manifest import DeviceManifest


def capture_image(event, device):
    data = event.workbench.get_plugin('psi.data')
    if data.base_path == '<memory>':
        return

    image = device.read()
    image_base = os.path.join(data.base_path, 'camera', str(device.name))
    if not os.path.exists(image_base):
        os.makedirs(image_base)

    timestamp = event.parameters.get('timestamp', None)
    event_name = event.parameters.get('event', 'manual')
    if timestamp is None:
        name = datetime.now().strftime('%Y%M%d%H%M%S') + '_' + event_name
    else:
        name = str(timestamp) + '_' + event_name
    image_filename = '{}.png'.format(name)
    image_fullfile = os.path.join(image_base, image_filename)
    cv2.imwrite(image_fullfile, image)


def start(event, device):
    device.start()


def stop(event, device):
    device.stop()


class QCaptureImage(QtCore.QThread):

    image_acquired = QtCore.pyqtSignal(QtGui.QImage)

    def __init__(self, device):
        super(QCaptureImage, self).__init__()
        self.minterval = int(device.interval*1e3)
        self.device = device
        self.visible = False
        self.width = None
        self.height = None
        self.image = None

    def __del__(self):
        self.wait()

    def run(self):
        while True:
            if self.visible and self.device.active:
                self.acquire()
                self.resize_and_emit()
        self.msleep(self.minterval)

    def acquire(self):
        image = self.device.read()
        if image is None:
            log.warn('Unable to read from {}'.format(self.device.name))
        else:
            self.image = image

    def resize_and_emit(self):
        if self.image is not None:
            h, w = self.image.shape[:2]
            if min(self.width, self.height) == 0:
                return
            sf = min(self.height/h, self.width/w)
            new_size = int(sf*w), int(sf*h)
            resized = cv2.resize(self.image, new_size)
            qimage = array2qimage(resized)
            self.image_acquired.emit(qimage)

    @QtCore.pyqtSlot(bool)
    def set_visible(self, visible):
        self.visible = visible

    @QtCore.pyqtSlot(int, int)
    def set_size(self, width, height):
        self.width = width
        self.height = height
        self.resize_and_emit()


class QCameraViewer(QtGui.QWidget):

    visible = QtCore.pyqtSignal(bool) 
    resize = QtCore.pyqtSignal(int, int)

    def __init__(self, parent, device):
        super(QCameraViewer, self).__init__(parent)
        self.image = None
        self.capture_image = QCaptureImage(device)
        self.capture_image.image_acquired.connect(self.setImage)
        self.visible.connect(self.capture_image.set_visible)
        self.resize.connect(self.capture_image.set_size)
        self.capture_image.start()

    def showEvent(self, event):
        self.visible.emit(True)

    def hideEvent(self, event):
        self.visible.emit(False)

    def resizeEvent(self, event):
        size = event.size()
        self.resize.emit(size.width(), size.height())

    def paintEvent(self, event):
        if self.image is not None:
            painter = QtGui.QPainter(self)
            painter.drawImage(0, 0, self.image)
            self.paintImage = QtGui.QImage()

    @QtCore.pyqtSlot(QtGui.QImage)
    def setImage(self, image):
        self.image = image
        self.repaint()


class CameraViewer(RawWidget):

    device = d_(Value())

    def create_widget(self, parent):
        return QCameraViewer(parent, device=self.device)


class OpenCVCamera(Device):

    device = d_(Int())
    resolution = d_(Tuple(Int(), Int()))
    camera = Value()
    active = Bool(False)
    interval = d_(Float(0.01))

    def start(self):
        self.camera = cv2.VideoCapture(self.device)
        self.camera.set(3, self.resolution[0]) # width
        self.camera.set(4, self.resolution[1]) # height
        self.camera.read()
        self.active = True

    def read(self):
        if self.active:
            return self.camera.read()[1]

    def stop(self):
        if self.active:
            self.active = False
            self.camera.release()

    def load_manifest(self):
        return OpenCVCameraManifest(device=self)


enamldef OpenCVCameraManifest(DeviceManifest): manifest:

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.capture_image'
            handler = partial(capture_image, device=manifest.device)
        Command:
            id = manifest.id + '.start'
            handler = partial(start, device=manifest.device)
        Command:
            id = manifest.id + '.stop'
            handler = partial(stop, device=manifest.device)

    Extension:
        id = 'opencv_workspace'
        point = 'psi.experiment.workspace'
        DockItem:
            title = manifest.device.label
            name = 'camera_{}'.format(manifest.device.name)
            closable = False
            
            Container: container:
                CameraViewer: viewer:
                    hug_width = 'weak'
                    hug_height = 'weak'
                    device = manifest.device

    Extension:
        id = 'toggle_actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/camera_' + manifest.device.name
            label = '{} snapshot'.format(manifest.device.label)
            command = manifest.id + '.capture_image'
