from __future__ import division

import os.path
from functools import partial
from datetime import datetime 

from atom.api import Int, Value, Tuple

from enaml.core.api import d_
from enaml.qt import QtGui, QtCore
from enaml.widgets.api import RawWidget, DockItem, Container
from enaml.workbench.api import PluginManifest, Extension, Plugin
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import InsertItem
from enaml.application import deferred_call

import cv2

from qimage2ndarray import array2qimage

from ..device import Device
from ..device_manifest import DeviceManifest


def capture_image(event, device):
    result, image = device.capture()
    data = event.workbench.get_plugin('psi.data')
    if data.base_path != '<memory>':
        image_base = os.path.join(data.base_path, 'camera', str(device.device))
        if not os.path.exists(image_base):
            os.makedirs(image_base)

        timestamp = event.parameters.get('timestamp', None)
        event_name = event.parameters.get('event', 'manual')

        if timestamp is None:
            name = datetime.now().strftime('%Y%M%d%H%M%S') + '_' + event_name
        else:
            name = str(timestamp) + '_' + event_name
        image_filename = '{}.png'.format(name)
        image_fullfile = os.path.join(image_base, image_filename)
        cv2.imwrite(image_fullfile, image)


class QCameraViewer(QtGui.QWidget):

    def __init__(self, parent, device):
        super(QCameraViewer, self).__init__(parent)
        self.device = device

        self.captureVideo()
        self.timer = QtCore.QTimer()
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.captureVideo)
        self.timer.start()

    def captureVideo(self):
        result, image = self.device.capture()
        if image is not None:
            self.setImage(image)

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.drawImage(0, 0, self.image)
        self.paintImage = QtGui.QImage()

    def initUI(self):
        self.show(image)

    def setImage(self, image):
        h, w = image.shape[:2]
        width = self.parent().width()
        height = self.parent().height()
        if min(width, height) == 0:
            return
        sf = min(height/h, width/w)
        new_size = int(sf*w), int(sf*h)
        resized = cv2.resize(image, new_size)
        qimage = array2qimage(resized)
        self.image = qimage
        self.resize(width, height)
        self.repaint()

    def __del__(self):
        # TODO Hack, not a good place for it.
        self.device.camera.release()


class CameraViewer(RawWidget):

    device = d_(Value())

    def create_widget(self, parent):
        return QCameraViewer(parent, device=self.device)


enamldef CameraDockItem(DockItem):

    title = device.label
    alias device: viewer.device

    Container:
        constraints = [
            viewer.width == 300,
            viewer.height == 300,
        ]

        CameraViewer: viewer:
            pass


def contribute_to_workspace(workbench, workspace, device):
    device.start()
    name = 'Camera {}'.format(device.label)
    item = CameraDockItem(workspace.dock_area, name=name, device=device)
    op = InsertItem(item=item.name, position='top')
    deferred_call(workspace.dock_area.update_layout, op)


class OpenCVCamera(Device):

    device = d_(Int())
    resolution = d_(Tuple(Int(), Int()))
    camera = Value()

    def start(self):
        self.camera = cv2.VideoCapture(self.device)
        self.camera.set(3, self.resolution[0]) # width
        self.camera.set(4, self.resolution[1]) # height
        self.camera.read()

    def capture(self):
        return self.camera.read()

    def __del__(self):
        print 'deleted'
        print 'deleted'
        print 'deleted'
        print 'deleted'
        self.camera.release()
        
    def load_manifest(self):
        return OpenCVCameraManifest(device=self)


enamldef OpenCVCameraManifest(DeviceManifest): manifest:

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.capture_image'
            handler = partial(capture_image, device=manifest.device)

    Extension:
        id = 'opencv_workspace'
        point = 'psi.experiment.workspace'
        factory = partial(contribute_to_workspace, device=manifest.device)

    Extension:
        id = 'toggle_actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/camera_' + manifest.device.name
            label = '{} snapshot'.format(manifest.device.label)
            command = manifest.id + '.capture_image'
