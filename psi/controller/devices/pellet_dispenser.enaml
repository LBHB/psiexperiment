from functools import partial

from atom.api import Int, Unicode
from enaml.application import deferred_call, timed_call
from enaml.core.api import d_
from enaml.layout.api import InsertItem
from enaml.widgets.api import Action, DockItem, Container, Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, Parameter

from ..device import Device
from ..device_manifest import DeviceManifest


def contribute_to_workspace(workbench, workspace, device):
    item = PelletDispenserDockItem(workspace.dock_area, device=device,
                                   name=device.name)
    op = InsertItem(item=item.name, position='top')
    deferred_call(workspace.dock_area.update_layout, op)


enamldef PelletDispenserDockItem(DockItem):

    title = 'Pellet Dispenser' 
    attr device

    Container:
        Label:
            text << 'Pellets dispensed: {:d}'.format(device.pellets_dispensed)


class PelletDispenser(Device):

    output_name = d_(Unicode())
    pellets_dispensed = Int(0)

    def dispense_pellet(self):
        controller = self.workbench.get_plugin('psi.controller')
        context = self.workbench.get_plugin('psi.context')
        pellets = context.get_value('{}_pellets'.format(self.name))
        output = controller.get_output(self.output_name)
        for pellet in range(pellets):
            timed_call(pellet*1e3*0.5, output.fire)
            self.pellets_dispensed += 1

    def load_manifest(self):
        return PelletDispenserManifest(device=self)


enamldef PelletDispenserManifest(DeviceManifest): manifest:

    Extension:
        id = 'parameters'
        point = 'psi.context.items'

        ContextGroup:
            name = manifest.device.name
            label = manifest.device.label

            Parameter:
                name = manifest.device.name + '_pellets'
                label = 'Pellets'
                compact_label = 'P'
                default = 1

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.dispense_pellet'
            handler = manifest.device.dispense_pellet

    Extension:
        id = 'pellet_toolbar'
        point = 'psi.experiment.toolbar'
        rank = 2000
        Action:
            text = 'Dispense pellet'
            triggered ::
                core = workbench.get_plugin('enaml.workbench.core')
                core.invoke_command(manifest.id + '.dispense_pellet')
            enabled <<  workbench.get_plugin('psi.controller').experiment_state \
                not in ('initialized', 'stopped')

    Extension:
        id = 'pump_workspace'
        point = 'psi.experiment.workspace'
        factory = partial(contribute_to_workspace, device=manifest.device)
