from copy import copy

from enaml.core.api import DynamicTemplate, Looper
from enaml.layout.api import align, hbox, vbox
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (Action, Container, FileDialogEx, Form, GroupBox, HGroup,
                               Label, MainWindow, Menu, Notebook, ObjectCombo, Page,
                               PushButton, VGroup)

from psi import get_config
from psi.controller.calibration import (EPLCalibration, FlatCalibration,
                                        GolayCalibration)
from psi.controller.channel import HardwareAIChannel

from psiaudio import util


def get_calibration_filename(calibration, member_type):
    if not isinstance(calibration, member_type):
        return ''
    if calibration.source is None:
        return ''
    return str(calibration.source[1].name)


def get_calibration_sens(calibration):
    if not isinstance(calibration, FlatCalibration):
        return None
    return util.dbi(calibration.sensitivity) * 1e3


template CalibrationTemplate(calibration, MemberType: type(None)):

    Label:
        text = 'No calibration specified'


template CalibrationTemplate(calibration, MemberType: EPLCalibration):

    Label:
        text = 'EPL calibration file'

    Label:
        text << get_calibration_filename(calibrations[1], MemberType)


template CalibrationTemplate(calibration, MemberType: FlatCalibration):

    Label:
        text = 'Flat calibration ({:.2f} mV/Pa)'.format(get_calibration_sens(calibration))


template CalibrationTemplate(calibration, MemberType: GolayCalibration):

    Label:
        text = 'Golay calibration file'

    Label:
        text << get_calibration_filename(calibration, MemberType)


filename = r'C:\psi-dev\calibration\20181107-0832 Brad 2W starship 2 377C10 primary long coupler pt_calibration_golay'


name_map = {
    FlatCalibration: 'fixed sensitivity',
    GolayCalibration: 'Golay calibration',
    EPLCalibration: 'EPL calibration',
}


enamldef CalibrationSelect(Menu):

    Looper:
        iterable = [FlatCalibration, GolayCalibration, EPLCalibration]
        Action:
            text << name_map[loop_item]
            triggered ::
                print(loop_item)


enamldef Main(MainWindow):

    attr channels = [
        HardwareAIChannel(name='reference_microphone',
                          label='Cal. microphone',
                          calibration=FlatCalibration.from_mv_pa(1.0)
                          ),
        HardwareAIChannel(name='pt_microphone',
                          label='PT microphone',
                          calibration=GolayCalibration.from_psi_golay(filename)
                          ),
    ]

    Container:
        Notebook:
            tab_style = 'preferences'
            tabs_movable = False
            tabs_closable = False

            Looper:
                iterable << channels[:]

                Page:
                    title = str(loop_item)

                    Container:

                        HGroup:

                            PushButton: pb:
                                text = 'Load new calibration'
                                clicked ::
                                    CalibrationSelect().popup()

                        Form:
                            Label:
                                text = 'Calibration'

                            VGroup:
                                DynamicTemplate:
                                    base = CalibrationTemplate
                                    args << (loop_item.calibration,
                                            type(loop_item.calibration),)
