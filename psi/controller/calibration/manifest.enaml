import logging
log = logging.getLogger(__name__)

import pandas as pd

from enaml.application import deferred_call
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command

from psi.controller.experiment_action import ExperimentAction
from psi.data.sinks.api import TextStore

from .calibration import InterpCalibration, PointCalibration
from .chirp import chirp_sens
from .tone import tone_sens
from .plugin import CalibrationPlugin


def run_calibration(event):
    plugin = event.workbench.get_plugin('psi.controller.calibration')
    core = event.workbench.get_plugin('enaml.workbench.core')
    save_command = 'calibration_data.save_dataframe'
    for tone in plugin._tone_calibrations:
        tone.result = tone_calibrate_channel(event.workbench, tone.outputs,
                                             tone.input_name, tone.gain,
                                             tone.duration, tone.iti,
                                             tone.trim, tone.max_thd,
                                             tone.min_snr, tone.selector_name)
        parameters = {'name': tone.name, 'dataframe': tone.result}
        deferred_call(core.invoke_command, save_command, parameters)

    for chirp in plugin._chirp_calibrations:
        chirp.result = chirp_calibrate_channel(event.workbench, chirp.outputs,
                                               chirp.input_name, chirp.gain,
                                               chirp.duration, chirp.iti,
                                               chirp.repetitions)
        parameters = {'name': chirp.name, 'dataframe': chirp.result}
        deferred_call(core.invoke_command, save_command, parameters)


def tone_calibrate_channel(workbench, outputs, input_name, gain, duration,
                           iti=0, trim=10e-3, max_thd=None, min_snr=None,
                           selector_name='default'):
    '''
    Calibrate the specified output using the specified input

    Useful for in-ear calibrations. The calibration will be saved.

    Parameters
    ----------
    workbench : Enaml workbench
        Enaml workbench instance
    outputs : dict
        Dictionary whose keys are outputs and values are a list of parameters
        needed to determine the calibration frequencies.
    input_name : string
        Channel to calibrate
    selector_name : string (default='default')
        Selector to use
    gain : float
        Gain to set on output channel
    max_thd : {None, float}
        Maximum total harmonic distortion (in percent) to allow. Anything above
        this raises a calibration error.
    min_snr : {None, float}
        Minimum test level (re. noise floor). If the test tone is too close to
        the noise floor, this raises a calibration error.
    duration : float
        Duration of test tone
    iti : float
        Intertrial interval between test tones
    trim : float
        Amount to trim off of start and end of test tone response before
       analysis.
    widget_name : {None, string}
        Name of widget containing results set to update (for viewing).
    attr_name : {None, string}
        Name of attribute on widget to set.
    store_name : {None, string}
        Name of store to write data to.
    '''
    controller = workbench.get_plugin('psi.controller')

    # Get a list of planned frequencies
    core = workbench.get_plugin('enaml.workbench.core')

    # Generate a list of frequencies to calibrate for each channel
    ao = {}
    for output_name, parameter_names in outputs.items():
        output = controller.get_output(output_name)
        frequencies = ao.setdefault(output.channel, set())
        for parameter in parameter_names:
            p = {'item_names': parameter}
            new = core.invoke_command('psi.context.unique_values', p)
            frequencies.update(new)

    ai_input = controller.get_input(input_name)
    ai_channel = ai_input.channel

    # Iter through the identified channels and calibrate them
    results = {}
    for ao_channel, frequencies in ao.items():
        # Run the calibration and update the output with that calibration
        result = tone_sens(ao_channel.engine,
                           list(frequencies),
                           gain=gain,
                           ao_channel_name=ao_channel.name,
                           ai_channel_names=[ai_channel.name],
                           max_thd=max_thd,
                           min_snr=min_snr,
                           duration=duration,
                           iti=iti,
                           trim=trim)

        results[ao_channel.name] = result.sort_index()
        log.info('Calibration for channel %s using input %s\n%s',
                 ao_channel.name, ai_channel.name, result)

        result = result.reset_index()
        calibration = PointCalibration(result['frequency'], result['sens'])
        ao_channel.calibration = calibration

    # Merge the calibration data
    results = pd.concat(results.values(), keys=results.keys(), names=['ao_channel'])
    results['gain'] = gain
    results['max_thd'] = max_thd
    results['min_snr'] = min_snr
    results = results.sort_index().reset_index()
    return results


def chirp_calibrate_channel(workbench, outputs, input_name, gain, duration,
                            iti, repetitions):
    '''
    Calibrate the specified output using the specified input

    Useful for in-ear calibrations. The calibration will be saved.

    Parameters
    ----------
    outputs : list of string
        Output names to calibrate
    input_name : string
        Input to calibrate
    gain : float
        Gain to set on output channel
    duration : float
        Duration of chirp
    iti : float
        Intertrial interval between chirps
    repetitions : int
        Number of repetitions to average
    '''
    controller = workbench.get_plugin('psi.controller')

    # Create a list of channels that need to be calibrated
    ao_channels = set()
    for output_name in outputs:
        output = controller.get_output(output_name)
        ao_channels.update([output.channel])

    ai_input = controller.get_input(input_name)
    ai_channel = ai_input.channel

    results = {}
    for ao_channel in ao_channels:
        log.debug('Running chirp calibration for %s', ao_channel.name)
        result = chirp_sens(ao_channel.engine,
                            gain,
                            ao_channel_name=ao_channel.name,
                            ai_channel_names=[ai_channel.name],
                            duration=duration,
                            iti=iti,
                            repetitions=repetitions)

        results[ao_channel.name] = result
        calibration = InterpCalibration(result.index.get_level_values('frequency'),
                                        result['sens'])
        ao_channel.calibration = calibration
        log.info('%s: %s', ao_channel.name, ao_channel.calibration)

    results = pd.concat(results.values(), keys=results.keys(),
                        names=['ao_channel'])

    results['gain'] = gain
    results['duration'] = duration
    results['repetitions'] = repetitions
    return results


enamldef CalibrationManifest(PluginManifest): manifest:

    id = 'psi.controller.calibration'
    factory = CalibrationPlugin

    ExtensionPoint:
        id = 'psi.controller.calibration.channels'

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.calibration.start'
            handler = run_calibration

    Extension:
        id = manifest.id + '.calibration_store'
        point = 'psi.data.sinks'

        TextStore:
            name = 'calibration_data'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            weight = 10
            event = 'experiment_prepare'
            command = 'psi.controller.calibration.start'
