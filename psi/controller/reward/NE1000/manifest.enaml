import numpy as np

from enaml.widgets.api import Action
from enaml.workbench.api import PluginManifest, Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi.core.utils import find_extension
from psi.context.api import ContextGroup, Parameter
from ..reward import Reward

PLUGIN_ID = 'psi.controller.reward.NE1000' 


class NE1000(Reward):

    def provide_reward(self, workbench):
        core = workbench.get_plugin('enaml.workbench.core')
        rv = core.invoke_command('psi.context.get_value', parameters)


def trigger(event):
    extension = find_extension(event.workbench, PLUGIN_ID, 'reward', NE1000)
    extension.provide_reward(event.workbench)


enamldef NE1000Manifest(PluginManifest): manifest:

    id = PLUGIN_ID

    Extension:
        id = 'parameters'
        point = 'psi.context.items'

        ContextGroup:
            name = PLUGIN_ID
            label = 'Pump Settings'
        Parameter:
            name = 'reward_volume'
            label = 'Reward volume (ul)'
            compact_label = 'Vol'
            dtype = np.dtype('float32')
            default = 20
            expression = '20'
            group = PLUGIN_ID
            scope = 'trial'

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + 'trigger'
            handler = trigger
            
    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment/pump'
            label = 'NE1000 pump'
            ItemGroup:
                id = 'pump'
        ActionItem:
            path = '/equipment/pump/trigger'
            label = 'Trigger pump'
            group = 'pump'
            command = PLUGIN_ID + 'trigger'

    Extension:
        id = 'reward'
        point = 'psi.controller.reward'
        NE1000:
            pass
