import logging
log =  logging.getLogger(__name__)

from functools import partial
from collections import defaultdict

import numpy as np

from enaml.core.api import Looper, Include, Conditional
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi.context.api import ContextGroup, Parameter
from psi.experiment.api import ItemPreferences

from psi.core.enaml.api import PSIManifest
from .experiment_action import ExperimentState, ExperimentEvent, ExperimentAction
from .queue import queues


def toggle_off(event, output):
    output.set_low()


def toggle_on(event, output):
    output.set_high()


def fire(event, output):
    output.fire()


def toggle(event, output):
    if event.parameters['state']:
        toggle_on(event, output)
    else:
        toggle_off(event, output)


def set_token(event, output, output_type):
    if not event.parameters['token_name']:
        return
    token_plugin = event.workbench.get_plugin('psi.token')
    factory = getattr(token_plugin, 'generate_{}_token'.format(output_type))
    token = factory(event.parameters['token_name'], output.name, output.label)
    output.token = token
    output.token_name = event.parameters['token_name']

    # TODO: This is a hack. Maybe?
    context_plugin = event.workbench.get_plugin('psi.context')
    context_plugin._refresh_items()


def prepare_output(event, output):
    '''
    Set up the factory in preparation for producing the signal. This allows the
    factory to cache some potentially expensive computations in advance rather
    than just before we actually want the signal played.
    '''
    core = event.workbench.get_plugin('enaml.workbench.core')
    context = core.invoke_command('psi.context.get_values')
    context['fs'] = output.fs
    context['calibration'] = output.calibration
    output.factory = output.token.initialize_factory(context)


def add_setting_to_epoch_output(setting, output):
    averages = setting['{}_averages'.format(output.name)]
    iti_duration = setting['{}_iti_duration'.format(output.name)]

    # Somewhat surprisingly it appears to be faster to use factories in
    # the queue rather than creating the waveforms for ABR tone pips,
    # even for very short signal durations.
    setting['fs'] = output.fs
    setting['calibration'] = output.calibration
    factory = output.token.initialize_factory(setting)
    duration = factory.get_duration()
    output.queue.append(factory, averages, iti_duration, duration, setting)


def prepare_output_queue(event, output):
    log.info('Setting up queue for {}'.format(output.name))

    controller = event.workbench.get_plugin('psi.controller')
    context = event.workbench.get_plugin('psi.context')

    action_name = output.name + '_end'
    output.complete_cb = partial(controller.invoke_actions, action_name)

    for setting in context.iter_settings(output.selector_name, 1):
        add_setting_to_epoch_output(setting, output)


def set_output_queue(event, output):
    queue_class = event.parameters['queue_class']
    output.queue = queue_class(output.fs)


def prepare_synchronized(synchronized, event):
    log.debug('Preparing synchronized %s', synchronized.name)
    for output in synchronized.outputs:
        prepare_output(event, output)


def start_synchronized(synchronized, event):
    log.debug('Starting synchronized %s', synchronized.name)
    for output in synchronized.outputs:
        if output.factory is None:
            log.warn('Output %s was not prepared', output.name)
            prepare_output(event, output)

    ts = event.parameters['timestamp']
    start = event.parameters.get('start', ts)
    delay = event.parameters.get('delay', 0)

    # For each engine involved in this synchronized output, store a list of the
    # offsets and channel names that need to be updated.
    engines = set(output.engine for output in synchronized.outputs)
    settings = {e: {'offsets': [], 'channel_names': []} for e in engines}

    # First, lock all engines involved to avoid race conditions
    log.debug('Locking all engines')
    for engine in engines:
        engine.lock.acquire()

    # Activate the outputs
    for output in synchronized.outputs:
        offset = int((start+delay)*output.channel.fs)
        log.debug('Starting output %s', output.name)
        output.activate(offset)

        setting = settings[output.engine]
        setting['offsets'].append(offset)
        setting['channel_names'].append(output.channel.name)

    # Tell the engines to update the waveform
    for engine, setting in settings.items():
        engine.update_hw_ao_multiple(method='write_position', **setting)

    # Finally, release the lock.
    for engine in engines:
        engine.lock.release()


def start_output(event, output):
    if output.factory is None:
        log.warn('Output %s was not prepared', output.name)
        prepare_output(event, output)

    # Compensate for filter delay by shifting start time of output *earlier* in
    # time.
    filter_delay = output.channel.filter_delay
    ts = event.parameters['timestamp']
    start = event.parameters.get('start', ts)
    delay = event.parameters.get('delay', 0)
    offset = round((start+delay-filter_delay)*output.channel.fs)

    with output.engine.lock:
        # Important to lock the engine when activating the output to prevent
        # race conditions
        log.debug('Starting output {}'.format(output))
        output.activate(offset)
        output.engine.update_hw_ao(offset, output.channel.name,
                                   method='write_position')

    controller = event.workbench.get_plugin('psi.controller')
    controller.invoke_actions('{}_start'.format(output.name), start+delay)
    duration = output.factory.get_duration()
    if duration is not np.inf:
        controller.invoke_actions('{}_end'.format(output.name),
                                  start+delay+duration, delayed=True)


def clear_output(event, output):
    end = event.parameters['timestamp']
    delay = event.parameters.get('delay', 0)

    with output.engine.lock:
        log.debug('Clearing output {}'.format(output.name))
        # First, deactivate the output if it's still running
        if output.active:
            log.debug('Deactivating output {}'.format(output.name))
            output.deactivate()
        # Now, update the channel once the output has been deactivated. This
        # will overwrite any data that contains a fragment of the output
        # waveform.
        offset = int((end+delay)*output.fs)
        output.engine.update_hw_ao(offset, output.channel.name,
                                   method='write_position')

    controller = event.workbench.get_plugin('psi.controller')
    controller.invoke_actions('{}_end'.format(output.name), end+delay)


def decrement_key(event, output):
    counts = defaultdict(int)
    for epoch in event.parameters['data']:
        key = epoch['info']['key']
        counts[key] += 1
    with output.engine.lock:
        for key, count in counts.items():
            output.queue.decrement_key(key, count)


enamldef SynchronizedManifest(PSIManifest): manifest:

    Extension:
        id = 'output_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.prepare'
            handler = partial(prepare_synchronized, manifest.contribution)
        Command:
            id = manifest.contribution.name + '.start'
            handler = partial(start_synchronized, manifest.contribution)


enamldef AnalogOutputManifest(PSIManifest): manifest:

    Extension:
        id = 'output_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.set_token'
            handler = partial(set_token, output=manifest.contribution,
                              output_type=output_type)
        Command:
            id = manifest.contribution.name + '.prepare'
            handler = partial(prepare_output, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.start'
            handler = partial(start_output, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.clear'
            handler = partial(clear_output, output=manifest.contribution)

    Extension:
        id = 'output_menu.' + manifest.contribution.name
        point = 'enaml.workbench.ui.actions'
        MenuItem: menu:
            path = '/equipment/output/{}'.format(manifest.contribution.name)
            label = '{} ({})'.format(manifest.contribution.label, output_type)
            ItemGroup:
                id = manifest.contribution.name + '_commands'
            ItemGroup:
                exclusive = True
                id = manifest.contribution.name + '_tokens'
        Looper:
            # Generate the token menu so we can select the right token. Tokens
            # is defined in the appropriate subclass (to point to continuous vs
            # epoch-based waveforms).
            iterable << tokens.values()
            ActionItem:
                path = '{}/{}'.format(menu.path, loop_item.name)
                label << loop_item.label
                group = manifest.contribution.name + '_tokens'
                command = manifest.contribution.name + '.set_token'
                checked << manifest.contribution.token_name == loop_item.name
                checkable = True
                parameters = {'token_name': loop_item.name}
                enabled << workbench.get_plugin('psi.controller').experiment_state \
                    in ('initialized', 'stopped')

    Extension:
        # For some reason this doesn't get loaded if it's lumped together with
        # the following extension, so I've split them out. Not sure why. Some
        # exception is getting swallowed silently.
        id = 'groups.' + manifest.contribution.name
        point = 'psi.context.items'
        ContextGroup:
            name = manifest.contribution.name
            label = manifest.contribution.label

    Extension:
        id = 'items.' + manifest.contribution.name
        point = 'psi.context.items'
        Include:
            # list provides an empty list of context items if needed.
            objects << getattr(manifest.contribution.token, 'get_context_items',
                               list)()

    Extension:
        id = 'actions.' + manifest.contribution.name
        point = 'psi.controller.actions'
        ExperimentState:
            name = manifest.contribution.name

    Extension:
        id = 'preferences.' +  manifest.contribution.name
        point = 'psi.experiment.preferences'
        rank = 10
        ItemPreferences:
            name = 'output.' + manifest.contribution.name
            item = manifest.contribution
            auto_save = ['token_name']
            set_preferences => (workbench, preferences):
                # Override the set_preferences since we need to loop into the
                # token generation machinery. The output does not have access
                # to this plugin. TODO This is a hack. I'm sure I'll figure out a
                # better approach eventually.
                core = workbench.get_plugin('enaml.workbench.core')
                command = manifest.contribution.name + '.set_token'
                core.invoke_command(command, parameters=preferences)


enamldef EpochOutputManifest(AnalogOutputManifest): manifest:

    attr tokens = workbench.get_plugin('psi.token')._epoch_tokens
    attr output_type = 'epoch'


enamldef QueuedEpochOutputManifest(EpochOutputManifest): manifest:

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.prepare_queue'
            handler = partial(prepare_output_queue, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.set_queue'
            handler = partial(set_output_queue, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.decrement_key'
            handler = partial(decrement_key, output=manifest.contribution)

    Extension:
        id = 'epoch_output_menu.' + manifest.contribution.name
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment/output/{}/queue'.format(manifest.contribution.name)
            label = 'ordering'
            ItemGroup:
                exclusive = True
                id = manifest.contribution.name + '.queue'

        Looper:
            iterable << queues.items()

            ActionItem:
                path = '/equipment/output/{}/queue/{}'.format(manifest.contribution.name, loop_item[0])
                label = loop_item[0]
                group = manifest.contribution.name + '.queue'
                checked << isinstance(manifest.contribution.queue, loop_item[1])
                checkable = True
                command = manifest.contribution.name + '.set_queue'
                parameters = {'queue_class': loop_item[1]}
                enabled << workbench.get_plugin('psi.controller').experiment_state \
                    in ('initialized', 'stopped')


enamldef SelectorQueuedEpochOutputManifest(QueuedEpochOutputManifest): manifest:

    Extension:
        id = 'items'
        point = 'psi.context.items'

        ContextGroup:
            name = manifest.contribution.name + '_sequence'
            label = manifest.contribution.label + ' epoch settings'

            Parameter:
                name = manifest.contribution.name + '_iti_duration'
                label = manifest.contribution.label + ' intertrial interval (s)'
                compact_label = manifest.contribution.label + ' ITI'
                default = 0.1
                scope = 'experiment'

            Parameter:
                name = manifest.contribution.name + '_averages'
                label = manifest.contribution.label + ' averages'
                compact_label = manifest.contribution.label + ' N'
                default = 1
                scope = 'experiment'

    Extension:
        id = 'epoch_output_actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.contribution.name + '.prepare_queue'


enamldef ContinuousOutputManifest(AnalogOutputManifest): manifest:

    attr tokens = workbench.get_plugin('psi.token')._continuous_tokens
    attr output_type = 'continuous'


enamldef ToggleManifest(PSIManifest): manifest:

    Extension:
        id = 'toggle_commands.' + manifest.contribution.name
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.off'
            handler = partial(toggle_off, output=manifest.contribution)
        Command:
            id = manifest.id + '.on'
            handler = partial(toggle_on, output=manifest.contribution)
        Command:
            id = manifest.id + '.toggle'
            handler = partial(toggle, output=manifest.contribution)

    Extension:
        id = 'toggle_actions.' + manifest.contribution.name
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/{}'.format(manifest.contribution.name)
            label = '{}'.format(manifest.contribution.label)
            command = manifest.id + '.toggle'
            parameters << {'state': checked}
            checked << manifest.contribution.state
            checkable = True
            status_tip = command


enamldef TriggerManifest(PSIManifest): manifest:

    Extension:
        id = 'trigger_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.trigger'
            handler = partial(fire, output=manifest.contribution)

    Extension:
        id = 'trigger_actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/{}'.format(manifest.contribution.name)
            label = '{} trigger'.format(manifest.contribution.label)
            command = manifest.id + '.trigger'
            status_tip = command
