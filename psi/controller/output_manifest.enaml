import logging
log =  logging.getLogger(__name__)

from functools import partial

import numpy as np

from atom.api import Typed, Property

from enaml.core.api import d_, Looper, Include
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi.context.api import ContextGroup, Parameter
from psi.experiment.api import ItemPreferences

from psi.core.enaml.api import PSIManifest
from .experiment_action import ExperimentState, ExperimentEvent


def toggle_off(event, output):
    output.set_low()


def toggle_on(event, output):
    output.set_high()


def fire(event, output):
    output.fire()


def toggle(event, output):
    if event.parameters['state']:
        toggle_on(event, output)
    else:
        toggle_off(event, output)


def set_token(event, output, output_type):
    token_plugin = event.workbench.get_plugin('psi.token')
    factory = getattr(token_plugin, 'generate_{}_token'.format(output_type))
    token = factory(event.parameters['token_name'], output.name, output.label)
    output.token = token
    output.token_name = event.parameters['token_name']

    # TODO: This is a hack. Maybe?
    context_plugin = event.workbench.get_plugin('psi.context')
    context_plugin._refresh_items()


def prepare_output(event, output):
    core = event.workbench.get_plugin('enaml.workbench.core')
    context = core.invoke_command('psi.context.get_values')
    output.setup(context)


def prepare_output_queue(event, output):
    controller = event.workbench.get_plugin('psi.controller')
    context = event.workbench.get_plugin('psi.context')
    iterable = context.iter_settings(output.selector_name, 1)
    action_name = output.name + '_complete'
    complete_cb = partial(controller.invoke_actions, action_name)
    output.setup(iterable, complete_cb)


def start_output(event, output):
    ts = event.parameters['timestamp']
    start = event.parameters.get('start', ts)
    delay = event.parameters.get('delay', 0)
    duration = output.start(start, delay)

    controller = event.workbench.get_plugin('psi.controller')
    controller.invoke_actions('{}_start'.format(output.name), start+delay)
    controller.invoke_actions('{}_end'.format(output.name),
                              start+delay+duration, delayed=True)


def clear_output(event, output):
    end = event.parameters['timestamp']
    delay = event.parameters.get('delay', 0)
    output.clear(end, delay)
    controller = event.workbench.get_plugin('psi.controller')
    controller.invoke_actions('{}_end'.format(output.name), end+delay)

    
def decrement_key(event, output):
    for epoch in event.parameters['data']:
        try:
            output.queue.decrement_key(epoch['key'])
        except KeyError:
            m = 'Acquired extra epoch for {}'
            log.debug(m.format(epoch['key']))


enamldef AnalogOutputManifest(PSIManifest): manifest:

    Extension:
        id = 'output_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.set_token'
            handler = partial(set_token, output=manifest.contribution,
                              output_type=output_type)
        Command:
            id = manifest.contribution.name + '.prepare'
            handler = partial(prepare_output, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.start'
            handler = partial(start_output, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.clear'
            handler = partial(clear_output, output=manifest.contribution)

    Extension:
        id = 'output_menu.' + manifest.contribution.name
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment/output/{}'.format(manifest.contribution.name)
            label = '{} ({})'.format(manifest.contribution.label, output_type)
            ItemGroup:
                exclusive = True
                id = manifest.contribution.name
        Looper:
            # Provide this in the subclass
            iterable << tokens.values()
            ActionItem:
                path = '/equipment/output/{}/{}'.format(manifest.contribution.name, 
                                                        loop_item.name)
                label << loop_item.label
                group = manifest.contribution.name
                command = manifest.contribution.name + '.set_token'
                checked << manifest.contribution.token_name == loop_item.name
                checkable = True
                parameters = {'token_name': loop_item.name}
                enabled << workbench.get_plugin('psi.controller').experiment_state \
                    in ('initialized', 'stopped')

    Extension:
        # For some reason this doesn't get loaded if it's lumped together with
        # the following extension, so I've split them out. Not sure why. Some
        # exception is getting swallowed silently.
        id = 'groups.' + manifest.contribution.name
        point = 'psi.context.items'
        ContextGroup:
            name = manifest.contribution.name
            label = manifest.contribution.label

    Extension:
        id = 'items.' + manifest.contribution.name
        point = 'psi.context.items'
        Include:
            # list provides an empty list of context items if needed.
            objects << getattr(manifest.contribution.token, 'get_context_items',
                               list)()

    Extension:
        id = 'actions.' + manifest.contribution.name
        point = 'psi.controller.actions'
        ExperimentState:
            name = manifest.contribution.name

    Extension:
        id = 'preferences.' +  manifest.contribution.name
        point = 'psi.experiment.preferences'
        rank = 10
        ItemPreferences:
            name = 'output.' + manifest.contribution.name
            item = manifest.contribution
            auto_save = ['token_name']
            set_preferences => (workbench, preferences):
                # Override the set_preferences since we need to loop into the
                # token generation machinery. The output does not have access
                # to this plugin. TODO This is a hack. I'm sure I'll figure out a
                # better approach eventually.
                core = workbench.get_plugin('enaml.workbench.core')
                command = manifest.contribution.name + '.set_token'
                core.invoke_command(command, parameters=preferences)


enamldef EpochOutputManifest(AnalogOutputManifest): manifest:

    attr tokens = workbench.get_plugin('psi.token')._epoch_tokens
    attr output_type = 'epoch'


enamldef QueuedEpochOutputManifest(EpochOutputManifest): manifest:

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentEvent:
            name = manifest.contribution.name + '_complete'

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.prepare_queue'
            handler = partial(prepare_output_queue, output=manifest.contribution)
        Command:
            id = manifest.contribution.name + '.decrement_key'
            handler = partial(decrement_key, output=manifest.contribution)

    Extension:
        id = 'items'
        point = 'psi.context.items'

        ContextGroup:
            name = manifest.contribution.name + '_sequence'
            label = manifest.contribution.label + ' epoch settings'

            Parameter:
                name = manifest.contribution.name + '_iti_duration'
                label = manifest.contribution.label + ' intertrial interval (s)'
                compact_label = manifest.contribution.label + ' ITI'
                default = 0.1
                scope = 'experiment'

            Parameter:
                name = manifest.contribution.name + '_averages'
                label = manifest.contribution.label + ' averages'
                compact_label = manifest.contribution.label + ' N'
                default = 1
                scope = 'experiment'



enamldef ContinuousOutputManifest(AnalogOutputManifest): manifest:

    attr tokens = workbench.get_plugin('psi.token')._continuous_tokens
    attr output_type = 'continuous'


enamldef ToggleManifest(PSIManifest): manifest:

    Extension:
        id = 'toggle_commands.' + manifest.contribution.name
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.off'
            handler = partial(toggle_off, output=manifest.contribution)
        Command:
            id = manifest.id + '.on'
            handler = partial(toggle_on, output=manifest.contribution)
        Command:
            id = manifest.id + '.toggle'
            handler = partial(toggle, output=manifest.contribution)

    Extension:
        id = 'toggle_actions.' + manifest.contribution.name
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/{}'.format(manifest.contribution.name)
            label = '{}'.format(manifest.contribution.label)
            command = manifest.id + '.toggle'
            parameters << {'state': checked}
            checked << manifest.contribution.state
            checkable = True
            status_tip = command


enamldef TriggerManifest(PSIManifest): manifest:

    Extension:
        id = 'trigger_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.trigger'
            handler = partial(fire, output=manifest.contribution)

    Extension:
        id = 'trigger_actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/{}'.format(manifest.contribution.name)
            label = '{} trigger'.format(manifest.contribution.label)
            command = manifest.id + '.trigger'
            status_tip = command
