from functools import partial

import numpy as np

from atom.api import Typed

from enaml.core.api import d_, Looper, Include
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from psi.context.api import ContextGroup

from .device_manifest import DeviceManifest
from .experiment_action import ExperimentState


def toggle_off(event, output):
    output.set_low()
    

def toggle_on(event, output):
    output.set_high()


def fire(event, output):
    output.fire()


def toggle(event, output):
    if event.parameters['state']:
        toggle_on(event, output)
    else:
        toggle_off(event, output)


enamldef AnalogOutputManifest(DeviceManifest): manifest:

    Extension:
        id = 'epoch_menu.' + manifest.device.name
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment/output/{}'.format(manifest.device.name)
            label = '{} ({})'.format(manifest.device.label, output_type)
            ItemGroup:
                exclusive = True
                id = manifest.device.name
        Looper:
            # Provide this in the subclass
            iterable << tokens.values()
            ActionItem:
                path = '/equipment/output/{}/{}'.format(manifest.device.name, loop_item.name)
                label << loop_item.label
                group = manifest.device.name
                command = 'psi.controller.configure_output'
                parameters = {'output_name': manifest.device.name, 'token_name': loop_item.name}
                checked << manifest.device._token_name == loop_item.name
                checkable = True

    Extension:
        id = 'items.' + manifest.device.name
        point = 'psi.context.items'
        ContextGroup:
            name = manifest.device.name
            label = manifest.device.label
            visible = manifest.device.visible

        Include:
            objects << getattr(manifest.device._token, 'get_context_items', list)()

    Extension:
        id = 'actions.' + manifest.device.name
        point = 'psi.controller.actions'
        ExperimentState:
            name = manifest.device.name


enamldef EpochOutputManifest(AnalogOutputManifest): manifest:

    attr tokens << workbench.get_plugin('psi.token')._epoch_tokens
    attr output_type = 'epoch'


enamldef ContinuousOutputManifest(AnalogOutputManifest): manifest:

    attr tokens << workbench.get_plugin('psi.token')._continuous_tokens
    attr output_type = 'continuous'


enamldef ToggleManifest(DeviceManifest): manifest:

    Extension:
        id = 'toggle_commands.' + manifest.device.name
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.off'
            handler = partial(toggle_off, output=manifest.device)
        Command:
            id = manifest.id + '.on'
            handler = partial(toggle_on, output=manifest.device)
        Command:
            id = manifest.id + '.toggle'
            handler = partial(toggle, output=manifest.device)
            
    Extension:
        id = 'toggle_actions.' + manifest.device.name
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/{}'.format(manifest.device.name)
            label = '{}'.format(manifest.device.label)
            command = manifest.id + '.toggle'
            parameters << {'state': checked}
            checked << manifest.device.state
            checkable = True


enamldef TriggerManifest(DeviceManifest): manifest:

    Extension:
        id = 'trigger_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.trigger'
            handler = partial(fire, output=manifest.device)
            
    Extension:
        id = 'trigger_actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/equipment/{}'.format(manifest.device.name)
            label = '{} trigger'.format(manifest.device.label)
            command = manifest.id + '.trigger'
