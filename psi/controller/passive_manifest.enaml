import logging
log = logging.getLogger(__name__)

from atom.api import Typed

from enaml.application import deferred_call
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, Parameter, SequenceSelector
from psi.controller.api import EpochOutput, ExperimentAction

from psi.controller.output import QueuedEpochOutput
from psi.controller.input import ExtractEpochs, Input, Threshold, ITI, Edges, Blocked, Accumulate

from .base_manifest import BaseManifest
from .base_plugin import BasePlugin

from .queue import InterleavedFIFOSignalQueue

from psi.data.plots import (PGTimeContainer, 
                            PGExtremesChannelPlot, 
                            PGEpochAverageGridContainer,
                            PGChannelPlot)

import time

from psi.data.sinks.trial_log_counter import TrialLogCounter


def process_key(event):
    core = event.workbench.get_plugin('enaml.workbench.core')
    metadata = [e['metadata'] for e in event.parameters['data']]
    parameters = {'results': metadata}
    core.invoke_command('psi.data.process_trials', parameters)


enamldef PassiveManifest(BaseManifest): manifest:

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        QueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            target_name = 'speaker_0'
            selector_name = 'default'
            queue = InterleavedFIFOSignalQueue(fs=output.fs)
            auto_decrement = False

        Blocked:
            duration = 0.1
            name = 'eeg'
            save = True
            source_name = 'eeg_channel'

            Accumulate:
                name = 'eeg_buffered'
                n = 100

                ExtractEpochs:
                    save = True
                    name = 'erp'
                    buffer_size = 20
                    epoch_size = 8.5e-3
                    queue = output.queue
                    source_name = 'eeg_buffered'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'
        SequenceSelector:
            name = 'default'

    Extension:
        id = 'passive_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.process_key'
            handler = process_key

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'erp_average.prepare_grid'
            kwargs = {'selector_name': 'default'}

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'target.prepare_queue'

        ExperimentAction:
            event = 'erp_acquired'
            command = 'psi.controller.process_key'

        ExperimentAction:
            event = 'erp_acquired'
            command = 'target.decrement_key'

        ExperimentAction:
            event = 'target_complete'
            command = 'psi.controller.stop'

    Extension:
        id = 'sink'
        point = 'psi.data.sinks'
        rank = 100

        TrialLogCounter:
            pass

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        PGEpochAverageGridContainer:
            name = 'erp_average'
            title = 'ERP average'
            source_name = 'erp'

        PGTimeContainer:
            name = 'trial_plot_container' 
            title = 'Trial timing'
            span = 2.5

            PGExtremesChannelPlot:
                source_name = 'eeg'
