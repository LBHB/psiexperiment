import logging
log = logging.getLogger(__name__)

from atom.api import Typed

from enaml.application import deferred_call
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, Parameter, SequenceSelector
from psi.controller.api import EpochOutput, ExperimentAction

from psi.controller.output import QueuedEpochOutput
#from psi.controller.input import ExtractEpoch

from .base_manifest import BaseManifest
from .base_plugin import BasePlugin

from .queue import FIFOSignalQueue

from psi.data.plots import (TimeContainer, ChannelPlot, TimeseriesPlot,
                            ExtremesChannelPlot, FFTContainer, FFTChannelPlot)

import time


enamldef PassiveManifest(BaseManifest): manifest:

    factory = PassivePlugin

    Extension:
        id = 'new_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.queue_trials'
            handler = queue_trials

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        FIFOSignalQueue: dq
            name = 'default'

        QueuedEpochOutput:
            name = 'target'
            label = 'Target'
            target_name = 'speaker'
            queue = dq

        QueuedEpochInput:
            name = 'erp'
            source_name = 'microphone'
            buffer_size = 10
            epoch_size = 8.5e-3
            queue = dq

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'
        SequenceSelector:
            name = 'default'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'target.prepare'

        ExperimentAction:
            event = 'erp_epoch_acquired'
            command = 'psi.controller.log_trial'
