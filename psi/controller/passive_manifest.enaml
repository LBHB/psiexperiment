import logging
log = logging.getLogger(__name__)

from atom.api import Typed

from enaml.application import deferred_call
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, Parameter, SequenceSelector
from psi.controller.api import EpochOutput, ExperimentAction

from psi.controller.output import QueuedEpochOutput
from psi.controller.input import ExtractEpochs

from .base_manifest import BaseManifest
from .base_plugin import BasePlugin

from .queue import FIFOSignalQueue

from psi.data.plots import (TimeContainer, ChannelPlot, TimeseriesPlot,
                            ExtremesChannelPlot, FFTContainer, FFTChannelPlot)

import time


def process_key(event):
    core = event.workbench.get_plugin('enaml.workbench.core')
    parameters = {'results': event.parameters['metadata']}
    core.invoke_command('psi.data.process_trial', parameters)


enamldef PassiveManifest(BaseManifest): manifest:

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        QueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            target_name = 'speaker'
            selector_name = 'default'
            queue = FIFOSignalQueue()
            auto_decrement = False

        ExtractEpochs:
            name = 'erp'
            source_name = 'microphone'
            buffer_size = 5
            epoch_size = 8.5e-3
            queue = output.queue

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'
        SequenceSelector:
            name = 'default'

    Extension:
        id = 'passive_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.process_key'
            handler = process_key

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'target.prepare_queue'

        ExperimentAction:
            event = 'erp_acquired'
            command = 'psi.controller.process_key'

        ExperimentAction:
            event = 'erp_acquired'
            command = 'target.decrement_key'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        FFTContainer:
            name = 'fft_plot_container'
            title = 'FFT'
            freq_lb = 0.1e3 
            freq_ub = 10e3

            FFTChannelPlot:
                source = 'microphone'
                line_color = (0, 0, 0)
                value_range = (0, 100)
                time_span = 1
                axis_label = 'Level (dB SPL)'
                reference = 20e-6

        TimeContainer:
            name = 'trial_plot_container' 
            title = 'Trial timing'
            trig_delay = 0
            span = 5

            ExtremesChannelPlot:
               source = 'microphone'
               line_color = (0, 0, 0)
               value_range = (-1, 1)
