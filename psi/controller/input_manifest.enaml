from functools import partial

import numpy as np

from atom.api import Property
from enaml.core.api import Conditional
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.widgets.api import DockItem, Container, Label, Form

from .device_manifest import DeviceManifest
from .experiment_action import (ExperimentEvent, ExperimentState,
                                ExperimentAction)

from psi.context.api import Parameter, ContextGroup
from psi.core.enaml.api import PSIManifest
from psi.util import declarative_to_dict


def get_metadata(contribution):
    return declarative_to_dict(contribution, 'metadata')


enamldef InputManifest(PSIManifest): manifest:

    Extension:
        id = 'actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentEvent:
            name = manifest.contribution.name + '_acquired'


enamldef ContinuousInputManifest(InputManifest): manifest:

    Extension:
        id = 'continuous_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        Conditional:
            condition << manifest.contribution.save

            ExperimentAction:
                event = 'experiment_prepare'
                command = 'psi.data.create_ai_continuous'
                kwargs = get_metadata(manifest.contribution)
                weight = 90

            ExperimentAction:
                event = manifest.contribution.name + '_acquired'
                command = 'psi.data.process_ai_continuous'
                kwargs = {'name': manifest.contribution.name}


def capture_start(contribution, event):
    print('event here', event)


enamldef CaptureManifest(ContinuousInputManifest): manifest:

    Extension:
        id = 'capture_commands.' + manifest.contribution.name
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.start'
            handler = partial(capture_start, manifest.contribution)


enamldef EventInputManifest(InputManifest): manifest:
    pass


enamldef EpochInputManifest(InputManifest): manifest:

    Extension:
        id = 'epoch_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.create_ai_epochs'
            kwargs = get_metadata(manifest.contribution)
            weight = 90

        ExperimentAction:
            event = manifest.contribution.name + '_acquired'
            command = 'psi.data.process_ai_epochs'
            kwargs = {'name': manifest.contribution.name}


enamldef ExtractEpochsManifest(EpochInputManifest): manifest:

    Extension:
        id = 'extract_epochs_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentState:
            name = manifest.contribution.name + '_queue'


enamldef RejectEpochsManifest(EpochInputManifest): manifest:

    Extension:
        id = 'reject_epochs_workspace.' + manifest.contribution.name
        point = 'psi.experiment.workspace'

        DockItem:
            name = manifest.contribution.name
            title = 'Epoch reject'
            Form:
                Label:
                    text = 'Total epochs'
                Label:
                    text << str(manifest.contribution.total)
                Label:
                    text = 'Rejects'
                Label:
                    text << str(manifest.contribution.rejects)
                Label:
                    text = 'Reject ratio'
                Label:
                    text << '{:.2f}'.format(manifest.contribution.reject_ratio)
