from atom.api import Property
from enaml.core.api import Conditional
from enaml.workbench.api import Extension

from .device_manifest import DeviceManifest
from .experiment_action import ExperimentEvent, ExperimentAction

from psi.core.enaml.api import PSIManifest
from psi.util import declarative_to_dict


def get_metadata(contribution):
    return declarative_to_dict(contribution, 'metadata')


enamldef InputManifest(PSIManifest): manifest:

    Extension:
        id = 'actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentEvent:
            name = manifest.contribution.name + '_acquired'


enamldef ContinuousInputManifest(InputManifest): manifest:

    Extension:
        id = 'continuous_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.create_ai_continuous'
            kwargs = get_metadata(manifest.contribution)

        ExperimentAction:
            event = manifest.contribution.name + '_acquired'
            command = 'psi.data.process_ai_continuous'
            kwargs = {'name': manifest.contribution.name}


enamldef EventInputManifest(InputManifest): manifest:

    Extension:
        id = 'event_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.create_ai_events'
            kwargs = get_metadata(manifest.contribution)

        ExperimentAction:
            event = manifest.contribution.name + '_acquired'
            command = 'psi.data.process_ai_events'
            kwargs = {'name': manifest.contribution.name}


enamldef EpochInputManifest(InputManifest): manifest:

    Extension:
        id = 'epoch_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.create_ai_epochs'
            kwargs = get_metadata(manifest.contribution)

        ExperimentAction:
            event = manifest.contribution.name + '_acquired'
            command = 'psi.data.process_ai_epochs'
            kwargs = {'name': manifest.contribution.name}


enamldef ExtractEpochsManifest(InputManifest): manifest:

    Extension:
        id = 'extract_epochs_actions.' + manifest.contribution.name
        point = 'psi.controller.actions'

        ExperimentEvent: event:
            name = manifest.contribution.name + '_queue_empty'
