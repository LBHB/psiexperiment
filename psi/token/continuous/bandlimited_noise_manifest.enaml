import numpy as np

from atom.api import Typed
from enaml.workbench.api import Extension

from ..api import TokenManifest, TokenPlugin
from psi.context.api import Parameter


class BandlimitedNoisePlugin(TokenPlugin):

    player = Typed(object)

    def initialize(self, fs):
        from neurogen.block_definitions import BandlimitedNoise, Cos2Envelope
        from neurogen.calibration import InterpCalibration
        from neurogen.channel import Channel
        from neurogen.player import Player

        level = self.get_context_item('level')
        bandwidth = self.get_context_item('bandwidth')
        fc = self.get_context_item('center_frequency')
        seed = self.get_context_item('seed')

        carrier = BandlimitedNoise(name='noise', bandwidth=bandwidth, fc=fc,
                                   level=level, seed=seed) 
        c = InterpCalibration.from_spl([0, 100e3], [100, 100])
        channel = Channel(calibration=c,
                          token=carrier, voltage_min=-10, voltage_max=10)
        self.player = Player(fs=fs)
        self.player.add_channel(channel)

    def get_waveform(self, offset, samples):
        return self.player.realize_samples(offset, samples)[0]


enamldef BandlimitedNoiseManifest(TokenManifest): m:

    id = 'token.bandlimited_noise.{}'.format(m.base)
    factory = lambda base=m.base: BandlimitedNoisePlugin(base=base)

    Extension:
        id = '{}_items'.format(m.id)
        point = 'psi.context.items'

        Parameter:
            name = '{}_level'.format(m.base)
            label = '{} level (dB SPL)'.format(m.label_base)
            compact_label = '{} level'.format(m.compact_base)
            dtype = np.float32
            default = 60
            expression = '60'
            group = m.base
            scope = m.scope

        Parameter:
            name = '{}_center_frequency'.format(m.base)
            label = '{} center frequency (Hz)'.format(m.label_base)
            compact_label = '{} fc'.format(m.compact_base)
            dtype = np.float32
            default = 1000
            expression = '1000'
            group = m.base
            scope = m.scope

        Parameter:
            name = '{}_bandwidth'.format(m.base)
            label = '{} bandwidth (Hz)'.format(m.label_base)
            compact_label = '{} bw'.format(m.compact_base)
            dtype = np.float32
            default = 1000
            expression = '1000'
            group = m.base

        Parameter:
            name = '{}_seed'.format(m.base)
            label = '{} random seed'.format(m.label_base)
            compact_label = '{} seed'.format(m.compact_base)
            dtype = np.float32
            default = 1
            expression = '1'
            group = m.base
