import numpy as np

from atom.api import Typed
from enaml.workbench.api import Extension

from ..api import TokenManifest, TokenPlugin
from psi.context.api import Parameter


class TonePlugin(TokenPlugin):

    player = Typed(object)

    def initialize(self, fs):
        from neurogen.block_definitions import Tone
        from neurogen.calibration import InterpCalibration
        from neurogen.channel import Channel
        from neurogen.player import Player

        level = self.get_context_item('level')
        frequency = self.get_context_item('frequency')

        carrier = Tone(name='tone', level=level, frequency=frequency)
        c = InterpCalibration.from_spl([0, 100e3], [100, 100])
        channel = Channel(calibration=c, token=carrier, voltage_min=-10, voltage_max=10)
        self.player = Player(fs=fs)
        self.player.add_channel(channel)

    def get_waveform(self, offset, samples):
        return self.player.realize_samples(offset, samples)


enamldef ToneManifest(TokenManifest): m:

    id = 'token.cont.tone.{}'.format(m.base)
    factory = lambda base=m.base: TonePlugin(base=base)

    Extension:
        id = '{}_items'.format(m.id)
        point = 'psi.context.items'

        Parameter:
            name = '{}_level'.format(m.base)
            label = '{} level (dB SPL)'.format(m.label_base)
            compact_label = '{} level'.format(m.compact_base)
            dtype = np.float32
            default = 60
            expression = '60'
            group = m.base
            scope = m.scope

        Parameter:
            name = '{}_frequency'.format(m.base)
            label = '{} frequency (Hz)'.format(m.label_base)
            compact_label = '{} fc'.format(m.compact_base)
            dtype = np.float32
            default = 1000
            expression = '1000'
            group = m.base
            scope = m.scope
