import numpy as np

from atom.api import Unicode, Typed
from enaml.workbench.api import Extension, Plugin

from ..api import TokenManifest, TokenPlugin
from psi.context.api import Parameter, ContextGroup

from neurogen.channel import Channel
from neurogen.player import Player

class TonePlugin(TokenPlugin):

    channel = Typed(Channel)
    player = Typed(Player)

    def initialize(self, fs):
        from neurogen.block_definitions import Tone, Cos2Envelope
        from neurogen.calibration import InterpCalibration
        calibration = InterpCalibration.from_spl([0, 100e3], [100, 100], 1)
        token = Tone(name='tone') >> Cos2Envelope(name='envelope')
        self.channel = Channel(calibration=calibration, token=token,
                               voltage_min=-10, voltage_max=10)
        self.player = Player(fs=fs)
        self.player.add_channel(self.channel)

    def get_waveform(self, offset, samples):
        context = self.workbench.get_plugin('psi.context')
        frequency = context.get_value('{}_frequency'.format(self.base))
        level = context.get_value('{}_level'.format(self.base))
        phase = context.get_value('{}_phase'.format(self.base))
        duration = context.get_value('{}_duration'.format(self.base))
        self.channel.set_values({
            'tone.frequency': frequency,
            'tone.level': level,
            'tone.phase': phase,
            'envelope.duration': duration
        })
        return self.player.realize(duration=duration)[0]


enamldef ToneManifest(TokenManifest): m:

    id = 'token.tone.{}'.format(m.base)
    factory = lambda base=m.base: TonePlugin(base=base)

    Extension:
        id = '{}_items'.format(m.id)
        point = 'psi.context.items'

        Parameter:
            name = '{}_level'.format(m.base)
            label = '{} level (dB SPL)'.format(m.label_base)
            compact_label = '{} level'.format(m.compact_base)
            dtype = np.float32
            default = 60
            expression = '60'
            group = m.base
            scope = m.scope

        Parameter:
            name = '{}_frequency'.format(m.base)
            label = '{} frequency (Hz)'.format(m.label_base)
            compact_label = '{} freq.'.format(m.compact_base)
            dtype = np.float32
            default = 1000
            expression = '1000'
            group = m.base
            scope = m.scope

        Parameter:
            name = '{}_phase'.format(m.base)
            label = '{} phase (rad.)'.format(m.label_base)
            compact_label = '{} ph..'.format(m.compact_base)
            dtype = np.float32
            default = 0
            expression = '0'
            group = m.base
            scope = m.scope

        Parameter:
            name = '{}_duration'.format(m.base)
            label = '{} duration (s)'.format(m.label_base)
            compact_label = '{} dur.'.format(m.compact_base)
            dtype = np.float32
            default = 1
            expression = '1'
            group = m.base
            scope = m.scope
