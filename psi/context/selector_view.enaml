from enaml.application import deferred_call
from enaml.core.api import Include, DynamicTemplate, Looper
from enaml.layout.api import (vbox, hbox)
from enaml.widgets.api import (PushButton, Field, Container, VGroup, HGroup,
                               Label, ObjectCombo, DockItem)

from .selector import SequenceSelector, SingleSetting


enamldef SequenceSettingField(Field):
    attr selector
    attr setting_index
    attr item
    text << str(selector.get_value(setting_index, item))
    text ::
        selector.set_value(setting_index, item, text)


enamldef SingleSettingField(Field):
    attr selector
    attr setting
    attr item
    text << str(selector.get_value(item))
    text ::
        selector.set_value(item, text)


################################################################################
# SequenceSelector UI defintion
################################################################################
enamldef SettingRemoveButton(PushButton):
    attr setting
    attr selector
    text = '-'
    clicked ::
        selector.remove_setting(setting)
        selector.updated = True


class UpdateSelectorWidgets(object):

    def __init__(self):
        self.widgets = None
        self.old_widgets = None

    def __call__(self, selector, context_items, settings):
        if len(context_items) == 0:
            return []
        lw = []
        sw = [SettingRemoveButton(setting=s, selector=selector) for s in settings]
        for item in context_items:
            label = Label(text=item.label)
            lw.append(label)
            for j, s in enumerate(settings):
                field = SequenceSettingField(selector=selector,
                                             setting_index=j, item=item)
                sw.append(field)
        lw.extend(sw)
        self.old_widgets = self.widgets
        self.widgets = lw
        deferred_call(self.destroy_old_widgets)
        return lw

    def destroy_old_widgets(self):
        if self.old_widgets is not None:
            for w in self.old_widgets:
                w.destroy()
            self.old_widgets = None


class SelectorWidgetManager(object):

    def __init__(self):
        self.updaters = {}

    def __call__(self, selector, *args, **kwargs):
        if selector not in self.updaters:
            self.updaters[selector] = UpdateSelectorWidgets()
        return self.updaters[selector](selector, *args, **kwargs)


update_selector_widgets = SelectorWidgetManager()


template SelectorContainerTemplate(selector, MemberType: SequenceSelector):
    Container:
        VGroup:
            HGroup:
                spacing = 0
                padding = 0
                PushButton: add:
                    text = 'Add'
                    clicked ::
                        selector.add_setting()
                        selector.updated = True
                PushButton: sort:
                    text = 'Sort'
                    clicked ::
                        selector.sort_settings()
                        selector.updated = True
            HGroup:
                spacing = 0
                padding = 0
                Label:
                    text = 'Order'
                ObjectCombo:
                    items = list(selector.get_member('order').items)
                    selected := selector.order

        Container: labels:
            share_layout = True
            padding = 0
            layout_constraints => ():
                n_context_items = len(selector.context_items)
                n_settings = len(selector.settings)

                # There's a drop area on either side of the label widgets to
                # facilitate reordering.
                n_label_widgets = n_context_items

                widgets = self.visible_widgets()
                label_widgets = widgets[:n_label_widgets]

                setting_widgets = widgets[n_label_widgets:]
                setting_button_widgets = setting_widgets[:n_settings]
                setting_value_widgets = setting_widgets[n_settings:]

                if len(setting_widgets) == 0:
                    return []

                # Setup hbox constraints for title row and each settings row.
                # Embed all hboxes in a vbox.
                box_constraints = [hbox(*label_widgets, spacing=0)]
                for i in range(n_settings):
                    sw = [setting_button_widgets[i]]
                    sw.extend(setting_value_widgets[i::n_settings])
                    box_constraints.append(hbox(*sw, spacing=0))
                constraints = [vbox(*box_constraints, spacing=0)]

                for i, lw in enumerate(label_widgets):
                    o = i*n_settings
                    for sw in setting_value_widgets[o:o+n_settings]:
                        constraints.append(lw.left == sw.left)

                if setting_value_widgets:
                    sw_base = setting_value_widgets[0]
                    for sw in setting_value_widgets[1:]:
                        constraints.append(sw_base.width == sw.width)

                if setting_button_widgets:
                    for sw in setting_button_widgets:
                        constraints.append(sw.width == 20)
                        constraints.append(sw.width == sw.height)

                if label_widgets:
                    t_base = label_widgets[0]
                    for t in label_widgets[1:]:
                        constraints.append(t_base.v_center == t.v_center)

                return constraints

            Include: inc:
                destroy_old = False
                objects << update_selector_widgets(
                    selector, selector.context_items, selector.settings)


################################################################################
# SingleSetting
################################################################################
def update_single_setting_widgets(selector, context_items, setting):
    widgets = []
    for item in context_items:
        label = Label(text=item.label)
        widgets.append(label)
        field = SingleSettingField(selector=selector, setting=setting,
                                   item=item)
        widgets.append(field)
    return widgets


template SelectorContainerTemplate(selector, MemberType: SingleSetting):

    Container:
        layout_constraints => ():
            widgets = self.visible_widgets()
            if len(widgets) == 0:
                return []
            label_widgets = widgets[::2]
            setting_widgets = widgets[1::2]
            row_constraints = [hbox(*label_widgets, spacing=0),
                               hbox(*setting_widgets, spacing=0)]
            constraints = [vbox(*row_constraints, spacing=0)]
            for lw, sw in zip(label_widgets, setting_widgets):
                constraints.append(lw.left == sw.left)
            return constraints

        Include: inc:
            objects << update_single_setting_widgets(selector,
                                                     selector.context_items,
                                                     selector.setting)


################################################################################
# Core elements
################################################################################
enamldef SequenceContainer(Container):
    attr selector
    DynamicTemplate:
        base = SelectorContainerTemplate
        args = (selector, type(selector))


enamldef SequenceDockItem(DockItem):
    attr selector
    closable = False

    DynamicTemplate:
        base = SelectorContainerTemplate
        args = (selector, type(selector))
