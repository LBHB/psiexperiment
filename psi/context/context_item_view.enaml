from enaml.core.api import DynamicTemplate
from enaml.layout.api import hbox
from enaml.widgets.api import Container, Field, CheckBox, Label, HGroup

from psi.context.context_item import Result, Parameter

from enaml.widgets.api import ComboBox


template ContextItemTemplate(context_item, MemberType: Result):
    # Template for Result context items
    HGroup:
        spacing = 0
        padding = 0
        Label: label:
            text = context_item.label
        Label: field:
            pass


template ContextItemTemplate(context_item, MemberType: Parameter):
    # Generic template for Parameters that splits based on the scope (e.g.
    # experiment vs trial)'
    DynamicTemplate:
        base = ParameterTemplate
        args = (context_item, context_item.scope)


template ParameterTemplate(context_item, scope: 'experiment'):

    HGroup:
        spacing = 0
        padding = 0
        Label: label:
            text = context_item.label
        Field: field:
            text := context_item.expression
            enabled << workbench.get_plugin('psi.controller').state \
                not in ('running', 'paused')


template ParameterTemplate(context_item, scope: 'trial'):

    HGroup:
        spacing = 0
        padding = 0
        CheckBox: label:
            checked << context_item.name in \
                workbench.get_plugin('psi.context').roving_items
            toggled ::
                context = workbench.get_plugin('psi.context')
                if checked:
                    context.rove_item(context_item.name)
                else:
                    context.unrove_item(context_item.name)
            text = context_item.label
        Field: field:
            text := context_item.expression
            style_class << 'disabled' if context_item.name in \
                workbench.get_plugin('psi.context').roving_items else 'enabled'


template ParameterTemplate(context_item, scope: 'arbitrary'):

    HGroup:
        spacing = 0
        padding = 0
        Label: label:
            text = context_item.label
        Field: field:
            text := context_item.expression

 
enamldef ContextItem(Container):
    attr context_item
    padding = 0

    DynamicTemplate:
        base = ContextItemTemplate
        args = (context_item, type(context_item))
