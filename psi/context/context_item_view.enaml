from enaml.core.api import DynamicTemplate, Looper
from enaml.layout.api import hbox, spacer
from enaml.widgets.api import (Container, Field, CheckBox, Label, HGroup,
                               PushButton, PopupView, Form)

from .context_item import (Result, Parameter, EnumParameter, FileParameter,
                           BoolParameter)

from enaml.widgets.api import ObjectCombo


enamldef WidgetDynamicTemplate(DynamicTemplate):
    base = WidgetTemplate
    args = (context_item, type(context_item))


template WidgetTemplate(context_item, MemberType):
    Field: widget:
        text := context_item.expression


template WidgetTemplate(context_item, MemberType: EnumParameter):
    ObjectCombo: widget:
        items << sorted(context_item.choices.keys())
        selected := context_item.selected


template WidgetTemplate(context_item, MemberType: BoolParameter):
    CheckBox: widget:
        checked << eval(context_item.expression)
        toggled ::
            if checked:
                context_item.expression = 'True'
            else:
                context_item.expression = 'False'


template ContextItemTemplate(context_item, MemberType, scope):
    HGroup: group:
        spacing = 0
        padding = 0
        Label: label:
            text << context_item.label
        WidgetDynamicTemplate:
            pass


template ContextItemTemplate(context_item, MemberType, scope: 'experiment'):
    HGroup: group:
        spacing = 0
        padding = 0
        enabled << workbench.get_plugin('psi.controller') \
            .experiment_state not in ('running', 'paused')

        Label: label:
            text << context_item.label
        WidgetDynamicTemplate:
            pass


template ContextItemTemplate(context_item, MemberType, scope: 'trial'):
    HGroup: group:
        spacing = 0
        padding = 0
        CheckBox: label:
            tool_tip << context_item.name
            status_tip << context_item.name
            text << context_item.label
            checked := context_item.rove
        WidgetDynamicTemplate:
            pass


enamldef ContextItem(Container):
    attr context_item
    padding = 0

    DynamicTemplate:
        base = ContextItemTemplate
        args = (context_item, type(context_item), context_item.scope)
