import operator

from enaml.core.api import Looper
from enaml.layout.api import (vbox, hbox)
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import (Field, Container, VGroup, HGroup, Label,
                               DockItem, CheckBox, ObjectCombo)


from .context_item_view import ContextItem

################################################################################
# Current values view
################################################################################
def get_style_classes(plugin, context_name):
    styles = []
    if getattr(plugin.context_items[context_name], 'rove', False):
        styles.append('roving')
    return ' '.join(styles)


def filter_current_values(plugin, current_values, mode):
    items = sorted(current_values.items())
    if mode == 'all':
        return items
    elif mode == 'changed':
        return [(k, v) for k, v in items if plugin.value_changed(k)]
    elif mode == 'roving':
        return [(k, v) for k, v in items if \
                getattr(plugin.context_items[k], 'rove', False)] 


def get_current_values(plugin, values):
    current_values = []
    for member in values.members().keys():
        l = plugin.context_items[member].label
        v = getattr(values, member, 'UNDEFINED')
        current_values.append((l, v))
    return sorted(current_values)


enamldef CurrentValuesDockItem(DockItem):
    attr context
    attr context_plugin = workbench.get_plugin('psi.context')

    StyleSheet:
        Style:
            style_class = 'changed'
            Setter:
                field = 'font-weight'
                value = 'bold'
        Style:
            style_class = 'roving'
            Setter:
                field = 'background-color'
                value = 'red'

    Container:
        VGroup:
            padding = 0
            spacing = 0
            attr values << context_plugin._namespace.values
            Looper:
                iterable << get_current_values(context_plugin, values)
                HGroup:
                    padding = 0
                    spacing = 0
                    Label:
                        text << str(loop_item[0])
                        style_class << get_style_classes(context, loop_item[0])
                    Label:
                        text << str(loop_item[1])
                        style_class << get_style_classes(context, loop_item[0])


def get_prior_values(prior_values):
    if len(prior_values) == 0:
        return []
    else:
        return sorted(prior_values[-1].items())


enamldef PriorValuesDockItem(DockItem):
    attr context

    StyleSheet:
        Style:
            style_class = 'changed'
            Setter:
                field = 'font-weight'
                value = 'bold'
        Style:
            style_class = 'roving'
            Setter:
                field = 'background-color'
                value = 'white'

    Container:
        VGroup:
            padding = 0
            spacing = 0

            Looper:
                iterable << get_prior_values(context._prior_values)
                HGroup:
                    padding = 0
                    spacing = 0
                    Label:
                        style_class << get_style_classes(context, loop_item[0])
                        text << context.context_items[loop_item[0]].label
                    Label:
                        style_class << get_style_classes(context, loop_item[0])
                        text << str(loop_item[1])
