import pickle
import os.path
from copy import deepcopy

from enaml.core.api import Looper
from enaml.layout.api import VSplitLayout, TabLayout
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import (Container, DockArea, DockItem, VGroup, HGroup,
                               Label, FileDialogEx, Action)
from enaml.workbench.api import Extension, ExtensionPoint, PluginManifest
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import FloatItem
from enaml.application import deferred_call

from psi.controller.api import ExperimentAction
from psi.experiment.api import Preferences

from .plugin import ContextPlugin
from .symbol import ImportedSymbol
from .context_item import Parameter

from .context_view import ContextDockItem, CurrentValuesDockItem
from .selector_view import SequenceDockItem

from ..util import rpc
from .. import get_config


PLUGIN_ID = 'psi.context'


def changes_pending(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    return plugin.changes_pending



def apply_changes(event):
    context = event.workbench.get_plugin(PLUGIN_ID)
    context.apply_changes()


def revert_changes(event):
    # Force a refresh of the workspace to load the new context
    context = event.workbench.get_plugin(PLUGIN_ID)
    context.revert_changes()


def get_preferences(obj):
    state = {}
    for k, v in obj.members().items():
        if v.metadata and v.metadata.get('preference', False):
            state[k] = getattr(obj, k)
    return state
    
    
enamldef ContextManifest(PluginManifest): manifest:
    '''Manifest for the plugin handling the sequence selector
    '''
    id = PLUGIN_ID
    factory = ContextPlugin

    ExtensionPoint:
        id = 'selectors'

    ExtensionPoint:
        id = 'items'

    ExtensionPoint:
        id = 'symbols'

    Extension:
        id = 'default_symbols'
        point = 'psi.context.symbols'
        ImportedSymbol:
            name = 'np'
            module = 'numpy'
        ImportedSymbol:
            name = 'sp'
            module = 'scipy'

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.get_value'
            handler = rpc(PLUGIN_ID, 'get_value')
        Command:
            id = PLUGIN_ID + '.set_value'
            handler = rpc(PLUGIN_ID, 'set_value')
        Command:
            id = PLUGIN_ID + '.get_values'
            handler = rpc(PLUGIN_ID, 'get_values')
        Command:
            id = PLUGIN_ID + '.apply_changes'
            handler = apply_changes
        Command:
            id = PLUGIN_ID + '.revert_changes'
            handler = revert_changes
        Command:
            id = PLUGIN_ID + '.value_changed'
            handler = rpc(PLUGIN_ID, 'value_changed')
        Command:
            id = PLUGIN_ID + '.next_setting'
            handler = rpc(PLUGIN_ID, 'next_setting')
        Command:
            id = PLUGIN_ID + '.get_parameters'
            handler = rpc(PLUGIN_ID, 'get_parameters')
        Command:
            id = PLUGIN_ID + '.changes_pending'
            handler = changes_pending

    Extension:
        id = 'context_actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            # Set this to a relatively low weight (default=100) so that we can
            # ensure this is called before most initialization actions since
            # many plugins will likely depend on this.
            event = 'experiment_prepare'
            command = 'psi.context.apply_changes'
            weight = 10

    #Extension:
    #    id = 'workspace'
    #    point = 'psi.experiment.workspace'
    #    factory = contribute_to_workspace

    Extension:
        id = 'preferences'
        point = 'psi.experiment.preferences'
        rank = 100
        Preferences:
            name = 'context'
            get_preferences => (workbench):
                plugin = workbench.get_plugin(manifest.id)

                # Build the context item state
                parameter_state = {}
                for i in plugin.context_items.values():
                    if isinstance(i, Parameter):
                        group_state = parameter_state.setdefault(i.group, {})
                        group_state[i.name] = get_preferences(i)

                # Build the selector state
                selector_state = {}
                for s in plugin.selectors.values():
                    selector_state[s.name] = get_preferences(s)

                return dict(parameters=parameter_state, selectors=selector_state)

            set_preferences => (workbench, preferences):
                plugin = workbench.get_plugin(manifest.id)
                parameter_state = preferences['parameters']
                selector_state = preferences['selectors']

                for item in plugin.context_items.values():
                    group_state = parameter_state.get(item.group, {})
                    state = group_state.get(item.name, {})
                    item.__setstate__(state)

                for selector in plugin.selectors.values():
                    state = selector_state.get(selector.name, {})
                    selector.__setstate__(state)


enamldef ContextViewManifest(PluginManifest): manifest:
    
    id = 'psi.context.view'

    attr context_plugin << workbench.get_plugin('psi.context')

    Extension:
        id = 'context_view'
        point = 'psi.experiment.workspace'

        Looper:
            iterable << [g for g in context_plugin.context_groups.values() if g.visible]
            ContextDockItem:
                group_name = loop_item.name
                name = loop_item.name
                title = loop_item.label

        Looper:
            iterable << context_plugin.selectors.values()
            SequenceDockItem:
                name = loop_item.name
                title = loop_item.name
                selector = loop_item
