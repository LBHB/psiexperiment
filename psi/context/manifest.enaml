import logging
log = logging.getLogger(__name__)

import numpy as np
import pickle
import os.path
from copy import deepcopy

from enaml.core.api import Looper
from enaml.layout.api import VSplitLayout, TabLayout
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import (Container, DockArea, DockItem, VGroup, HGroup,
                               Label, FileDialogEx, Action)
from enaml.workbench.api import Extension, ExtensionPoint, PluginManifest
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import FloatItem
from enaml.application import deferred_call

from psi.controller.api import ExperimentAction, ExperimentEvent
from psi.experiment.api import Preferences

from .plugin import ContextPlugin
from .symbol import ImportedSymbol, Function
from .context_item import Parameter

from .context_view import ContextDockItem, CurrentValuesDockItem

from ..util import rpc, get_tagged_values
from .. import get_config


PLUGIN_ID = 'psi.context'


def changes_pending(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    return plugin.changes_pending


def apply_changes(event):
    context = event.workbench.get_plugin(PLUGIN_ID)
    context.apply_changes()


def revert_changes(event):
    context = event.workbench.get_plugin(PLUGIN_ID)
    context.revert_changes()


def get_preferences(obj):
    return get_tagged_values(obj, 'preference')


enamldef ContextManifest(PluginManifest): manifest:
    '''Manifest for the plugin handling the sequence selector
    '''
    id = PLUGIN_ID
    factory = ContextPlugin

    ExtensionPoint:
        id = 'selectors'

    ExtensionPoint:
        id = 'items'

    ExtensionPoint:
        id = 'symbols'

    Extension:
        id = 'default_symbols'
        point = 'psi.context.symbols'
        ImportedSymbol:
            name = 'np'
            module = 'numpy'
        ImportedSymbol:
            name = 'sp'
            module = 'scipy'
        Function:
            name = 'db'
            function = lambda x: 20*np.log10(x)

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.get_value'
            handler = rpc(PLUGIN_ID, 'get_value')
        Command:
            id = PLUGIN_ID + '.set_value'
            handler = rpc(PLUGIN_ID, 'set_value')
        Command:
            id = PLUGIN_ID + '.get_values'
            handler = rpc(PLUGIN_ID, 'get_values')
        Command:
            id = PLUGIN_ID + '.apply_changes'
            handler = apply_changes
        Command:
            id = PLUGIN_ID + '.revert_changes'
            handler = revert_changes
        Command:
            id = PLUGIN_ID + '.value_changed'
            handler = rpc(PLUGIN_ID, 'value_changed')
        Command:
            id = PLUGIN_ID + '.next_setting'
            handler = rpc(PLUGIN_ID, 'next_setting')
        Command:
            id = PLUGIN_ID + '.get_parameters'
            handler = rpc(PLUGIN_ID, 'get_parameters')
        Command:
            id = PLUGIN_ID + '.changes_pending'
            handler = changes_pending
        Command:
            id = PLUGIN_ID + '.unique_values'
            handler = rpc(PLUGIN_ID, 'unique_values')

    Extension:
        id = 'context_actions'
        point = 'psi.controller.actions'

        ExperimentEvent:
            name = 'context_changed'

        # Set the following actions to a relatively low weight (default=100) so
        # that we can ensure this is called before most initialization actions
        # since many plugins will likely depend on this.
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.context.apply_changes'
            weight = 5

    Extension:
        id = 'preferences'
        point = 'psi.experiment.preferences'
        rank = 100
        Preferences:
            name = 'context'
            get_preferences => (workbench):
                plugin = workbench.get_plugin(manifest.id)

                # Build the context item state
                parameter_state = {}
                for i in plugin.context_items.values():
                    group_state = parameter_state.setdefault(i.group, {})
                    group_state[i.name] = get_preferences(i)

                # Build the selector state
                selector_state = {}
                for s in plugin.selectors.values():
                    selector_state[s.name] = get_preferences(s)

                # Build the meta state
                meta_state = {}
                for m in plugin.context_meta.values():
                    meta_state[m.name] = [v.name for v in m.values]

                return dict(parameters=parameter_state,
                            selectors=selector_state,
                            meta=meta_state)

            set_preferences => (workbench, preferences):
                plugin = workbench.get_plugin(manifest.id)
                parameter_state = preferences['parameters']
                selector_state = preferences['selectors']
                meta_state = preferences['meta']

                log.debug('Setting context item states')
                for item in plugin.context_items.values():
                    try:
                        group_state = parameter_state.get(item.group, {})
                        state = group_state.get(item.name, {})
                        item.__setstate__(state)
                    except Exception as e:
                        log.exception(e)

                log.debug('Setting selector states')
                for selector in plugin.selectors.values():
                    try:
                        state = selector_state.get(selector.name, {})
                        selector.__setstate__(state)
                    except Exception as e:
                        log.exception(e)

                log.debug('Setting meta states')
                for meta in plugin.context_meta.values():
                    state = meta_state.get(meta.name, {})
                    items = [plugin.context_items[n] for n in state]
                    try:
                        # This is a hack. By forcing a getattr of meta.values,
                        # we force a creation event. Then, when we assign items
                        # we can force a change notification.
                        meta.values
                        meta.values = items
                    except Exception as e:
                        log.exception(e)


enamldef ContextViewManifest(PluginManifest): manifest:

    id = 'psi.context.view'

    attr context_plugin << workbench.get_plugin('psi.context')

    Extension:
        id = 'context_view'
        point = 'psi.experiment.workspace'

        Looper:
            iterable << context_plugin.context_groups.values()
            ContextDockItem:
                group_name << loop_item.name
                name << loop_item.name
                title << loop_item.label
