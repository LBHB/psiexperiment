import cPickle as pickle
import os.path

from enaml.core.api import Looper
from enaml.layout.api import VSplitLayout, TabLayout
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import (Container, DockArea, DockItem, VGroup, HGroup,
                               Label, FileDialogEx, Action)
from enaml.workbench.api import Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import InsertItem, InsertTab
from enaml.application import deferred_call

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction
from psi.experiment.api import Preferences

from .plugin import ContextPlugin
from .symbol import ImportedSymbol

from .context_view import (ContextDockItem, CurrentValuesDockItem,
                           PriorValuesDockItem)
from .selector_view import SequenceDockItem

from ..util import rpc
from .. import get_config


PLUGIN_ID = 'psi.context'


def changes_pending(event):
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    return plugin.changes_pending


def contribute_to_workspace(workbench, workspace):
    plugin = workbench.get_plugin(PLUGIN_ID)

    target = None
    for group_name, group in plugin.context_groups.items():
        if group.visible:
            item = ContextDockItem(workspace.dock_area, 
                                   plugin=plugin,
                                   group_name=group_name, 
                                   name=group_name,
                                   title=group.label, 
                                   closable=False)
            if target is None:
                op = InsertItem(item=item.name, position='left')
            else:
                op = InsertTab(item=item.name, target=target)
            deferred_call(workspace.dock_area.update_layout, op)
            target = group_name

    target = None
    for name, selector in plugin.selectors.items():
        item = SequenceDockItem(workspace.dock_area,
                                selector=selector,
                                name=name,
                                title=name,
                                closable=False)
        if target is None:
            op = InsertItem(item=item.name, position='left')
        else:
            op = InsertTab(item=item.name, target=target)
        deferred_call(workspace.dock_area.update_layout, op)
        target = name

    # TODO: this is currently broken
    #item = CurrentValuesDockItem(workspace.dock_area, 
    #                             context=plugin,
    #                             name='cv', 
    #                             title='Current values',
    #                             closable=False)
    #op = InsertItem(item=item.name, position='left')
    #deferred_call(workspace.dock_area.update_layout, op)

    #item = PriorValuesDockItem(workspace.dock_area, 
    #                           context=plugin,
    #                           name='pv', 
    #                           title='Prior values',
    #                           closable=False)
    #op = InsertItem(item=item.name, position='left')
    #deferred_call(workspace.dock_area.update_layout, op)



def apply_changes(event):
    context = event.workbench.get_plugin(PLUGIN_ID)
    context.apply_changes()


def revert_changes(event):
    # Force a refresh of the workspace to load the new context
    context = event.workbench.get_plugin(PLUGIN_ID)
    context.revert_changes()


enamldef ContextManifest(PSIManifest): manifest:
    '''Manifest for the plugin handling the sequence selector
    '''
    id = PLUGIN_ID
    factory = ContextPlugin

    ExtensionPoint:
        id = 'selectors'

    ExtensionPoint:
        id = 'items'

    ExtensionPoint:
        id = 'results'

    ExtensionPoint:
        id = 'symbols'

    Extension:
        id = 'default_symbols'
        point = 'psi.context.symbols'
        ImportedSymbol:
            name = 'np'
            module = 'numpy'
        ImportedSymbol:
            name = 'sp'
            module = 'scipy'

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = PLUGIN_ID + '.get_value'
            handler = rpc(PLUGIN_ID, 'get_value')
        Command:
            id = PLUGIN_ID + '.set_value'
            handler = rpc(PLUGIN_ID, 'set_value')
        Command:
            id = PLUGIN_ID + '.get_values'
            handler = rpc(PLUGIN_ID, 'get_values')
        Command:
            id = PLUGIN_ID + '.apply_changes'
            handler = apply_changes
        Command:
            id = PLUGIN_ID + '.revert_changes'
            handler = revert_changes
        Command:
            id = PLUGIN_ID + '.value_changed'
            handler = rpc(PLUGIN_ID, 'value_changed')
        Command:
            id = PLUGIN_ID + '.next_setting'
            handler = rpc(PLUGIN_ID, 'next_setting')
        Command:
            id = PLUGIN_ID + '.get_parameters'
            handler = rpc(PLUGIN_ID, 'get_parameters')
        Command:
            id = PLUGIN_ID + '.changes_pending'
            handler = changes_pending

    Extension:
        id = 'context_actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            # Set this to a relatively low weight (default=100) so that we can
            # ensure this is called before most initialization actions since
            # many plugins will likely depend on this.
            event = 'experiment_prepare'
            command = 'psi.context.apply_changes'
            weight = 10

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        factory = contribute_to_workspace

    Extension:
        id = 'preferences'
        point = 'psi.experiment.preferences'
        rank = 100
        Preferences:
            name = 'context'
            get_preferences => (workbench):
                plugin = workbench.get_plugin(manifest.id)
                return {
                    'context_items': plugin._get_all_expressions(),
                    'selectors': plugin.selectors,
                    'roving_items': plugin.roving_items
                }

            set_preferences => (workbench, preferences):
                plugin = workbench.get_plugin(manifest.id)
                plugin._update_attrs(**preferences)
