import logging
log = logging.getLogger(__name__)

from functools import partial
import atexit
import tempfile
import shutil
from pathlib import Path

from atom.api import Typed
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from ..sink import Sink
from psi.core.enaml.api import PSIManifest


class BaseStore(Sink):
    '''
    Implements functions for creating filenames
    '''
    base_path = Typed(Path)

    def _default_base_path(self):
        # Create a temporary folder. Be sure to delete when the program exits.
        base_path = tempfile.mkdtemp()
        atexit.register(shutil.rmtree, base_path)
        return Path(base_path)

    def get_filename(self, name, suffix=''):
        path = (self.base_path / name).with_suffix(suffix)
        log.info('Saving %s to %s', name, path)
        return path

    def set_base_path(self, base_path):
        self.base_path = Path(base_path)


def save_mapping(sink, event):
    return sink.save_mapping(event.parameters['name'],
                             event.parameters['mapping'],
                             event.parameters.get('overwrite', False))


def save_dataframe(sink, event):
    return sink.save_dataframe(event.parameters['name'],
                               event.parameters['dataframe'],
                               event.parameters.get('overwrite', False))


enamldef BaseStoreManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.base_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.save_dataframe'
            handler = partial(save_dataframe, manifest.contribution)
        Command:
            id = manifest.id + '.save_mapping'
            handler = partial(save_mapping, manifest.contribution)
