import logging
log = logging.getLogger(__name__)

from atom.api import Typed, Event, Unicode, Int
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.widgets.api import Container, DockItem, Form, Label

from ..sink import Sink

from psi.core.enaml.api import PSIManifest
from psi.context.context_item import OrderedContextMeta


class EpochCounter(Sink):

    min_n = Int()
    max_n = Int()
    total_n = Int()
    cumulative_n = Typed(dict, {})
    epoch_name = d_(Unicode())
    grouping = d_(Typed(list))

    def process_ai_epochs(self, name, data):
        if name != self.epoch_name:
            return
        for d in data:
            self._process_epoch(d['key'], d['epoch'])
        n = self.cumulative_n.values()
        self.max_n = max(n)
        self.min_n = min(n)
        self.total_n = sum(n)

    def _process_epoch(self, key, epoch):
        self.cumulative_n[key] = n+1


enamldef EpochCounterManifest(PSIManifest): manifest:

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        DockItem: di:
            name << manifest.contribution.name
            title << manifest.contribution.label
            Form:
                Label:
                    text = 'Max epochs acquired'
                Label:
                    text << str(manifest.contribution.max_n)
                Label:
                    text = 'Min epochs acquired'
                Label:
                    text << str(manifest.contribution.min_n)
                Label:
                    text = 'Total epochs acquired'
                Label:
                    text << str(manifest.contribution.total_n)

    Extension:
        id = 'items'
        point = 'psi.context.items'
        OrderedContextMeta:
            name << manifest.contribution.name
            label << '{} grouping'.format(manifest.contribution.label)
            #grouping >> manifest.contribution.grouping
