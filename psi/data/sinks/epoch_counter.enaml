import logging
log = logging.getLogger(__name__)

import operator
from collections import defaultdict

import numpy as np

from atom.api import Typed, Event, Str, Int, List, Dict
from enaml.application import deferred_call
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.widgets.api import Container, DockItem, Form, Label, ProgressBar

from ..sink import SinkWithSource, SinkWithSourceManifest

from psi.core.enaml.api import PSIManifest
from psi.context.context_item import ContextMeta
from psi.controller.api import ExperimentAction
from psi.experiment.api import StatusItem


class EpochCounter(SinkWithSource):

    current_n = Int()
    requested_n = Int(100)

    def _update_data(self, epochs):
        n = len(epochs)
        deferred_call(lambda: setattr(self, 'current_n', self.current_n + n))


class GroupedEpochCounter(EpochCounter):

    groups = d_(Typed(ContextMeta))
    extra_groups = d_(List())

    #: Number of epochs requested per group. Does not allow for per-group
    #: averages.
    requested_group_n = d_(Int(100))

    counts = Typed(defaultdict, (int,))
    get_key = Typed(object)

    def _default_get_key(self):
        groups = self.groups.values + self.extra_groups
        if len(groups):
            group_names = [v.name for v in groups]
            return operator.itemgetter(*group_names)

    def _update_data(self, epochs):
        for e in epochs:
            md = e['info']['metadata']
            key = self.get_key(md)
            self.counts[key] += 1
        current_n = sum(min(c, self.requested_group_n) for c in self.counts.values())
        def update():
            self.current_n = current_n

        deferred_call(update)


enamldef EpochCounterManifest(SinkWithSourceManifest): manifest:

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        DockItem: di:
            name << manifest.contribution.name
            title << manifest.contribution.label
            Form:
                Label:
                    text = 'Epochs acquired'
                Label:
                    text << str(manifest.contribution.current_n)


def group_label_format(groups, extra_groups):
    groups = groups + extra_groups
    if not groups:
        return 'No groups specified'
    t = 'Grouped by {}'
    groups = ', '.join(g.compact_label for g in groups)
    return t.format(groups.lower())


enamldef GroupedEpochCounterManifest(SinkWithSourceManifest): manifest:

    Extension:
        id = 'workspace'
        point = 'psi.experiment.status'
        rank = 10

        StatusItem:
            label = 'Percent done'
            ProgressBar:
                maximum << manifest.contribution.requested_n
                value << manifest.contribution.current_n
                text_visible = True
