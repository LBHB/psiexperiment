import logging
log = logging.getLogger(__name__)

import operator
from collections import defaultdict

from atom.api import Typed, Event, Unicode, Int, List, Dict
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.widgets.api import Container, DockItem, Form, Label, VGroup

from ..sink import Sink

from psi.core.enaml.api import PSIManifest
from psi.context.context_item import ContextMeta
from psi.controller.api import ExperimentAction


class EpochCounter(Sink):

    total_n = Int()
    source_name = d_(Unicode())
    source = Typed(object)

    def _observe_source(self, event):
        if self.source is not None:
            self.source.add_callback(self.added)

    def added(self, epochs):
        self.total_n += len(epochs)


class GroupedEpochCounter(EpochCounter):

    min_n = Int()
    max_n = Int()
    groups_n = Int()
    groups = d_(Typed(ContextMeta))

    counts = Typed(defaultdict, (int,))
    get_key = Typed(object)

    def _observe_groups(self, event):
        self.groups.observe('values', self._update_get_key)
        self._update_get_key()

    def _update_get_key(self, event=None):
        if len(self.groups.values):
            group_names = [v.name for v in self.groups.values]
            self.get_key = operator.itemgetter(*group_names)

    def added(self, epochs):
        for e in epochs:
            md = e['info']['metadata']
            key = self.get_key(md)
            self.counts[key] += 1
        counts = self.counts.values()
        self.min_n = min(counts)
        self.max_n = max(counts)
        self.total_n = sum(counts)
        self.groups_n = len(counts)


enamldef EpochCounterManifest(PSIManifest): manifest:

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'contribution': manifest.contribution}
            weight = 15

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        DockItem: di:
            name << manifest.contribution.name
            title << manifest.contribution.label
            Form:
                Label:
                    text = 'Epochs acquired'
                Label:
                    text << str(manifest.contribution.total_n)


def group_label_format(groups):
    if not groups:
        return 'No groups specified'
    t = 'Grouped by {}'
    groups = ', '.join(g.compact_label for g in groups)
    return t.format(groups.lower())


enamldef GroupedEpochCounterManifest(PSIManifest): manifest:

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'contribution': manifest.contribution}
            weight = 15

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        DockItem: di:
            name << manifest.contribution.name
            title << manifest.contribution.label
            VGroup:
                Label:
                    # We need to pull this from meta.values, not
                    # manifest.contribution.grouping. For some reason, if we
                    # don't pull from meta.values, then the change notification
                    # doesn't get triggered when the GUI loads. Probably a
                    # latent bug somewhere.
                    text << group_label_format(manifest.contribution.groups.values)
                Form:
                    padding = 0
                    Label:
                        text = 'Max epochs acquired'
                    Label:
                        text << str(manifest.contribution.max_n)
                    Label:
                        text = 'Min epochs acquired'
                    Label:
                        text << str(manifest.contribution.min_n)
                    Label:
                        text = 'N groups'
                    Label:
                        text << str(manifest.contribution.groups_n)
                    Label:
                        text = 'Total epochs acquired'
                    Label:
                        text << str(manifest.contribution.total_n)

    #Extension:
    #    id = 'items'
    #    point = 'psi.context.items'
    #    UnorderedContextMeta: meta:
    #        name << manifest.contribution.name
    #        label << '{} grouping'.format(manifest.contribution.label)
    #        values ::
    #            manifest.contribution.grouping = list(values)
