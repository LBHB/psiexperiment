from collections import Mapping
from functools import partial

from atom.api import Bool, ContainerList

from enaml.core.api import Conditional, d_
from enaml.widgets.api import Container, DockItem
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.api import ExperimentAction
from psi.core.enaml.api import ListDictTable
from psi.experiment.api import ItemPreferences
from .text_store import TextStore, TextStoreManifest


class EventLog(TextStore):

    show_widget = d_(Bool(False))
    data = ContainerList()

    def process_table(self, name, data, flush=False):
        super().process_table(name, data, flush)
        if self.show_widget:
            if isinstance(data, Mapping):
                self.data.append(data)
            else:
                self.data.extend(data)


def prepare(sink, event):
    sink.create_table('event_log')


def save(sink, event):
    sink.process_table('event_log', event.parameters)


enamldef EventLogManifest(TextStoreManifest): manifest:

    Extension:
        id = manifest.id + '.event_log_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = contribution.name + '.prepare'
            handler = partial(prepare, manifest.contribution)

        Command:
            id = contribution.name + '.save'
            handler = partial(save, manifest.contribution)

    Extension:
        id = manifest.id + '.event_log_actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = contribution.name + '.prepare'

        ExperimentAction:
            event = 'experiment_event'
            command = contribution.name + '.save'

    Conditional:
        condition << manifest.contribution.show_widget

        Extension:
            id = manifest.id + '.event_log_workspace'
            point = 'psi.experiment.workspace'

            DockItem:
                closable = False
                name << manifest.contribution.name
                title << manifest.contribution.label

                Container:
                    ListDictTable: event_log_table:
                        data << manifest.contribution.data[:]
                        columns = ['timestamp', 'event']
                        column_info = {
                            'timestamp': {'label': 'Time (sec)'},
                            'event': {'label': 'Event'},
                        }

        Extension:
            id = manifest.id + '.preferences'
            point = 'psi.experiment.preferences'
            ItemPreferences:
                item << event_log_table
                name << manifest.contribution.name
                auto_save = ['column_widths']
