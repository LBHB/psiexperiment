import logging
log = logging.getLogger(__name__)

import atexit
from functools import partial
import json

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.core.enaml.api import PSIManifest
from .base_store import BaseStore


class TextStore(BaseStore):
    '''
    Simple class for storing data in human-readable formats (CSV and text)
    '''
    def save_dataframe(self, name, dataframe, overwrite=False):
        path = self.get_filename(name, '.csv')
        if not overwrite and path.exists():
            raise IOError('{} already exists'.format(path))
        dataframe.to_csv(path)
        return path

    def save_mapping(self, name, mapping, overwrite=False):
        path = self.get_filename(name, '.json')
        if not overwrite and path.exists():
            raise IOError('{} already exists'.format(path))
        with open(path, 'w') as fh:
            json.dump(mapping, fh, sort_keys=True, indent=4)
        return path


def save_mapping(sink, event):
    return sink.save_mapping(event.parameters['name'],
                             event.parameters['mapping'],
                             event.parameters.get('overwrite', False))


def save_dataframe(sink, event):
    return sink.save_dataframe(event.parameters['name'],
                               event.parameters['dataframe'],
                               event.parameters.get('overwrite', False))


enamldef TextStoreManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.text_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = contribution.name + '.save_dataframe'
            handler = partial(save_dataframe, manifest.contribution)
        Command:
            id = contribution.name + '.save_mapping'
            handler = partial(save_mapping, manifest.contribution)
