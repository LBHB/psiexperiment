import logging
log = logging.getLogger(__name__)

import atexit
from functools import partial
import json
from pathlib import Path

from atom.api import List
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import pandas as pd

from psi.controller.api import ExperimentAction
from psi.core.enaml.api import PSIManifest
from psi.util import declarative_to_dict

from .base_store import BaseStore


class TextStore(BaseStore):
    '''
    Simple class for storing data in human-readable formats (CSV and text)
    '''
    info = {}
    filenames = {}

    # List of epoch inputs to capture *metadata* for.
    epoch_inputs = d_(List())

    def save_dataframe(self, name, dataframe, overwrite=False):
        path = self.get_filename(name, '.csv')
        if not overwrite and path.exists():
            raise IOError('{} already exists'.format(path))
        dataframe.to_csv(path)
        return path

    def save_mapping(self, name, mapping, overwrite=False):
        path = self.get_filename(name, '.json')
        if not overwrite and path.exists():
            raise IOError('{} already exists'.format(path))
        with open(path, 'w') as fh:
            json.dump(mapping, fh, sort_keys=True, indent=4)
        return path

    def create_ai_epochs(self, name, **metadata):
        # Write the metadata to a file
        filename = Path(self.get_filename(f'{name}_metadata', '.json'))
        filename.write_text(json.dumps(metadata))
        log.debug('Saved epoch metadata %s attrs to %s', name, filename)

        # Set up the output file for the epoch info
        self.info[name] = []
        self.filenames[name] = self.get_filename(f'{name}_metadata', '.csv')
        atexit.register(self.save_ai_epochs, name)

    def process_ai_epochs(self, name, data):
        metadata = []
        for d in data:
            md = d['info']['metadata'].copy()
            md['t0'] = d['info']['t0']
            md['duration'] = d['info']['duration']
            if 'calibration' in md:
                del md['calibration']
            metadata.append(md)
        self.info[name].extend(metadata)

    def save_ai_epochs(self, name):
        info = self.info[name]
        filename = self.filenames[name]
        pd.DataFrame(info).to_csv(filename)
        log.debug('Saved epoch metadata %s to %s', name, filename)


def save_mapping(sink, event):
    return sink.save_mapping(event.parameters['name'],
                             event.parameters['mapping'],
                             event.parameters.get('overwrite', False))


def save_dataframe(sink, event):
    return sink.save_dataframe(event.parameters['name'],
                               event.parameters['dataframe'],
                               event.parameters.get('overwrite', False))


def prepare(sink, event):
    log.debug('Preparing %s', sink.name)
    controller = event.workbench.get_plugin('psi.controller')

    for input_name in sink.epoch_inputs:
        log.debug('\tCreating save file for epoch input metadata %s', input_name)
        i = controller.get_input(input_name)
        md = declarative_to_dict(i, 'metadata')
        sink.create_ai_epochs(**md)
        cb = partial(sink.process_ai_epochs, i.name)
        i.add_callback(cb)


def flush(sink, event):
    for name in sink.epoch_inputs:
        sink.save_ai_epochs(name)
    return 'Saved data to disk'


enamldef TextStoreManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.text_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = contribution.name + '.save_dataframe'
            handler = partial(save_dataframe, manifest.contribution)
        Command:
            id = contribution.name + '.save_mapping'
            handler = partial(save_mapping, manifest.contribution)
        Command:
            id = manifest.id + '.prepare'
            handler = partial(prepare, manifest.contribution)
        Command:
            id = manifest.id + '.flush'
            handler = partial(flush, manifest.contribution)

    Extension:
        id = manifest.id + '.text_actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.id + '.prepare'
        ExperimentAction:
            weight = 1000
            event = 'experiment_end'
            command = manifest.id + '.flush'
