from atom.api import ContainerList, Typed, Dict
from enaml.application import deferred_call
from enaml.core.api import Looper
from enaml.layout.api import InsertItem
from enaml.widgets.api import (Container, Menu, Action, DockItem, PopupView,
                               Form, CheckBox, Label, HGroup)
from enaml.workbench.api import Extension

import pandas as pd

from psi.core.enaml.api import DataframeTable, PSIManifest
from psi.experiment.api import ItemPreferences

from ..sink import Sink


class TrialLog(Sink):
    
    name = 'trial_log'
    title = 'Trial log'
    manifest = __name__ + '.TrialLogManifest'


enamldef TableConfig(PopupView): popup:

    attr column_info
    attr widget

    parent_anchor = (0.0, 0.0)
    arrow_size = 20
    arrow_edge = 'right'
    offset = (0, 0)

    Form:
        Looper:
            iterable << sorted(column_info.items())
            CheckBox:
                checked << loop_item[0] in widget.columns
                toggled ::
                    if checked:
                        widget.columns.append(loop_item[0])
                    else:
                        widget.columns.remove(loop_item[0])
            Label:
                text << '{} | {}'.format(loop_item[1].label,
                                        loop_item[1].compact_label)


enamldef TrialLogDockItem(DockItem):

    attr data_plugin = workbench.get_plugin('psi.data')

    closable = False

    title_bar_right_clicked ::
        TableConfig(self, 
                    column_info=data_plugin.context_info,
                    widget=self.find('trial_log_table')).show()

    Container: main_container:
        DataframeTable: trial_log_table:
            name = 'trial_log_table'
            dataframe << data_plugin.trial_log
            column_info << {k: i.compact_label for \
                            k, i in data_plugin.context_info.items()}

            cell_color => (row, column):
                # TODO: A bit of a hack here ...
                if 'trial_type' in dataframe:
                    tt = dataframe.at[row, 'trial_type']
                    if tt == 'go_remind':
                        return 'forestgreen'
                    elif tt == 'go':
                        return 'lightgreen'
                    elif tt == 'go_forced':
                        return 'green'
                    elif tt == 'nogo':
                        return 'lightpink'
                    elif tt == 'nogo_repeat':
                        return 'pink'
                return 'white'


enamldef TrialLogManifest(PSIManifest): manifest:

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        TrialLogDockItem: di:
            name << manifest.contribution.name
            title << manifest.contribution.title

    Extension:
        id = 'preferences'
        point = 'psi.experiment.preferences'
        ItemPreferences:
            item << di.find('trial_log_table')
            name << manifest.contribution.name
            auto_save = ['state']
