import logging
log = logging.getLogger(__name__)

from functools import partial

import pandas as pd
from scipy.stats import norm

from atom.api import Bool, ContainerList, Float, Int, Value

from enaml.core.api import d_
from enaml.layout.api import hbox, vbox, spacer
from enaml.qt.QtWidgets import QApplication
from enaml.stdlib.fields import IntField
from enaml.widgets.api import CheckBox, Container, DockItem, Label, PushButton
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.api import ExperimentAction
from psi.context.api import OrderedContextMeta
from psi.core.enaml.api import DataFrameTable, PSIManifest
from psi.experiment.api import ItemPreferences

from .base_store import BaseStore
from ..plugin import Sink


class SDTAnalysis(BaseStore):

    name = 'sdt_analysis'
    label = 'SDT Analysis'

    grouping = d_(ContainerList())

    limit = Int()
    include_repeat_nogo = Bool(True)
    include_go_remind = Bool(True)

    _data = ContainerList()
    results = Value()
    fa = Float()
    fa_repeat = Float()

    def update(self, data):
        self._data.append(data)
        self.update_results()

    def _observe_limit(self, event):
        self.update_results()

    def _observe_include_repeat_nogo(self, event):
        self.update_results()

    def _observe_include_go_remind(self, event):
        self.update_results()

    def update_results(self):
        # Exit if there's nothing to be done
        if not self._data:
            return
        if not self.grouping:
            return

        # Pull out trials for analysis
        data = self._data[-self.limit:]
        valid_types = ['nogo', 'go']
        if self.include_repeat_nogo:
            valid_types.append('nogo_repeat')
        if self.include_go_remind:
            valid_types.append('go_remind')
        data = [d for d in data if d['trial_type'] in valid_types]

        # Add data to track FA rate
        fa_data = [d for d in data if d['trial_type'] in ['nogo']]
        fa_repeat_data = [d for d in data if d['trial_type'] in ['nogo', 'nogo_repeat']]

        if fa_data:
            self.fa = 1-pd.DataFrame(fa_data)['correct'].mean()
            self.fa_repeat = 1-pd.DataFrame(fa_repeat_data)['correct'].mean()
        else:
            self.fa = 0
            self.fa_repeat = 0

        # Exit if no data left
        if not data:
            return

        agg = ['sum', 'size', 'mean']
        rename = {'sum': 'n_correct',
                  'size': 'n_trials',
                  'mean': 'fraction_correct'}

        r = pd.DataFrame(data) \
            .groupby(self.grouping) \
            ['correct'] \
            .agg(agg) \
            .rename(columns=rename)

        r['z_score'] = r['fraction_correct'] \
            .clip(lower=0.05, upper=0.95) \
            .apply(norm.ppf)

        # Attempt to correct for the FA rate. If there is no NOGO, then assume
        # the FA rate is 0.05 (which corresponds to a "correct" rate of 0.95.
        try:
            r['z_score'] += r.loc['nogo', 'z_score'].iloc[0]
        except:
            r['z_score'] += norm.ppf(0.95)
        self.results = r.astype('float32').reset_index()


extra_columns = ['n_correct', 'n_trials', 'fraction_correct', 'z_score']

extra_column_info = {
    'n_trials': {'label': '# trials', 'to_string': lambda x: str(int(x))},
    'n_correct': {'label': '# correct', 'to_string': lambda x: str(int(x))},
    'fraction_correct': {'label': 'Frac.', 'to_string': '{:.2f}'.format},
    'z_score': {'label': 'd\'', 'to_string': '{:.2f}'.format},
}


def save(sdt, event):
    core = event.workbench.get_plugin('enaml.workbench.core')
    sdt.limit = 0
    sdt.include_repeat_nogo = False
    sdt.include_go_remind = False
    if sdt.results is not None:
        filename = sdt.get_filename(sdt.name, '.csv')
        sdt.results.to_csv(filename, index=False)


def update(sdt, event):
    sdt.update(event.parameters['data'])


enamldef SDTAnalysisManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.items'
        point = 'psi.context.items'
        OrderedContextMeta: meta:
            name << manifest.contribution.name
            label << '{} grouping'.format(manifest.contribution.label)
            values::
                manifest.contribution.grouping = [v.name for v in values]

                # Update SDT table
                columns = [v.name for v in meta.values] + extra_columns
                column_info = {}
                for v in values:
                    column_info[v.name] = {
                        'label': v.compact_label,
                        'to_string': '{:.2f}'.format if 'f' in v.dtype else str,
                    }
                column_info.update(extra_column_info)
                sdt_table.columns = columns
                sdt_table.column_info = column_info

    Extension:
        id = manifest.id + 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.save'
            handler = partial(save, manifest.contribution)
        Command:
            id = manifest.contribution.name + '.update'
            handler = partial(update, manifest.contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_end'
            command = manifest.contribution.name + '.save'

    Extension:
        id = manifest.id + '.workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            closable = False
            name = manifest.contribution.name
            title = manifest.contribution.label

            Container: sdt_container:
                constraints = [
                    vbox(
                        hbox(
                            limit_label,
                            limit_field,
                            spacer,
                            repeat_nogo_field,
                            go_remind_field,
                            copy_button,
                        ),
                        hbox(spacer, fa_label, fa_value, fa_repeat_label, fa_repeat_value),
                        sdt_table,
                    ),
                    copy_button.width == 20,
                ]

                Label: limit_label:
                    text = 'Trial limit'
                    hug_width = 'strong'
                IntField: limit_field:
                    text << str(manifest.contribution.limit)
                    text ::
                        manifest.contribution.limit = int(text)
                CheckBox: repeat_nogo_field:
                    checked := manifest.contribution.include_repeat_nogo
                    text = 'Include repeat NOGO?'
                CheckBox: go_remind_field:
                    checked := manifest.contribution.include_go_remind
                    text = 'Include reminders?'
                PushButton: copy_button:
                    text = 'ðŸ“‹'
                    clicked ::
                        text = sdt_table.as_string()
                        cb = QApplication.clipboard()
                        cb.setText(text)

                Label: fa_repeat_label:
                    text = 'including repeats'
                Label: fa_label:
                    text = 'FA rate'

                Label: fa_repeat_value:
                    text << '{:.2f}'.format(manifest.contribution.fa_repeat)
                Label: fa_value:
                    text << '{:.2f}'.format(manifest.contribution.fa)


                DataFrameTable: sdt_table:
                    name = 'sdt_table'
                    columns_movable = True
                    data << manifest.contribution.results

    Extension:
        id = manifest.id + '.preferences'
        point = 'psi.experiment.preferences'
        rank = 200
        ItemPreferences:
            item << sdt_table
            name << manifest.contribution.name
            auto_save = ['column_config']
