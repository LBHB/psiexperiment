import logging
log = logging.getLogger(__name__)

from pathlib import Path

import bcolz
from atom.api import Bool, Dict, Typed
import numpy as np
import pandas as pd

from .base_store import BaseEpochData, BaseStore


class BcolzEpochData(BaseEpochData):

    metadata_filename = Typed(Path)
    dirty = Bool(False)

    def append(self, data):
        epochs, metadata = self._split_epochs_metadata(data)
        md_records = pd.DataFrame(metadata).to_records()
        epochs = np.concatenate(epochs, axis=0)
        self.data.append(epochs)
        self.metadata.extend(metadata)
        self.dirty = True

    def flush(self):
        if self.dirty:
            self.data.flush()
            df = pd.DataFrame(self.metadata)
            table = bcolz.ctable.fromdataframe(df,
                                               rootdir=self.metadata_filename)
            table.flush()
            self.dirty = False


class BColzStore(BaseStore):
    '''
    Simple class for storing acquired trial data in hierarchy of bcolz folders.
    '''
    name = 'bcolz_store'
    _stores = Dict()

    def get_source(self, source_name):
        try:
            return self._stores[source_name]
        except KeyError as e:
            raise AttributeError(source_name)

    def process_ai_continuous(self, name, data):
        self._stores[name].append(data)

    def process_ai_epochs(self, name, data):
        self._stores[name].append(data)

    def create_ai_continuous(self, name, fs, dtype, metadata):
        n = int(fs*60*60)
        filename = self.get_filename(name)
        log.debug('Saving %s to %s', name, filename)
        carray = bcolz.carray([], rootdir=filename, mode='w', dtype=dtype,
                              expectedlen=n)
        carray.attrs['fs'] = fs
        for key, value in metadata.items():
            carray.attrs[key] = value
        self._stores[name] = carray

    def create_ai_epochs(self, name, fs, dtype, metadata):
        # Create signal data store
        n = int(fs*60*60)
        base = self.get_filename(name)
        log.debug('Saving %s to %s', name, base)
        carray = bcolz.carray([], rootdir=base, mode='w', dtype=dtype,
                              expectedlen=n)
        carray.attrs['fs'] = fs
        for key, value in metadata.items():
            carray.attrs[key] = value

        # Create metadata store
        md_filename = self.get_filename(name + '_metadata')
        self._stores[name] = BcolzEpochData(fs=fs, data=carray, metadata=[],
                                            metadata_filename=md_filename)

    def finalize(self, workbench):
        # Save the settings file
        cmd = 'psi.save_preferences'
        filename = self.base_path / 'final'
        params = {'filename': filename}
        core = workbench.get_plugin('enaml.workbench.core')
        core.invoke_command(cmd, params)
