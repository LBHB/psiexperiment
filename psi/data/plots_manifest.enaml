from functools import partial

from atom.api import Typed, set_default
from enaml.core.api import Include, d_, Looper
from enaml.widgets.api import DockItem, Container, RawWidget, Label, Form, Field
from enaml.workbench.api import Extension, Workbench
from enaml.workbench.core.api import Command

import pyqtgraph as pg
pg.setConfigOption('foreground', 'k')

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction
from psi.context.context_item import OrderedContextMeta


class PGCanvas(RawWidget):

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    view = Typed(pg.GraphicsView)
    component = d_(Typed(pg.GraphicsWidget))

    def create_widget(self, parent):
        self.view = pg.GraphicsView(parent, background=(240, 240, 240))
        self.view.setCentralItem(self.component)
        return self.view

    def observe_component(self, event):
        self.view.setCentralItem(event['value'])


enamldef PlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.label

            Container:
                PGCanvas: canvas:
                    component << manifest.contribution.container


enamldef TimeseriesPlotManifest(PSIManifest): manifest:

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'contribution': manifest.contribution}
            weight = 100


enamldef ChannelPlotManifest(PSIManifest): manifest:

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'contribution': manifest.contribution}
            weight = 100


from enaml.widgets.api import ObjectCombo


enamldef ContextObjectCombo(ObjectCombo):

    attr context_item_name

    items << sorted(list(workbench.get_plugin('psi.context').unique_values(context_item_name)))


enamldef EpochGroupMixin(ChannelPlotManifest): manifest:

    Extension:
        id = 'workspace.epoch_average_plot.' + manifest.contribution.name
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name + ' settings'
            title << manifest.contribution.label + ' settings'

            Container:
                Form:
                    Looper:
                        # We need to pull this from meta.values, not
                        # manifest.contribution.grouping. For some reason, if
                        # we don't pull from meta.values, then the change
                        # notification doesn't get triggered when the GUI
                        # loads. Probably a latent bug somewhere.
                        iterable << meta.values[:]
                        Label:
                            text << loop_item.label
                        ContextObjectCombo:
                            context_item_name << loop_item.name
                            selected ::
                                value = loop_item.coerce_to_type(selected)
                                manifest.contribution.filters[loop_item.name] = value
                                manifest.contribution.update()

    Extension:
        id = 'items'
        point = 'psi.context.items'
        OrderedContextMeta: meta:
            name << manifest.contribution.name
            label << manifest.contribution.label
            values::
                manifest.contribution.groups = values


enamldef GroupedEpochAveragePlotManifest(EpochGroupMixin):
    pass


enamldef GroupedFFTEpochPlotManifest(EpochGroupMixin):
    pass
