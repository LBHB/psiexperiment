from functools import partial

from enaml.core.api import Include
from enaml.widgets.api import DockItem, Container
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from traits_enaml.widgets.enable_canvas import EnableCanvas

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction


def prepare(event, container):
    plugin = event.workbench.get_plugin('psi.data')
    container.prepare(plugin)


enamldef PlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = 'command'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '_prepare'
            handler = partial(prepare, container=manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 200
        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.contribution.name + '_prepare'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            closable = False
            name << manifest.contribution.name
            title << manifest.contribution.title

            Container:
                EnableCanvas:
                    component << manifest.contribution.container


from atom.api import Typed, set_default
from enaml.core.api import Include, d_
from enaml.workbench.api import Workbench
from enaml.widgets.api import RawWidget
import pyqtgraph as pg
pg.setConfigOption('background', 'w')
pg.setConfigOption('foreground', 'k')


class PGCanvas(RawWidget):

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    view = Typed(pg.GraphicsView)
    component = d_(Typed(pg.GraphicsWidget))

    def create_widget(self, parent):
        self.view = pg.GraphicsView(parent)
        self.view.setCentralItem(self.component)
        return self.view

    def observe_component(self, event):
        self.view.setCentralItem(event['value'])


enamldef PGPlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = 'command'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '_prepare'
            handler = partial(prepare, container=manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 200
        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.contribution.name + '_prepare'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.title

            Container:
                PGCanvas: canvas:
                    component << manifest.contribution.container


from psi.context.context_item import OrderedContextMeta


def prepare_grid(event, contribution):
    selector_name = event.parameters.get('selector_name', 'default')
    context = event.workbench.get_plugin('psi.context')
    iterable = context.iter_settings(selector_name, 1)
    contribution.prepare_grid(iterable)


enamldef PGEpochAverageGridContainerManifest(PGPlotContainerManifest): manifest:

    Extension:
        id = 'items'
        point = 'psi.context.items'
        OrderedContextMeta: meta:
            name << manifest.contribution.name
            label << 'Epoch average plot'
            values >> manifest.contribution.items

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.prepare_grid'
            handler = partial(prepare_grid, contribution=manifest.contribution)
