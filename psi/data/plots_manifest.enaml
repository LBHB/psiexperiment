from functools import partial

from atom.api import Typed, set_default
from enaml.core.api import Include, d_
from enaml.widgets.api import DockItem, Container, RawWidget
from enaml.workbench.api import Extension, Workbench
from enaml.workbench.core.api import Command

import pyqtgraph as pg
pg.setConfigOption('foreground', 'k')

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction
from psi.context.context_item import ChoiceContextMeta


class PGCanvas(RawWidget):

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    view = Typed(pg.GraphicsView)
    component = d_(Typed(pg.GraphicsWidget))

    def create_widget(self, parent):
        self.view = pg.GraphicsView(parent, background=(240, 240, 240))
        self.view.setCentralItem(self.component)
        return self.view

    def observe_component(self, event):
        self.view.setCentralItem(event['value'])


def prepare(event, container):
    plugin = event.workbench.get_plugin('psi.data')
    container.prepare(plugin)


def channel_plot_init(event, plot):
    controller_plugin = event.workbench.get_plugin('psi.controller')
    input = controller_plugin.get_input(plot.source_name)
    plot.y_axis.setLabel(input.label, units=input.unit)


enamldef PlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = 'command'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '_prepare'
            handler = partial(prepare, container=manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 200
        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.contribution.name + '_prepare'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.title

            Container:
                PGCanvas: canvas:
                    component << manifest.contribution.container


enamldef ChannelPlotManifest(PSIManifest): manifest:

    Extension:
        id = 'command'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '_init'
            handler = partial(channel_plot_init, plot=manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 200
        ExperimentAction:
            event = 'plugins_started'
            command = manifest.contribution.name + '_init'


def prepare_grid(event, contribution):
    selector_name = event.parameters.get('selector_name', 'default')
    context = event.workbench.get_plugin('psi.context')
    iterable = context.iter_settings(selector_name, 1)
    contribution.prepare_grid(iterable)


enamldef GridContainerManifest(PlotContainerManifest): manifest:

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '.prepare_grid'
            handler = partial(prepare_grid, contribution=manifest.contribution)
