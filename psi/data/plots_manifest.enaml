from functools import partial

from enaml.core.api import Conditional
from enaml.widgets.api import DockItem, Container
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from traits_enaml.widgets.enable_canvas import EnableCanvas

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction


def prepare(event, container):
    plugin = event.workbench.get_plugin('psi.data')
    container.prepare(plugin)


enamldef PlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = 'command'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.contribution.name + '_prepare'
            handler = partial(prepare, container=manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 200
        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.contribution.name + '_prepare'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            closable = False
            name << manifest.contribution.name
            title << manifest.contribution.title

            Container:
                EnableCanvas:
                    component << manifest.contribution.container


from atom.api import Typed, set_default
from enaml.core.api import Include, d_
from enaml.widgets.api import RawWidget
import pyqtgraph as pg
pg.setConfigOption('background', 'w')
pg.setConfigOption('foreground', 'k')


class PyQtGraphCanvas(RawWidget):

    components = d_(Typed(object))

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    def create_widget(self, parent):
        w = pg.GraphicsLayoutWidget(parent, border=(100, 100, 100))
        component = self.components[0]
        rows, cols = component.get_gridsize()
        for r in range(rows):
            w.nextRow()
            for c in range(cols):
                w.addPlot(title='plot {} {}'.format(r, c))

            #w.nextRow()
            #w.addPlot(labels={'left': ('Foobar',), 'bottom': ('Foz',)})

        #w.addLabel('SIDEBAR', angle=90, rowspan=4)
        #w.addPlot(row=2, col=2)
        #w.addPlot(row=2, col=3)
        #w.nextRow()
        #w.nextRow()
        #w.addPlot('ABR 1')
        #w.addPlot('ABR 2')
        #w.addPlot('ABR 3')
        return w
        #self.component.set_parent(parent)
        #return self.component
        #if self.component is not None:
        #    self._window = Window(parent, component=self.component,
        #                          bgcolor=self.component.bgcolor)
        #    enable_widget = self._window.control
        #else:
        #    self._window = None
        #    enable_widget = None

        #return enable_widget

    def _component_updated(self, event):
        print('component updated', event)

    def _observe_components(self, event):
        for c in event.get('oldvalue', []):
            c.unobserve('updated', self._component_updated)
        for c in event.get('value', []):
            c.observe('updated', self._component_updated)


enamldef PyQtGraphPlotContainerManifest(PSIManifest): manifest:

    #Extension:
    #    id = 'command'
    #    point = 'enaml.workbench.core.commands'
    #    Command:
    #        id = manifest.contribution.name + '_prepare'
    #        handler = partial(prepare, container=manifest.contribution)

    #Extension:
    #    id = 'actions'
    #    point = 'psi.controller.actions'
    #    rank = 200
    #    ExperimentAction:
    #        event = 'experiment_prepare'
    #        command = manifest.contribution.name + '_prepare'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            closable = False
            name << manifest.contribution.name
            title << manifest.contribution.title

            Container:
                PyQtGraphCanvas:
                    components << manifest.contribution.children


from psi.context.context_item import OrderedContextMeta

enamldef GriddedEpochAveragePlotManifest(PSIManifest): manifest:

    Extension:
        id = 'items'
        point = 'psi.context.items'
        OrderedContextMeta: meta:
            name << manifest.contribution.name
            label << 'Epoch average plot'
            values >> manifest.contribution.items

    #Extension:
    #    id = 'command'
    #    point = 'enaml.workbench.core.commands'
    #    Command:
    #        id = manifest.contribution.name + '_prepare'
    #        handler = partial(prepare, container=manifest.contribution)

    #Extension:
    #    id = 'actions'
    #    point = 'psi.controller.actions'
    #    rank = 200
    #    ExperimentAction:
    #        event = 'experiment_prepare'
    #        command = manifest.contribution.name + '_prepare'
