from functools import partial

from atom.api import Typed, set_default
from enaml.core.api import Include, d_, Looper
from enaml.widgets.api import DockItem, Container, RawWidget, Label, Form, Field
from enaml.workbench.api import Extension, Workbench
from enaml.workbench.core.api import Command

import pyqtgraph as pg
pg.setConfigOption('foreground', 'k')

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction
from psi.context.context_item import OrderedContextMeta


class PGCanvas(RawWidget):

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    view = Typed(pg.GraphicsView)
    component = d_(Typed(pg.GraphicsWidget))

    def create_widget(self, parent):
        self.view = pg.GraphicsView(parent, background=(240, 240, 240))
        self.view.setCentralItem(self.component)
        return self.view

    def observe_component(self, event):
        self.view.setCentralItem(event['value'])


def attach_source(plot, event):
    controller = event.workbench.get_plugin('psi.controller')
    plot.source = controller.get_input(plot.source_name)
    plot.reset()


def update_plot(plot, event):
    plot.update()


enamldef PlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.label

            Container:
                PGCanvas: canvas:
                    name << manifest.contribution.name + '_canvas'
                    component << manifest.contribution.container


enamldef TimeseriesPlotManifest(PSIManifest): manifest:

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'contribution': manifest.contribution}
            weight = 15


def process_event(plot, event):
    p = event.parameters
    plot._append_data(p['type'], p['timestamp'])


enamldef EventPlotManifest(PSIManifest): manifest:

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.process'
            handler = partial(process_event, manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event << manifest.contribution.event + '_start'
            command = manifest.contribution.name + '.process'
            kwargs = {'type': 'start'}

        ExperimentAction:
            event << manifest.contribution.event + '_end'
            command = manifest.contribution.name + '.process'
            kwargs = {'type': 'end'}


enamldef BasePlotManifest(PSIManifest): manifest:

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '_update'
            handler = partial(update_plot, manifest.contribution)

        Command:
            id = manifest.contribution.name + '_attach_source'
            handler = partial(attach_source, manifest.contribution)

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = manifest.contribution.name + '_attach_source'
            weight = 15

        ExperimentAction:
            # This final update ensures that we always plot new data (otherwise
            # sometimes the final segment doesn't get plotted due to thread
            # race conditions).
            event = 'experiment_end'
            command = manifest.contribution.name + '_update'


def set_data(manifest, event):
    manifest.data = event.parameters['data']


enamldef DataFramePlotManifest(PSIManifest): manifest:


    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.set_data'
            handler = partial(set_data, manifest.contribution)

    Extension:
        id = 'items'
        point = 'psi.context.items'
        OrderedContextMeta: meta:
            name << manifest.contribution.name
            label << manifest.contribution.label
            values >> manifest.contribution.groups
