import logging
log = logging.getLogger(__name__)

from functools import partial

from atom.api import Typed, set_default
from enaml.core.api import Include, d_, Looper
from enaml.widgets.api import (Container, DockItem, Field, Form, Label,
                               Notebook, Page, RawWidget)
from enaml.workbench.api import Extension, Workbench
from enaml.workbench.core.api import Command

import pyqtgraph as pg
pg.setConfigOption('foreground', 'k')

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction
from psi.context.context_item import OrderedContextMeta


class PGCanvas(RawWidget):

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    view = Typed(pg.GraphicsView)
    component = d_(Typed(pg.GraphicsWidget))

    def create_widget(self, parent):
        self.view = pg.GraphicsView(parent, background=(240, 240, 240))
        self.view.setCentralItem(self.component)
        return self.view

    def observe_component(self, event):
        self.view.setCentralItem(event['value'])


def update_plot(plot, event):
    plot.update()


def set_groups(container, event):
    container._workbench = event.workbench
    context = event.workbench.get_plugin('psi.context')
    container.iterable = sorted(context.unique_values(container.group))


enamldef MultiPlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.set_groups'
            handler = partial(set_groups, manifest.contribution)

    Extension:
        id = manifest.id + 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'context_initialized'
            command = manifest.contribution.name + '.set_groups'

    Extension:
        id = manifest.id + '.workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.label
            closable = False
            Container:
                Notebook:
                    tab_style = 'preferences'
                    tabs_closable = False
                    tabs_movable = False
                    Looper:
                        iterable << manifest.contribution.containers.items()
                        Page:
                            title << str(loop_item[0])
                            Container:
                                PGCanvas:
                                    name << manifest.contribution.name + '.canvas'
                                    component = loop_item[1]


enamldef BasePlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + 'workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.label
            closable = False

            Container:
                PGCanvas: canvas:
                    name << manifest.contribution.name + '_canvas'
                    component << manifest.contribution.container


enamldef TimeseriesPlotManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'obj': manifest.contribution}


def process_event(plot, event):
    p = event.parameters
    plot._append_data(p['type'], p['timestamp'])


enamldef EventPlotManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.process'
            handler = partial(process_event, manifest.contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event << manifest.contribution.event + '_start'
            command = manifest.contribution.name + '.process'
            kwargs = {'type': 'start'}

        ExperimentAction:
            event << manifest.contribution.event + '_end'
            command = manifest.contribution.name + '.process'
            kwargs = {'type': 'end'}


enamldef BasePlotManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '_update'
            handler = partial(update_plot, manifest.contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.data.attach_source'
            kwargs = {'obj': manifest.contribution}
            weight = 15

        ExperimentAction:
            # This final update ensures that we always plot new data (otherwise
            # sometimes the final segment doesn't get plotted due to thread
            # race conditions).
            event = 'experiment_end'
            command = manifest.contribution.name + '_update'
