import logging
log = logging.getLogger(__name__)

import numpy as np
import pandas as pd
from scipy.stats import norm

from atom.api import ContainerList, Typed, Str, Int, observe, Bool
from enaml.application import deferred_call
from enaml.layout.api import InsertItem, hbox, vbox, spacer
from enaml.widgets.api import (Container, DockItem, CheckBox, Label, Field, HGroup)
from enaml.workbench.api import Extension, PluginManifest

from psi.core.utils import find_extension
from psi.core.enaml.dataframe_table_widget \
    import DataframeTable
from ..plugin import Sink

PLUGIN_ID = 'psi.data.sdt_analysis'

EXTRA_COLS = {
    'count': {'compact_label': 'N'}, 
}


class PassiveTrialLog(Sink):

    trial_log = Typed(pd.DataFrame)
    results = Typed(pd.DataFrame)
    visible_columns = Typed(list, [])
    context_info = Typed(dict, [])
    grouping = Typed(list, [])

    def prepare(self, plugin):
        g = [c for c, i in self.context_info.items() if i.get('rove', False)]
        self.grouping = g
        self.visible_columns = ['count'] + self.grouping

    def context_info_updated(self, context_info):
        context_info = context_info.copy()
        context_info.update(EXTRA_COLS)
        self.context_info = context_info

    def trial_log_updated(self, trial_log):
        self.trial_log = trial_log
        self.update_results()

    def update_results(self):
        if self.trial_log is None:
            return
        if not self.grouping:
            return
        counts = self.trial_log.groupby(self.grouping).size()
        counts.name = 'count'
        self.results = counts.reset_index()


enamldef PassiveTrialLogDockItem(DockItem):

    attr analysis

    Container:
        #constraints = [
        #    vbox(
        #        hbox(
        #            limit_label,
        #            limit_field,
        #            spacer,
        #            repeat_nogo_field,
        #            go_remind_field,
        #        ),
        #        table,
        #    )
        #]

        DataframeTable: table:
            dataframe << analysis.results
            columns << analysis.visible_columns
            column_info << analysis.context_info


def contribute_to_workspace(workbench, workspace):
    extension = find_extension(workbench, PLUGIN_ID, 'sink', PassiveTrialLog)
    item = PassiveTrialLogDockItem(workspace.dock_area, analysis=extension,
                                   name='passive_trial_log', title='Trial Log')
    op = InsertItem(item=item.name, position='right')
    deferred_call(workspace.dock_area.update_layout, op)


enamldef PassiveTrialLogManifest(PluginManifest): manifest:

    id = PLUGIN_ID

    Extension:
        id = 'sink'
        point = 'psi.data.sink'
        PassiveTrialLog:
            pass

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        factory = contribute_to_workspace
