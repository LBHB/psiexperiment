from atom.api import ContainerList, Typed, Dict
from enaml.application import deferred_call
from enaml.core.api import Looper
from enaml.layout.api import InsertItem
from enaml.widgets.api import (Container, Menu, Action, DockItem, PopupView,
                               Form, CheckBox, Label, HGroup, VGroup)
from enaml.workbench.api import Extension, PluginManifest

import pandas as pd

from psi.core.enaml.api import DataframeTable
from psi.experiment.api import UIPreferences

PLUGIN_ID = 'psi.data.trial_log'


enamldef TableConfig(PopupView): popup:

    attr column_info
    attr widget

    parent_anchor = (0.0, 0.0)
    arrow_size = 20
    arrow_edge = 'right'
    offset = (0, 0)

    Form:
        Looper:
            iterable << sorted(column_info.items())
            CheckBox:
                checked << loop_item[0] in widget.columns
                toggled ::
                    if checked:
                        widget.columns.append(loop_item[0])
                    else:
                        widget.columns.remove(loop_item[0])
            Label:
                text << '{} | {}'.format(loop_item[1].label,
                                        loop_item[1].compact_label)


def get_table(trial_log, grouping):
    if trial_log is None:
        return
    grouping = grouping[:]
    grouping.remove('n')
    result = trial_log.groupby(grouping).size()
    result.name = 'n'
    return result.reset_index()


def get_column_info(context_info):
    info = {k: i.compact_label for k, i in context_info.items()}
    info['n'] = 'N'
    return info


enamldef TrialLogDockItem(DockItem):

    attr data_plugin = workbench.get_plugin('psi.data')

    closable = False

    title_bar_right_clicked ::
        TableConfig(self, 
                    column_info=data_plugin.context_info,
                    widget=self.find('trial_log_counter_table')).show()

    Container: main_container:

        DataframeTable: trial_log_counter_table:
            name = 'trial_log_counter_table'
            dataframe << get_table(data_plugin.trial_log, self.columns)
            column_info << get_column_info(data_plugin.context_info)
            columns = ['n']


from psi.context.context_item import ContextMeta


enamldef TrialLogCounterManifest(PluginManifest): manifest:

    id = PLUGIN_ID

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'
        TrialLogDockItem:
            name = 'trial_log_counter'
            title = 'Trial log counter'

    Extension:
        id = 'preferences'
        point = 'psi.experiment.preferences'
        UIPreferences:
            name = 'trial_log_counter_columns'
            item_name = 'trial_log_counter_table'
            auto_save = ['state']

    #Extension:
    #    id = 'context'
    #    point = 'psi.context.items'
    #    ContextMeta:
    #        name = 'trial_log'
    #        label = 'Show in trial log?'
    #        default_value = False
