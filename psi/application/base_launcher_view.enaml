import os.path

from enaml.core.api import Conditional, Looper
from enaml.widgets.api import Window, ObjectCombo, Label, Field, Container, Form, HGroup, PushButton, VGroup, GroupBox, CheckBox

from psi import get_config

from . import list_preferences, list_io


enamldef LauncherView(Window): main:

    attr launcher
    attr experiments

    Container:

        Form:
            Label:
                text = 'Hardware configuration'

            ObjectCombo:
                items << list_io()
                selected := launcher.io
                to_string = lambda p: p.with_suffix('').name.replace('_', ' ')

            Label:
                text = 'Experiment'

            ObjectCombo: experiment:
                items << experiments
                to_string = lambda x: x.title
                selected := launcher.experiment

        GroupBox:
            title = 'Experiment settings'

            ObjectCombo: settings:
                constraints = [
                    width == 300
                ]
                items << list_preferences(experiment.selected) if experiment is not None else []
                to_string = lambda x: os.path.splitext(os.path.basename(x))[0]
                selected := launcher.settings

            VGroup:
                Looper:
                    iterable << launcher.experiment.plugins
                    CheckBox:
                        checked := loop_item.selected
                        text << loop_item.title
                        visible << not loop_item.required

        Form:

            Label:
                text = 'Save data?'

            CheckBox: save:
                checked := launcher.save_data

            Label:
                text = 'Experimenter'

            Field: experimenter:
                text := launcher.experimenter

            Conditional:
                condition << hasattr(launcher, 'animal')

                Label:
                    text = 'Animal'

                HGroup:
                    padding = 0

                    Field: animal:
                        text := launcher.animal

                    Conditional:
                        condition << hasattr(launcher, 'ear')

                        ObjectCombo: ear:
                            items = ['right', 'left']
                            selected := launcher.ear

            Label:
                text = 'Note'

            Field: note:
                text := launcher.note

            Label:
                text = 'Base folder'

            Label: base_folder:
                text << launcher.base_folder

        PushButton:
            text = 'Run experiment'
            enabled << launcher.can_launch

            clicked ::
                launcher.launch_subprocess()
