import os.path
import datetime as dt
import subprocess

from enaml.core.api import Conditional
from enaml.widgets.api import Window, ObjectCombo, Label, Field, Container, Form, HGroup, PushButton, VGroup, GroupBox, CheckBox

from psi import get_config

from . import list_preferences


def launch_subprocess(experiment, base_folder, settings, save):
    args = ['psi', experiment]
    if save:
        dt_string = dt.datetime.now().strftime('%Y%m%d-%H%M')
        base_folder = base_folder.format(date_time=dt_string)
        args.append(base_folder)
    if settings:
        args.extend(['--preferences', settings])
    subprocess.check_output(args)


class Args:

    def __init__(self, experiment, pathname, preferences, io, debug=False, debug_warning=False,
                 pdb=False, no_preferences=False, no_layout=False, commands=[]):
        vars(self).update(locals())


def launch_main(experiment, base_folder, settings, save):
    from psi import get_config
    from psi.application import launch_experiment

    if save:
        dt_string = dt.datetime.now().strftime('%Y%m%d-%H%M')
        base_folder = base_folder.format(date_time=dt_string)
    else:
        base_folder = None
    args = Args(experiment, base_folder, settings, get_config('SYSTEM'))
    launch_experiment(args)


enamldef LauncherView(Window): main:

    attr launcher
    attr experiments

    Container:

        Form:
            Label:
                text = 'Experiment'

            ObjectCombo: experiment:
                items << experiments
                selected := launcher.experiment

            Label:
                text = 'Experiment Settings'

            ObjectCombo: settings:
                items << list_preferences(experiment.selected)
                to_string = lambda x: os.path.splitext(os.path.basename(x))[0]
                selected := launcher.settings

            Label:
                text = 'Save data?'

            CheckBox: save:
                checked := launcher.save_data

        Form:
            enabled = save.checked

            Label:
                text = 'Experimenter'

            Field: experimenter:
                text := launcher.experimenter

            Label:
                text = 'Animal'

            HGroup:
                padding = 0

                Field: animal:
                    text := launcher.animal

                Conditional:
                    condition << hasattr(launcher, 'ear')

                    ObjectCombo: ear:
                        items = ['right', 'left']
                        selected := launcher.ear

            Label:
                text = 'Note'

            Field: note:
                text := launcher.note

            Label:
                text = 'Base folder'

            Label: base_folder:
                text << launcher.base_folder

        PushButton:
            text = 'Run experiment'
            enabled << bool(
                # Note, since Ear is an Enum, we do not need to include it in
                # the check since it always has a value.
                not save.checked or \
                (experiment.selected and \
                 experimenter.text and \
                 animal.text and \
                 note.text)
            )

            clicked ::
                launch_subprocess(experiment.selected, base_folder.text,
                                  settings.selected, save.checked)
