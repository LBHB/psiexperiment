import os.path

import enaml
from enaml.core.api import Conditional, Looper
from enaml.widgets.api import (Window, ObjectCombo, Label, Field, Container,
                               Form, HGroup, PushButton, VGroup, GroupBox,
                               CheckBox)

from psi import get_config
from psi.controller.api import Channel
from psi.core.enaml.api import load_manifest_from_file
from psi.controller.calibration.util import load_calibration


def get_editable_channels(io_file):
    manifest = load_manifest_from_file(io_file, 'IOManifest')
    channels = [o for o in manifest().traverse() if isinstance(o, Channel)]
    return [c for c in channels if c.calibration_user_editable]


def configure_calibration(io_file, cal_file):
    editable_channels = get_editable_channels(io_file)

    # Load the selected calibration
    if cal_file is not None:
        load_calibration(cal_file, editable_channels)

    # Open the GUI for editing the calibration
    with enaml.imports():
        from psi.controller.calibration.calibration_gui import Main
        window = Main(io_file=io_file, channels=editable_channels,
                      modality='application_modal')
        result = window.show()


enamldef LauncherView(Window): main:

    attr launcher
    attr experiments

    Container:

        Form:
            Label:
                text = 'Hardware configuration'

            ObjectCombo:
                items << launcher.available_io[:]
                selected := launcher.io
                to_string = lambda x: x.stem.replace('_', ' ')

            Label:
                text = 'Calibration'

            HGroup:
                padding = 0
                align_widths = False
                enabled << len(get_editable_channels(launcher.io)) > 0

                ObjectCombo: select_calibration:
                    items << launcher.available_calibrations[:]
                    selected := launcher.calibration
                    to_string = lambda x: x.stem.replace('_', ' ')

                PushButton:
                    text = 'âš™'
                    clicked ::
                        configure_calibration(launcher.io, launcher.calibration)

            Label:
                text = 'Experiment'

            ObjectCombo: experiment:
                items << experiments
                to_string = lambda x: x.title
                selected := launcher.experiment

        GroupBox:
            title = 'Experiment preferences'

            ObjectCombo: preferences:
                constraints = [
                    width == 300
                ]
                items << launcher.available_preferences[:]
                to_string = lambda x: x.stem.replace('_', ' ')
                selected := launcher.preferences

            VGroup:
                Looper:
                    iterable << launcher.experiment.plugins
                    CheckBox:
                        checked := loop_item.selected
                        text << loop_item.title
                        visible << not loop_item.required

        Form:

            Label:
                text = 'Save data?'

            CheckBox: save:
                checked := launcher.save_data

            Label:
                text = 'Experimenter'

            Field: experimenter:
                text := launcher.experimenter

            Conditional:
                condition << hasattr(launcher, 'animal')

                Label:
                    text = 'Animal'

                HGroup:
                    padding = 0

                    Field: animal:
                        text := launcher.animal

                    Conditional:
                        condition << hasattr(launcher, 'ear')

                        ObjectCombo: ear:
                            items = ['right', 'left']
                            selected := launcher.ear

            Label:
                text = 'Note'

            Field: note:
                text := launcher.note

            Label:
                text = 'Base folder'

            Label: base_folder:
                text << str(launcher.base_folder)

        PushButton:
            text = 'Run experiment'
            enabled << launcher.can_launch

            clicked ::
                launcher.launch_subprocess()
