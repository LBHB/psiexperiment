import os.path

import numpy as np

from enaml.workbench.api import PluginManifest, Extension

from psi import get_config
from psi.controller.engines.nidaq import NIDAQEngine
from psi.controller.api import (AIChannel, AOChannel, ExperimentAction,
                                Trigger, Toggle, DOChannel, Input)

from psi.controller.input import (Downsample, IIRFilter, Threshold, Edges,
                                  CalibratedInput, RMS, SPL,
                                  AccumulateSegments)

from psi.controller.calibration import GolayCalibration, FlatCalibration
from psi.controller.calibration.util import db

from psi.controller.devices.opencv_camera import OpenCVCamera
from psi.controller.devices.pellet_dispenser import PelletDispenser


cal_root = get_config('CAL_ROOT')
filename = os.path.join(cal_root, '161128 - Golay for training booth.cal')


enamldef IOManifest(PluginManifest): manifest:
    '''
    This defines the hardware connections that are specific to the LBHB Bobcat
    computer for the appetitive experiment.
    '''
    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        PelletDispenser:
            output_name = 'food_dispense_trigger'
            name = 'food_dispenser'
            label = 'Food dispenser'

        OpenCVCamera:
            device = 0
            interval = 0.1
            resolution = (320, 240)
            name = 'behavior_camera'
            label = 'Behavior camera'

        OpenCVCamera:
            device = 1
            interval = 0.1
            resolution = (1920, 1080)
            #resolution = (320, 240)
            name = 'pupil_camera'
            label = 'Pupil camera'

        Trigger:
            # This is a required output for the food dispenser. The
            # plugin will look for this output by name. If not present,
            # the food dispenser plugin will not work!
            label = 'Food dispense'
            name = 'food_dispense_trigger'
            duration = 0.1
            target_name = 'food_dispense'

        Toggle:
            # This is a required output for the room light. The plugin
            # will look for this output by name. If not present, the
            # room light plugin will not work!
            name = 'room_light_toggle'
            label = 'Room light'
            target_name = 'room_light'

        NIDAQEngine: engine:
            name = 'NI'
            master_clock = True

            # Since we're using an AnalogThreshold input to detect nose pokes
            # and reward contact, we want a fairly short AI monitor period to
            # ensure that we detect these events quickly.
            hw_ai_monitor_period = 0.01
            hw_ao_monitor_period = 2

            AOChannel:
                label = 'Speaker'
                name = 'speaker'
                channel = 'Dev1/ao0'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'RSE'
                calibration = \
                    GolayCalibration.from_file(filename, fixed_gain=-21.5)

            DOChannel:
                name = 'food_dispense'
                channel = 'Dev1/port0/line0'
                fs = 0
                dtype = np.dtype('bool')

            DOChannel:
                name = 'room_light'
                channel = 'Dev1/port0/line1'
                fs = 0
                dtype = np.dtype('bool')

            AIChannel: channel:
                label = 'Microphone'
                name = 'microphone'
                channel = 'Dev1/ai5'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'differential'
                calibration = FlatCalibration(db(10))

                AccumulateSegments:
                    n = 50
                    CalibratedInput:
                        IIRFilter:
                            f_highpass = 1000
                            f_lowpass = 40000
                            ftype = 'butter'
                            N = 4
                            btype = 'bandpass'
                            name = 'microphone'
                            RMS:
                                duration = 1
                                SPL:
                                    name = 'noise_level'

            AIChannel:
                label = 'Nose poke IR'
                name = 'nose_poke'
                channel = 'Dev1/ai3'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'differential'

                IIRFilter:
                    f_lowpass = 25
                    btype = 'lowpass'
                    ftype = 'butter'
                    N = 4
                    Downsample:
                        # effective Fs is 100
                        name = 'nose_poke_analog'
                        q = 1000
                        Threshold:
                            threshold = 2.5
                            Edges:
                                debounce = 2
                                name = 'nose_poke'

            AIChannel:
                label = 'Reward contact IR'
                name = 'reward_contact'
                channel = 'Dev1/ai4'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'differential'

                IIRFilter:
                    f_lowpass = 25
                    btype = 'lowpass'
                    ftype = 'butter'
                    N = 1
                    Downsample:
                        name = 'reward_contact_analog'
                        q = 1000
                        Threshold:
                            threshold = 2.5
                            Edges:
                                debounce = 2
                                name = 'reward_contact'
