import numpy as np

from enaml.workbench.api import PluginManifest, Extension

from psi.controller.engines.nidaq import NIDAQEngine
from psi.controller.api import (AIChannel, AOChannel, ExperimentAction,
                                Trigger, Toggle, DOChannel, Input)

from psi.controller.input import Downsample, IIRFilter, Threshold, Edges


enamldef IOManifest(PluginManifest): manifest:
    '''
    This defines the hardware connections that are specific to the LBHB Bobcat
    computer for the appetitive experiment.
    '''
    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI'
            master_clock = True
            
            # Since we're using an AnalogThreshold input to detect nose pokes
            # and reward contact, we want a fairly short AI monitor period to
            # ensure that we detect these events quickly.
            hw_ai_monitor_period = 0.01
            hw_ao_monitor_period = 1

            AOChannel:
                label = 'Speaker'
                name = 'speaker'
                channel = 'Dev1/ao0'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'RSE'

            AIChannel:
                label = 'Microphone'
                name = 'microphone'
                channel = 'Dev1/ai0'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'differential'

                Input:
                    name = 'microphone'

            AIChannel:
                label = 'Speaker Monitor'
                name = 'speaker_monitor'
                channel = 'Dev1/ai1'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'differential'

                Input:
                    name = 'speaker_monitor'
