import os.path

from enaml.workbench.api import PluginManifest, Extension

from psi import get_config
from psi.controller.engines.nidaq import (NIDAQEngine, 
                                          NIDAQHardwareAIChannel,
                                          NIDAQHardwareAOChannel,
                                          NIDAQSoftwareDOChannel)

from psi.controller.input import CalibratedInput, Input

from psi.controller.calibration import GolayCalibration, FlatCalibration, InterpCalibration
from psi.controller.calibration.util import db

cal_root = get_config('CAL_ROOT')

# Note that the fixed_gain is a hand-correction added to fix the problem I'm
# having getting the output to match my desired SPL. We'll need to explore the
# fix eventually.
speaker_filename = os.path.join(cal_root, '161219 - Golay noise exposure D220TI speaker 1.cal')
#speaker_cal = GolayCalibration.from_file(speaker_filename, fixed_gain=-56+2.55)
speaker_cal = GolayCalibration.from_file(speaker_filename, fixed_gain=-36+2.55)

exp_mic_filename = os.path.join(cal_root, '20180508-1536 Brad exp mic on side wall pt_calibration')
exp_mic_cal = InterpCalibration.from_psi(exp_mic_filename)


enamldef IOManifest(PluginManifest): manifest:
    '''
    This defines the hardware connections that are specific to the LBHB Bobcat
    computer for the appetitive experiment.
    '''
    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI'
            master_clock = True

            hw_ai_monitor_period = 0.1
            hw_ao_monitor_period = 1

            NIDAQHardwareAOChannel:
                label = 'Noise exposure speaker'
                name = 'speaker'
                channel = 'Dev1/ao1'
                fs = 25e3
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                calibration = speaker_cal

            NIDAQHardwareAIChannel:
                label = 'Experiment microphone'
                name = 'experiment_microphone'
                channel = 'Dev1/ai2'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'differential'

                # Custom microphone (knowles)
                calibration = exp_mic_cal
                gain = 20

            NIDAQHardwareAIChannel:
                label = 'Sparkfun microphone'
                name = 'sparkfun_microphone'
                channel = 'Dev1/ai6'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'differential'

                # Sparkfun microphone
                calibration = FlatCalibration(db(0.5224), fixed_gain=5.4)

            NIDAQHardwareAIChannel:
                label = 'Calibration microphone'
                name = 'calibration_microphone'
                channel = 'Dev1/ai1'
                start_trigger = 'ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'differential'
                gain = 0
                calibration = FlatCalibration(db(2.89e-3))
