import numpy as np 
from enaml.workbench.api import PluginManifest, Extension

from psi.controller.engines.nidaq import NIDAQEngine
from psi.controller.api import (ContinuousOutput, EpochOutput, AIChannel,
                                AOChannel, ExperimentAction, Trigger, Toggle,
                                DOChannel, Input)

from psi.controller.input import (Downsample, IIRFilter, Threshold, Edges,
                                  CalibratedInput, RMS, SPL,
                                  Accumulate, Blocked)

from psi.data.sinks.bcolz_store import BColzStore
from psi.controller.calibration import FlatCalibration


enamldef IOManifest(PluginManifest): manifest:

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        BColzStore:
            pass

    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        # Order of engines is important here. We need the NI_eeg engine to
        # start before the NI_audio engine to ensure that the start trigger is
        # detected.
        NIDAQEngine:
            name = 'NI_eeg'
            hw_ai_monitor_period = 0.1

            AIChannel:
                label = 'Continuous EEG'
                name = 'eeg_channel'
                channel = 'PXI1Slot8/ai0'
                start_trigger = '/PXI1Slot7/ao/StartTrigger'
                fs = 25e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'AC'

        NIDAQEngine:
            name = 'NI_audio'
            master_clock = True

            hw_ao_monitor_period = 0.5
            hw_ao_buffer_size = 5

            AOChannel:
                label = 'primary'
                name = 'speaker_0'
                channel = 'PXI1Slot8/ao0'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'pseudodifferential'
                calibration = FlatCalibration.from_spl(80)

            AOChannel:
                label = 'secondary'
                name = 'speaker_1'
                channel = 'PXI1Slot8/ao1'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'pseudodifferential'
                calibration = FlatCalibration.from_spl(80)

            AIChannel:
                label = 'Probe tube microphone'
                name = 'microphone'
                channel = 'PXI1Slot8/ai0'
                start_trigger = '/PXI1Slot8/ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'AC'

                Input:
                    name = '_mic'
                    save = True

                    IIRFilter:
                        f_highpass = 40
                        f_lowpass = 40000
                        ftype = 'butter'
                        N = 4
                        btype = 'bandpass'
                        name = 'microphone'
                        save = True

            AIChannel:
                label = 'Reference microphone'
                name = 'reference_microphone'
                channel = 'PXI1Slot8/ai1'
                start_trigger = '/PXI1Slot8/ao/StartTrigger'
                fs = 100e3
                expected_range = (-10, 10)
                dtype = np.dtype('float64')
                terminal_mode = 'pseudodifferential'
                terminal_coupling = 'AC'

                Input:
                    name = 'reference_microphone'
