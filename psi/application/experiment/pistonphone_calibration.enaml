import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.widgets.api import DockItem, Label, Form
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, EnumParameter, Parameter, Result
from psi.controller.api import ExperimentAction
from psi.controller.base_manifest import (BaseManifest, get_hw_ai_choices)
from psi.controller.calibration import FlatCalibration
from psi.controller.input import Blocked
from psi.controller.calibration import util
from psi.data.plots import (TimeContainer, ChannelPlot, ViewBox, FFTContainer,
                            FFTChannelPlot)


def configure_hardware(event):
    '''
    Set the HW AO calibration to attenuation
    '''
    context = event.workbench.get_plugin('psi.context')
    input_channel = context.get_value('input_channel')
    duration = context.get_value('sample_duration')

    # Link up the desired inputs and outputs for the calibration
    controller = event.workbench.get_plugin('psi.controller')
    controller.connect_input('hw_ai', input_channel)

    # Since there's no output, disable the start trigger on the input channel.
    # TODO: Perhaps make the engine smarter in the future to handle these sort
    # of edge-cases?
    input_channel = controller.get_channel(input_channel)
    input_channel.start_trigger = ''
    input_channel.samples = round(duration*input_channel.fs)


def calculate_sens(event):
    data = event.workbench.get_plugin('psi.data')
    context = event.workbench.get_plugin('psi.context')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    dock_item = ui.window.find('result')

    frequency = context.get_value('reference_frequency')
    level = context.get_value('reference_level')
    pa = util.dbtopa(level)

    source = data.find_source('hw_ai')
    waveform = source[:]

    rms_overall = util.rms(waveform, detrend=True)
    rms_nom = util.tone_power_conv(waveform, source.fs, frequency, 'flattop')

    frequencies = util.psd_freq(waveform, source.fs)
    psd_hanning = util.psd(waveform, source.fs, 'hanning')
    psd_flattop = util.psd(waveform, source.fs, 'flattop')

    freq_lb, freq_ub = frequency*0.9, frequency*1.1
    mask = (frequencies >= freq_lb) & (frequencies < freq_ub)

    peak_freq = frequencies[mask][np.argmax(psd_hanning[mask])]
    rms_peak = util.tone_power_conv(waveform, source.fs, peak_freq, 'flattop')
    mic_sens_overall = rms_overall/pa*1e3
    mic_sens_peak = rms_peak/pa*1e3
    mic_sens_nom = rms_nom/pa*1e3

    results = {
        'peak frequency (Hz)': peak_freq,
        'rms overall (V)': rms_overall,
        'rms nominal (V)': rms_nom,
        'rms peak (V)': rms_peak,
        'mic sens overall (mV/Pa)': mic_sens_overall,
        'mic sens nominal (mV/Pa)': mic_sens_nom,
        'mic sens peak (mV/Pa)': mic_sens_peak,
    }

    dock_item.results = results
    data.create_mapping('microphone_sensitivity', results)


enamldef ControllerManifest(BaseManifest): manifest:

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        Blocked: hw_ai:
            duration = 0.1
            name = 'hw_ai'
            save = True

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'input'
            label = 'Input settings'

            Parameter:
                name = 'input_gain'
                label = 'input gain (dB)'
                compact_label = 'ai_gain'
                dtype = 'float64'
                default = 40
                scope = 'experiment'

            Parameter:
                name = 'input_range'
                label = 'Expected input range (Vpp)'
                compact_label = 'ai_range'
                dtype = 'float64'
                default = 10
                scope = 'experiment'

            EnumParameter:
                name = 'input_channel'
                label = 'Input channel'
                compact_label = 'ai'
                choices << get_hw_ai_choices(workbench)
                scope = 'experiment'

            Parameter:
                name = 'sample_duration'
                label = 'Sample duration (sec.)'
                compact_label = 'samp. dur.'
                dtype = 'float64'
                default = 2
                scope = 'experiment'

        ContextGroup:
            name = 'reference'
            label = 'Reference settings'

            Parameter:
                name = 'reference_frequency'
                label = 'Reference frequency (Hz)'
                compact_label = 'ref. freq.'
                dtype = 'float64'
                default = 1e3
                scope = 'experiment'

            Parameter:
                name = 'reference_level'
                label = 'Reference level (dB SPL)'
                compact_label = 'ref. freq.'
                dtype = 'float64'
                default = 114
                scope = 'experiment'

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_hardware'
            handler = configure_hardware

        Command:
            id = 'psi.controller.calculate_sens'
            handler = calculate_sens

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_hardware'
            weight = 15

        ExperimentAction:
            event = 'NI_audio_end'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'experiment_end'
            command = 'psi.controller.calculate_sens'

    Extension:
        id = 'result_view'
        point = 'psi.experiment.workspace'
        DockItem:
            name = 'result'
            title = 'Result'
            attr results = {}
            Form:
                Label:
                    text = 'Peak frequency (Hz)'
                Label:
                    text << str(results.get('peak_frequency', ''))

                Label:
                    text = 'Overall RMS (V)'
                Label:
                    text << str(results.get('rms_overall', ''))

                Label:
                    text = 'RMS at nominal frequency (V)'
                Label:
                    text << str(results.get('rms_nominal', ''))

                Label:
                    text = 'RMS at peak frequency (V)'
                Label:
                    text << str(results.get('rms_peak', ''))

                Label:
                    text = 'Mic. sens. (mV/Pa)'
                Label:
                    text << str(results.get('mic_sens_peak', ''))

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'time_container'
            label = 'Signal'
            span = 2
            delay = 0

            ViewBox:
                y_min = -2.5
                y_max = 2.5
                label = 'Signal (V)'

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'hw_ai'

        FFTContainer:
            name = 'fft_container'
            label = 'Epoch FFT'
            freq_lb = 950.0
            freq_ub = 1050.0

            ViewBox:
                y_min = -80
                y_max = 10

                FFTChannelPlot:
                    source_name = 'hw_ai'
                    pen_color = 'k'
                    name = 'fft_plot'
                    label = 'FFT plot'
                    time_span = 2
                    window = 'hamming'

                FFTChannelPlot:
                    source_name = 'hw_ai'
                    pen_color = 'r'
                    name = 'flattop_fft_plot'
                    label = 'Flattop FFT plot'
                    time_span = 2
                    window = 'flattop'
