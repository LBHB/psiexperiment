import logging
log = logging.getLogger(__name__)

from atom.api import Typed
import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, Parameter
from psi.context.selector import CartesianProduct
from psi.controller.api import ExperimentAction
from psi.controller.base_plugin import BasePlugin
from psi.controller.base_manifest import BaseManifest
from psi.controller.input import (ContinuousInput, ExtractEpochs, Input,
                                  Blocked, Accumulate, RejectEpochs, IIRFilter,
                                  Decimate, RMS)
from psi.controller.output import SelectorQueuedEpochOutput, EpochOutput
from psi.controller.queue import InterleavedFIFOSignalQueue

from psi.util import copy_declarative

from psi.data.plots import (TimeContainer, ChannelPlot,
                            StackedEpochAveragePlot, ChannelPlot, ViewBox)

from psi.data.sinks.epoch_counter import GroupedEpochCounter
from psi.data.sinks.bcolz_store import BColzStore

from psi.token.primitives import Cos2Envelope, Tone, BandlimitedNoise


from psi.controller.calibration import FlatCalibration


def configure_hardware(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    threshold = context.get_value('reject_threshold')
    controller.set_input_attr('valid_erp', 'threshold', threshold)


enamldef ControllerManifest(BaseManifest): manifest:

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        BColzStore:
            epoch_inputs = ['erp']
            continuous_inputs = ['eeg']

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        # The most standard stimuli
        Cos2Envelope:
            name = 'tone_burst'
            label = 'tone'
            Tone:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        ContinuousInput:
            name = 'microphone'
            source_name = 'microphone_channel'

        SelectorQueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            target_name = 'speaker_0'
            selector_name = 'default'
            queue = InterleavedFIFOSignalQueue(
                fs=output.fs,
                filter_delay=output.channel.filter_delay,
                initial_delay=1)
            auto_decrement = False

        ContinuousInput:
            name = 'eeg'
            source_name = 'eeg_channel'

        IIRFilter:
            name = 'eeg_filtered'
            N = 2
            btype = 'bandpass'
            ftype = 'butter'
            f_highpass = 300
            f_lowpass = 3000
            source_name = 'eeg_channel'

            ExtractEpochs: extract:
                name = 'erp'
                queue = output.queue
                epoch_size = 8.5e-3

                RejectEpochs:
                    name = 'valid_erp'
                    threshold = 0

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'abr'
            label = 'ABR settings'

            Parameter:
                name = 'reject_threshold'
                label = 'Reject threshold'
                compact_label = 'Th'
                default = 2.5
                scope = 'experiment'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'ABR sequence'

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_hardware'
            handler = configure_hardware

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_hardware'
            weight = 10

        ExperimentAction:
            weight = 15
            event = 'experiment_prepare'
            command = 'psi.controller.tone_calibrate_channel'
            kwargs = {
                'input_name': 'microphone',
                'output_name': 'target',
                'parameter_names': ['target_tone_frequency'],
                'gain': -40,
                'max_thd': 2,
                'min_snr': 6,
            }

        ExperimentAction:
            event = 'valid_erp_acquired'
            command = 'target.decrement_key'

        ExperimentAction:
            event = 'target_end'
            command = 'psi.controller.stop'

    Extension:
        id = 'sink'
        point = 'psi.data.sinks'

        GroupedEpochCounter:
            name = 'valid_erp_counter'
            label = 'Valid ERPs acquired'
            source_name = 'valid_erp'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'erp_container'
            label = 'ERP average'
            span = 8.5e-3

            ViewBox:
                y_min = -0.1
                y_max = 0.1
                label = 'Signal (V)'

                StackedEpochAveragePlot:
                    name = 'erp_average'
                    label = 'ERP average plot'
                    source_name = 'valid_erp'
                    n_update = 32

        TimeContainer:
            name = 'trial_plot_container'
            label = 'Trial timing'
            span = 2
            delay = 0.5

            ViewBox:
                name = 'ecg_view'
                y_min = -5
                y_max = 5

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'eeg_filtered'
