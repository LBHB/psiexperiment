import logging
log = logging.getLogger(__name__)

from atom.api import Typed
import numpy as np

from enaml.workbench.api import Extension

from psi.context.api import ContextGroup, Parameter
from psi.context.selector import CartesianProduct
from psi.controller.api import ExperimentAction
from psi.controller.base_manifest import BaseManifest
from psi.controller.input import (ContinuousInput, ExtractEpochs, Input,
                                  Blocked, Accumulate, RejectEpochs, IIRFilter,
                                  Decimate)
from psi.controller.output import QueuedEpochOutput, EpochOutput
from psi.controller.queue import InterleavedFIFOSignalQueue

from psi.util import copy_declarative

from psi.data.plots import (TimeContainer, ChannelPlot,
                            GroupedEpochAveragePlot, ChannelPlot, ViewBox)
from psi.data.sinks.epoch_counter import GroupedEpochCounter

from psi.token.primitives import Cos2Envelope, Tone, BandlimitedNoise


enamldef ControllerManifest(BaseManifest): manifest:

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        # The most standard stimuli
        Cos2Envelope:
            name = 'tone_burst'
            label = 'tone'
            Tone:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        ContinuousInput:
            name = 'microphone'
            source_name = 'microphone_channel'
            IIRFilter:
                name = 'microphone_filtered'
                N = 2
                btype = 'highpass'
                ftype = 'butter'
                f_highpass = 250
                save = True

        QueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            target_name = 'speaker_0'
            selector_name = 'default'
            queue = InterleavedFIFOSignalQueue(fs=output.fs, initial_delay=1)
            auto_decrement = False

        Decimate:
            q = 25
            name = 'ecg'
            save = True
            source_name = 'eeg_channel'

        Blocked:
            duration = 0.1
            name = 'eeg'
            save = True
            source_name = 'eeg_channel'

            Accumulate:
                name = 'eeg_buffered'
                n = 10

                IIRFilter:
                    name = 'eeg_buffered_filtered'
                    N = 2
                    btype = 'bandpass'
                    ftype = 'butter'
                    f_highpass = 200
                    f_lowpass = 10000

                    ExtractEpochs: extract:
                        save = True
                        buffer_size = 50
                        queue = output.queue
                        delay = 47.5/extract.fs
                        name = 'erp'

                        RejectEpochs:
                            save = True
                            name = 'valid_erp'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'ABR sequence'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            weight = 15
            event = 'experiment_prepare'
            command = 'psi.controller.tone_calibrate_channel'
            kwargs = {
                'input_name': 'microphone',
                'output_name': 'target',
                'parameter_names': ['target_tone_frequency'],
                'gain': -40,
                'max_thd': 2,
                'min_snr': 6,
            }

        ExperimentAction:
            event = 'erp_acquired'
            command = 'psi.controller.save_epoch_as_trial'

        ExperimentAction:
            event = 'valid_erp_acquired'
            command = 'target.decrement_key'

        ExperimentAction:
            event = 'target_end'
            command = 'psi.controller.stop'

    Extension:
        id = 'sink'
        point = 'psi.data.sinks'

        GroupedEpochCounter:
            name = 'valid_erp_counter'
            label = 'Valid ERPs acquired'
            source_name = 'valid_erp'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'erp_container'
            label = 'ERP average'
            span = 8.5e-3

            ViewBox:
                y_min = -0.1
                y_max = 0.1
                label = 'Signal (V)'

                GroupedEpochAveragePlot:
                    name = 'erp_average'
                    label = 'ERP average plot'
                    source_name = 'valid_erp'

        TimeContainer:
            name = 'trial_plot_container'
            label = 'Trial timing'
            span = 2

            ViewBox:
                name = 'ecg_view'
                y_min = -5
                y_max = 5

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'ecg'

            ViewBox:
                name = 'microphone_view'
                y_min = -0.1
                y_max = 0.1

                ChannelPlot:
                    pen_color = 'r'
                    source_name = 'microphone_filtered'
