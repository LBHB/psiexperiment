import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.ui.api import Branding

from psi.context.selector import SequenceSelector
from psi.controller.api import EpochOutput
from psi.controller.base_plugin import BasePlugin
from psi.controller.input import IIRFilter, Average, Accumulate, Epoch, Reject
from psi.controller.base_manifest import BaseManifest
from psi.controller.engines.nidaq import NIDAQEngine

from psi.context.api import ContextGroup, Parameter

from psi.data.plots import (TimeContainer, ChannelPlot, TimeseriesPlot,
                            ExtremesChannelPlot)


class ABRController(BasePlugin):

    def start_experiment(self):
        self.context.apply_changes()
        self.core.invoke_command('psi.data.prepare')
        self.start_engines()
        self.context.next_setting(save_prior=False)
        self.experiment_state = 'running'
        print self.context.get_values()
        self.invoke_actions('experiment_start', self.get_ts())


enamldef ControllerManifest(BaseManifest): manifest:

    id = 'psi.controller'
    factory = ABRController

    Extension:
        id = 'branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title = 'Sequence Controller'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        EpochOutput:
            label = 'Stimulus'
            name = 'stimulus'
            target_name = 'primary'

        IIRFilter:
            source_name = 'eeg'
            f_lowpass = 300
            f_highpass = 3000
            btype = 'bandpass'
            ftype = 'butter'
            N = 4
            name = 'filtered_eeg'

            Epoch:
                name = 'filtered_erp'
                reference = 'stimulus'
                duration = 'window'

                Accumulate:
                    n = 2
                    Reject:
                        threshold = 'threshold'
                        Average:
                            n = 'averages'
                            name = 'mean_erp'

    Extension:
        id = 'items'
        point = 'psi.context.items'

        ContextGroup:
            name = 'epoch'
            label = 'Acquisition settings'

        Parameter:
            name = 'averages'
            label = 'Averages'
            compact_label = 'N'
            dtype = np.dtype('int')
            default = 1024
            expression = '1024'
            group = 'epoch'
            scope = 'experiment'

        Parameter:
            name = 'window'
            label = 'Window (s)'
            compact_label = 'W'
            dtype = np.dtype('float32')
            default = 8.5e-3
            expression = '8.5e-3'
            group = 'epoch'
            scope = 'experiment'

        Parameter:
            name = 'reject_threshold'
            label = 'Reject threshold (V)'
            compact_label = 'Rej.'
            dtype = np.dtype('float32')
            default = 0.2
            expression = '0.2'
            group = 'epoch'
            scope = 'experiment'

        Parameter:
            name = 'exp_mic_gain'
            label = 'Experiment microphone gain (dB)'
            compact_label = 'gain'
            dtype = np.dtype('float32')
            default = 40
            expression = '40'
            group = 'epoch'
            scope = 'experiment'

        Parameter:
            name = 'iti'
            label = 'Intertrial interval (s)'
            compact_label = 'ITI'
            dtype = np.dtype('float32')
            default = 1/20.0
            expression = '1/20.0'
            group = 'epoch'
            scope = 'experiment'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'
        SequenceSelector:
            name = 'Sequence'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'trial_plot_container' 
            title = 'Trial timing'
            trig_delay = 0
            span = 10

            #TimeseriesPlot:
            #    source = 'event_log'
            #    rising_event = 'reward_start'
            #    falling_event = 'reward_end'
            #    fill_color = (0.25, 0.41, 0.88, 0.25)
            #    line_color = (0.25, 0.41, 0.88, 0.5)
            #    rect_center = 0.25
            #    rect_height = 0.2

            ExtremesChannelPlot:
                decimation_threshold = 5
                source = 'filtered_eeg'
                line_color = (0, 0, 0)
                value_range = (-1, 1)
