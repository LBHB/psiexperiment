import logging
log = logging.getLogger(__name__)

import pandas as pd

from enaml.application import deferred_call
from enaml.core.api import Conditional
from enaml.widgets.api import Container, DockItem
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.core.api import Command

from psi.context.api import ContextGroup, EnumParameter, Parameter
from psi.controller.api import (Downsample, EpochOutput, ExperimentAction,
                                get_hw_ai_choices, get_hw_ao_choices,
                                IIRFilter)
from psi.controller.calibration.api import (chirp_sens, ChirpCalibrate,
                                            InterpCalibration,
                                            PointCalibration, tone_sens,
                                            ToneCalibrate)
from psi.core.enaml.api import DataFrameTable
from psi.data.plots import (ChannelPlot, FFTChannelPlot, FFTContainer,
                            TimeContainer, ViewBox)
from psi.data.sinks.api import BColzStore, DisplayValue, TextStore
from psi.token.api import Cos2Envelope, BandlimitedNoise


enamldef MicrophoneSignalViewMixinManifest(PluginManifest):

    id = 'microphone_signal_view_mixin'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'microphone_plot_container'
            label = 'Microphone signal'
            span = 10
            delay = 0.125

            ViewBox:
                name = 'microphone_view'
                y_min = -0.2
                y_max = 0.2

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'microphone'

            ViewBox:
                name = 'ttl_view'
                y_min = 0
                y_max = 5

                ChannelPlot:
                    pen_color = 'r'
                    pen_width = 2.5
                    source_name = 'ttl_monitor'
                    decimate_mode = 'mean'


enamldef MicrophoneFFTViewMixinManifest(PluginManifest): manifest:

    id = 'microphone_fft_view_mixin'

    Extension:
        id = manifest.id  + '.plots'
        point = 'psi.data.plots'

        FFTContainer:
            name = 'fft_plot_container'
            label = 'FFT'
            freq_lb = 5
            freq_ub = 50000

            ViewBox:
                y_min = -120
                y_max = 100

                FFTChannelPlot:
                    source_name = 'microphone'
                    pen_color = 'k'
                    time_span = 1


enamldef EEGViewMixinManifest(PluginManifest): manifest:

    id = 'eeg_view_mixin'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'trial_plot_container'
            label = 'Trial timing'
            span = 2
            delay = 0.125

            ViewBox:
                name = 'ecg_view'
                y_min = -0.2
                y_max = 0.2

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'eeg_filtered'


enamldef TemperatureMixinManifest(PluginManifest): manifest:

    id = 'temperature_mixin'

    Extension:
        id = 'temperature_data'
        point = 'psi.data.sinks'

        BColzStore:
            name = 'temperature_store'
            continuous_inputs = ['temperature']

        DisplayValue:
            name = 'temperature_display'
            label = 'Temperature'
            source_name = 'temperature_decimated'

    Extension:
        id = 'temperature_io'
        point = 'psi.controller.io'

        IIRFilter:
            source_name = 'temperature'
            f_lowpass = 0.5
            btype = 'lowpass'
            ftype = 'butter'
            N = 1

            Downsample:
                name = 'temperature_decimated'
                q = 50



enamldef CalibrationPlugin(PluginManifest): manifest:

    id = 'inear_calibration_mixin'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        Conditional:
            condition = manifest.tone_outputs is not None

            ExperimentAction:
                weight = 10
                event = 'experiment_prepare'
                command = 'psi.controller.tone_calibrate_channel'
                kwargs = {
                    'input_name': 'microphone',
                    'outputs': manifest.tone_outputs,
                    'gain': -40,
                    'max_thd': None,
                    'min_snr': 5,
                    'duration': 0.1,
                    'trim': 0.01,
                    'iti': 0,
                    'widget_name': 'calibration_result',
                    'attr_name': 'result',
                    'store_name': 'calibration_data',
                }

        Conditional:
            condition = manifest.chirp_outputs is not None

            ExperimentAction:
                weight = 10
                event = 'experiment_prepare'
                command = 'psi.controller.chirp_calibrate_channel'
                kwargs = {
                    'input_name': 'microphone',
                    'outputs': manifest.chirp_outputs,
                    'gain': -30,
                    'duration': 20e-3,
                    'iti': 1e-3,
                    'repetitions': 16,
                    'widget_name': 'calibration_result',
                    'attr_name': 'result',
                    'store_name': 'calibration_data',
                }


enamldef ABRInEarCalibrationMixinManifest(PluginManifest): manifest:

    id = 'abr_inear_calibration_mixin'

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = 'abr_tone_calibration'
            label = 'ABR tones'
            input_name = 'microphone'
            outputs = {'primary': ['target_tone_frequency']}
            gain = -40
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0


enamldef DPOAEInEarCalibrationMixinManifest(PluginManifest): manifest:

    id = 'abr_inear_calibration_mixin'

    attr C

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = 'dpoae_tone_calibration'
            label = 'DPOAE primaries'
            input_name = C.dpoae_microphone_channel
            outputs = {
                'primary': ['primary_tone_frequency'],
                'secondary': ['secondary_tone_frequency'],
            }
            gain = -40
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0


enamldef DPOAEInEarNoiseCalibrationMixinManifest(PluginManifest): manifest:

    id = 'dpoae_inear_noise_calibration_mixin'

    attr C

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ChirpCalibrate:
            name = 'elicitor_chirp_calibration'
            label = 'Elicitor calibration'
            input_name = C.elicitor_ai_channel
            outputs = ['elicitor']
            gain = -30
            duration = 20e-3
            iti = 1e-3
            repetitions = 16


enamldef DPOAETimeNoiseMixinManifest(PluginManifest): manifest:

    id = 'dpoae_time_noise_mixin'

    attr C

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

    Extension:
        id = manifest.id + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: noise:
            name = 'noise_burst'
            label = 'noise burst'
            BandlimitedNoise:
                pass

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        EpochOutput:
            name = 'elicitor'
            label = 'Elicitor settings'
            target_name = C.elicitor_ao_channel
            configurable = False
            token = noise

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'elicitor_timing'
            label = 'Elicitor timing'

            Parameter:
                name = 'elicitor_start'
                label = 'Elicitor start time (sec)'
                dtype = 'float'
                default = 5

            EnumParameter:
                name = 'elicitor_ao_channel'
                label = 'Elicitor speaker channel'
                choices = get_hw_ao_choices(manifest.workbench)
                scope = 'experiment'

            EnumParameter:
                name = 'elicitor_ai_channel'
                label = 'Elicitor microphone channel'
                choices = get_hw_ai_choices(manifest.workbench)
                scope = 'experiment'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_start'
            command = 'elicitor.start'
            kwargs = {'delay': 'elicitor_start'}
