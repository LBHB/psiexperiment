import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.ui.api import Branding

from psi.context.api import Parameter
from psi.controller.base_manifest import BaseManifest
from psi.controller.api import EpochOutput, ExperimentAction, ExperimentState
from psi.controller.input import (Downsample, IIRFilter, Threshold, Edges,
                                  CalibratedInput, RMS, SPL)

from psi.data.plots import (TimeContainer, ChannelPlot, FFTContainer,
                            FFTChannelPlot)


enamldef ControllerManifest(BaseManifest): manifest:

    id = 'psi.controller'

    Extension:
        id = 'branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title = 'Noise exposure'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        EpochOutput:
            name = 'exposure'
            label = 'Exposure'
            target_name = 'speaker'

        IIRFilter:
            source_name = 'microphone'
            btype = 'highpass'
            ftype = 'butter'
            N = 2
            f_highpass = 100
            name = 'filtered_microphone'
            RMS:
                duration = 1
                SPL:
                    name = 'noise_level'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100
        ExperimentState:
            # TODO: Automatically add states for epoch outputs?
            name = 'exposure'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.prepare_epoch_output'
            kwargs = {'output_name': 'exposure'}
        ExperimentAction:
            event = 'experiment_start'
            command = 'psi.controller.start_epoch_output'
            kwargs = {'output_name': 'exposure', 'start': 2}
        ExperimentAction:
            event = 'exposure_end'
            command = 'psi.controller.stop'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'trial_plot_container' 
            title = 'Trial timing'
            trig_delay = 0
            span = 600
            major_grid_index = 60
            minor_grid_index = 10

            ChannelPlot:
                source = 'noise_level'
                line_color = (0, 0, 0)
                value_range = (90, 120)
                axis_label = 'Noise level (dB SPL)' 

        FFTContainer:
            name = 'fft_plot_container'
            title = 'FFT'
            freq_lb = 0.1e3 
            freq_ub = 10e3

            FFTChannelPlot:
                source = 'filtered_microphone'
                line_color = (0, 0, 0)
                value_range = (0, 100)
                time_span = 1
                axis_label = 'Level (dB SPL)'
                reference = 20e-6
