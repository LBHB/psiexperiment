import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import Branding

from psi.controller.appetitive_manifest import AppetitiveManifest
from psi.controller.api import (ExperimentState, ExperimentAction,
                                ContinuousOutput, EpochOutput)

from psi.context.api import ContextGroup, Parameter
from psi.data.plots import (TimeContainer, ChannelPlot, TimeseriesPlot,
                            ExtremesChannelPlot, FFTContainer, FFTChannelPlot)


enamldef ControllerManifest(AppetitiveManifest): manifest:

    id = 'psi.controller'

    Extension:
        id = 'branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title = 'Appetitive Go-Nogo'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100
        
        # Experiment-level actions
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'background.prepare'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'pupil_camera.start'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'behavior_camera.start'

        ExperimentAction:
            event = 'experiment_start'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'experiment_end'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'experiment_end'
            command = 'pupil_camera.stop'

        ExperimentAction:
            event = 'experiment_end'
            command = 'behavior_camera.stop'

        # Trial-level actions
        ExperimentAction:
            # Since generating the token can be expensive in terms of
            # computation, prepare this in advance as soon as possible. 
            event = 'trial_prepare'
            command = 'target.prepare'

        ExperimentAction:
            # The operations required to actually generate and upload the token
            # take some time, so we have to allow for a small delay.
            event = 'trial_start'
            command = 'target.start'
            kwargs = {'delay': 0.25}

        ExperimentAction:
            event = 'trial_start'
            command = 'pupil_camera.capture_image'

        ExperimentAction:
            event = 'response_end'
            command = 'target.clear'
            kwargs = {'delay': 0.25}

        ExperimentAction:
            event = 'to_start'
            command = 'room_light_toggle.off'

        ExperimentAction:
            event = 'to_end'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'deliver_reward'
            command = 'food_dispenser.dispense_pellet'


    Extension:
        id = 'io'
        point = 'psi.controller.io'

        ContinuousOutput:
            name = 'background'
            label = 'Background'
            target_name = 'speaker'

        EpochOutput:
            name = 'target'
            label = 'Target'
            target_name = 'speaker'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        FFTContainer:
            name = 'fft_plot_container'
            title = 'FFT'
            freq_lb = 0.1e3 
            freq_ub = 10e3

            FFTChannelPlot:
                source = 'microphone'
                line_color = (0, 0, 0)
                value_range = (0, 100)
                time_span = 1
                axis_label = 'Level (dB SPL)'
                reference = 20e-6

        TimeContainer:
            name = 'trial_plot_container' 
            title = 'Trial timing'
            trig_delay = 0
            span = 20

            ChannelPlot:
                source = 'reward_contact_analog'
                line_color = (1, 0, 1)
                value_range = (-20, 6)

            ChannelPlot:
                source = 'nose_poke_analog'
                line_color = (0, 0, 1)
                value_range = (-20, 6)

            ExtremesChannelPlot:
               source = 'microphone'
               line_color = (0, 0, 0)
               value_range = (-1, 1)

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'reward_start'
                falling_event = 'reward_end'
                fill_color = (0.25, 0.41, 0.88, 0.25)
                line_color = (0.25, 0.41, 0.88, 0.5)
                rect_center = 0.25
                rect_height = 0.2

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'np_start'
                falling_event = 'np_end'
                fill_color = (.17, .54, .34, 0.25)
                line_color = (.17, .54, .34, 0.5)
                rect_center = 0.5
                rect_height = 0.2

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'digital_np_start'
                falling_event = 'digital_np_end'
                fill_color = (.17, .54, .34, 0.25)
                line_color = (.17, .54, .34, 0.5)
                rect_center = 0.5
                rect_height = 0.1

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'token_start'
                falling_event = 'token_stop'
                fill_color = (.5, .5, .5, 0.25)
                line_color = (.5, .5, .5, 0.5)
                rect_center = 0.7
                rect_height = 0.1

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'hold_start'
                falling_event = 'hold_end'
                fill_color = (.75, .75, .75, 0.25)
                line_color = (.75, .75, .75, 0.5)
                rect_center = 0.8
                rect_height = 0.1

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'response_start'
                falling_event = 'response_end'
                fill_color = (.5, .5, .5, 0.25)
                line_color = (.5, .5, .5, 0.5)
                rect_center = 0.8
                rect_height = 0.1

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'to_start'
                falling_event = 'to_end'
                fill_color = (.25, .25, .25, 0.25)
                line_color = (.25, .25, .25, 0.5)
                rect_center = 0.8
                rect_height = 0.1

            TimeseriesPlot:
                source = 'event_log'
                rising_event = 'iti_start'
                falling_event = 'iti_end'
                fill_color = (0, 0, 0, 0.25)
                line_color = (0, 0, 0, 0.5)
                rect_center = 0.8
                rect_height = 0.1
