import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.workbench.api import Extension


from psi.controller.api import (CalibratedInput, ContinuousOutput, EpochOutput,
                                ExperimentAction, IIRFilter)
from psi.data.plots import (EventPlot, FFTContainer, FFTChannelPlot, TimeContainer,
                            ChannelPlot, ViewBox, TimeseriesPlot)
from psi.token.primitives import (BandlimitedNoise, Cos2Envelope, SAMEnvelope,
                                  Silence)
from .behavior_base import BehaviorManifest


enamldef ControllerManifest(BehaviorManifest): manifest:

    id = 'psi.controller'
    window_title = 'Appetitive Go-Nogo'

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Silence:
            name = 'silence'
            label = 'Silence'

        BandlimitedNoise:
            name = 'continuous_bandlimited_noise'
            label = 'Continuous bandlimited noise'

        Cos2Envelope:
            name = 'bandlimited_sam_noise'
            label = 'Bandlimited SAM noise'
            SAMEnvelope:
                BandlimitedNoise:
                    pass

        Cos2Envelope:
            name = 'bandlimited_sam_silence'
            label = 'Bandlimited SAM silence'
            SAMEnvelope:
                Silence:
                    pass

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'background.start'

        ExperimentAction:
            event = 'experiment_start'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'experiment_end'
            command = 'room_light_toggle.on'

        # Trial-level actions
        ExperimentAction:
            # Since generating the token can be expensive in terms of
            # computation, prepare this in advance as soon as possible. 
            event = 'experiment_prepare or trial_prepare'
            command = 'target.prepare'
            kwargs = {'cache': True}

        ExperimentAction:
            # The operations required to actually generate and upload the token
            # take some time, so we have to allow for a small delay.
            event = 'trial_start'
            command = 'target.start'
            kwargs = {'delay': 0.25}
            weight = 0

        ExperimentAction:
            event = 'response_end'
            command = 'target.clear'
            kwargs = {'delay': 0.25}
            weight = 0

        ExperimentAction:
            event = 'to_start'
            command = 'room_light_toggle.off'

        ExperimentAction:
            event = 'to_end'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'deliver_reward'
            command = 'food_dispenser.dispense_pellet'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        CalibratedInput:
            source_name = 'microphone'

            IIRFilter:
                f_lowpass = 40e3
                f_highpass = 200
                name = 'microphone_filtered'

        ContinuousOutput:
            name = 'background'
            label = 'Background'
            target_name = 'speaker'

        EpochOutput:
            name = 'target'
            label = 'Target'
            target_name = 'speaker'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        FFTContainer:
            name = 'microphone_fft_container'
            label = 'Microphone FFT'
            freq_lb = 5
            freq_ub = 50000

            ViewBox:
                y_min = -120
                y_max = 100

                FFTChannelPlot:
                    source_name = 'microphone_filtered'
                    pen_color = 'k'
                    time_span = 1

        TimeContainer:
            name = 'trial_plot_container'
            label = 'Trial timing'
            span = 10

            ViewBox:
                y_min = -1
                y_max = 1

                ChannelPlot:
                    source_name = 'microphone_filtered'
                    pen_color = 'k'

            ViewBox:
                y_min = 0
                y_max = 5

                ChannelPlot:
                    source_name = 'reward_contact_analog'
                    pen_color = 'blue'

                ChannelPlot:
                    source_name = 'nose_poke_analog'
                    pen_color = 'orange'
