import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import Branding

from psi.controller.appetitive_manifest import AppetitiveManifest
from psi.controller.api import (ExperimentState, ExperimentAction,
                                ContinuousOutput, EpochOutput)

from psi.context.api import ContextGroup, Parameter
from psi.data.plots import (TimeContainer, FFTContainer, ChannelPlot, ViewBox, TimeseriesPlot, FFTChannelPlot)

from psi.data.sinks.event_log import EventLog
from psi.data.sinks.trial_log import TrialLog
from psi.data.sinks.sdt_analysis import SDTAnalysis


enamldef ControllerManifest(AppetitiveManifest): manifest:

    id = 'psi.controller'

    Extension:
        id = 'branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title = 'Appetitive Go-Nogo'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        # Experiment-level actions
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'background.prepare'

        ExperimentAction:
            event = 'experiment_start'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'experiment_end'
            command = 'room_light_toggle.on'

        # Trial-level actions
        ExperimentAction:
            # Since generating the token can be expensive in terms of
            # computation, prepare this in advance as soon as possible. 
            event = 'trial_prepare'
            command = 'target.prepare'

        ExperimentAction:
            # The operations required to actually generate and upload the token
            # take some time, so we have to allow for a small delay.
            event = 'trial_start'
            command = 'target.start'
            kwargs = {'delay': 0.5}
            #concurrent = True
            weight = 0

        ExperimentAction:
            event = 'response_end'
            command = 'target.clear'
            kwargs = {'delay': 0.5}
            #concurrent = True
            weight = 0

        ExperimentAction:
            event = 'to_start'
            command = 'room_light_toggle.off'

        ExperimentAction:
            event = 'to_end'
            command = 'room_light_toggle.on'

        ExperimentAction:
            event = 'deliver_reward'
            command = 'food_dispenser.dispense_pellet'


    Extension:
        id = 'io'
        point = 'psi.controller.io'

        ContinuousOutput:
            name = 'background'
            label = 'Background'
            target_name = 'speaker'

        EpochOutput:
            name = 'target'
            label = 'Target'
            target_name = 'speaker'

    Extension:
        id = 'sinks'
        point = 'psi.data.sinks'

        SDTAnalysis:
            pass

        TrialLog:
            pass

        EventLog:
            pass

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        #FFTContainer:
        #    name = 'fft_plot_container'
        #    title = 'FFT'
        #    freq_lb = 5
        #    freq_ub = 50000

        #    ViewBox:
        #        y_min = -120
        #        y_max = 100

        #        FFTChannelPlot:
        #            source_name = 'calibrated_microphone'
        #            pen_color = (0, 0, 0)
        #            time_span = 1
        #            #axis_label = 'Level (dB SPL)'
        #            #reference = 20e-6

        TimeContainer:
            name = 'trial_plot_container' 
            title = 'Trial timing'
            span = 10

            ViewBox:
                y_min = 0
                y_max = 5

                ChannelPlot:
                    name = 'plot1'
                    source_name = 'reward_contact_analog'
                    pen_color = 'b'

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'reward_start'
                    falling_event = 'reward_end'
                    pen_color = (64, 105, 224, 113)
                    fill_color = (64, 105, 224, 68)
                    rect_center = 2.5
                    rect_height = 1

                ChannelPlot:
                    name = 'plot2'
                    source_name = 'nose_poke_analog'
                    pen_color = 'r'

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'np_start'
                    falling_event = 'np_end'
                    fill_color = (43, 138, 87, 68)
                    pen_color = (43, 138, 87, 113)
                    rect_center = 2.5
                    rect_height = 1

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'digital_np_start'
                    falling_event = 'digital_np_end'
                    fill_color = (43, 138, 87, 68)
                    pen_color = (43, 138, 87, 113)
                    rect_center = 2.5
                    rect_height = 1

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'token_start'
                    falling_event = 'token_stop'
                    pen_color = (113, 113, 113, 113)
                    fill_color = (113, 113, 113, 68)
                    rect_center = 3.5
                    rect_height = 1

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'hold_start'
                    falling_event = 'hold_end'
                    pen_color = (192, 192, 192, 113)
                    fill_color = (192, 192, 192, 68)
                    rect_center = 4.5
                    rect_height = 1

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'response_start'
                    falling_event = 'response_end'
                    pen_color = (113, 113, 113, 113)
                    fill_color = (113, 113, 113, 68)
                    rect_center = 4.5
                    rect_height = 1

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'to_start'
                    falling_event = 'to_end'
                    fill_color = (64, 64, 64, 68)
                    pen_color = (64, 64, 64, 113)
                    rect_center = 4.5
                    rect_height = 1

                TimeseriesPlot:
                    source_name = 'event_log'
                    rising_event = 'iti_start'
                    falling_event = 'iti_end'
                    fill_color = (0, 0, 0, 68)
                    pen_color = (0, 0, 0, 113)
                    rect_center = 4.5
                    rect_height = 1

            ViewBox:
                y_min = -1
                y_max = 1

                ChannelPlot:
                    name = 'plot3'
                    source_name = 'microphone'
                    pen_color = 'k'
