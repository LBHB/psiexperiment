from functools import partial

import numpy as np

from enaml.widgets.api import DockItem, Container
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.core.api import Command

from psi.core.enaml.api import DataFrameTable
from psi.context.api import (ContextGroup, Parameter, BoolParameter, EnumParameter)
from psi.context.context_item import OrderedContextMeta
from psi.context.selector import CartesianProduct
from psi.controller import queue
from psi.controller.api import ExperimentAction
from psi.controller.api import (ContinuousInput, ControllerManifest,
                                ExtractEpochs, RejectEpochs, IIRFilter, Input,
                                Detrend)
from psi.controller.output import QueuedEpochOutput
from psi.controller.calibration.util import db
from psi.data.plots import (MultiPlotContainer, StackedEpochAveragePlot,
                            TimeContainer, ViewBox, StackedEpochAveragePlot)
from psi.data.sinks.epoch_counter import GroupedEpochCounter
from psi.data.sinks.bcolz_store import BColzStore
from psi.token.primitives import Cos2Envelope, Tone


def configure_experiment(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')

    ordering = context.get_value('ordering')
    alternate_polarity = context.get_value('alternate_polarity')
    tone_duration = context.get_value('target_tone_burst_duration')
    rate = context.get_value('rate')
    averages = context.get_value('averages')

    if alternate_polarity and (averages % 2):
        # Round to the nearest multiple of 2
        averages = (round(averages/2) + 1) * 2

    # Compensate for the tone duration. ITI is the time from tone offset to
    # tone offset.
    iti = 1/rate - tone_duration
    if iti <= 0:
        raise ValueError('Repetition rate is too fast')

    target = controller.get_output('target')

    # Configure the queues
    if ordering == 'interleaved':
        target.queue = queue.InterleavedFIFOSignalQueue()
    elif ordering == 'sequential':
        if alternate_polarity:
            target.queue = queue.GroupedFIFOSignalQueue(group_size=2)
        else:
            target.queue = queue.FIFOSignalQueue()
    elif ordering == 'random':
        target.queue = queue.BlockedRandomSignalQueue()
    else:
        raise ValueError('Unrecognized ordering {}'.format(ordering))

    if not alternate_polarity:
        for setting in context.iter_settings('default', 1):
            target.add_setting(setting, averages, iti)
    elif ordering == 'interleaved':
        for setting in context.iter_settings('default', 1):
            setting['target_tone_polarity'] = 1
            target.add_setting(setting, averages/2, iti)
        for setting in context.iter_settings('default', 1):
            setting['target_tone_polarity'] = -1
            target.add_setting(setting, averages/2, iti)
    elif ordering in ('sequential', 'random'):
        for setting in context.iter_settings('default', 1):
            setting['target_tone_polarity'] = 1
            target.add_setting(setting, averages/2, iti)
            setting['target_tone_polarity'] = -1
            target.add_setting(setting, averages/2, iti)
    else:
        raise ValueError('Unrecognized ordering {}'.format(ordering))

    # Now, identify the maximum level on a per-frequency setting
    max_level = {}
    for setting in context.iter_settings('default', 1):
        frequency = setting['target_tone_frequency']
        level = setting['target_tone_level']
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = target.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01
    target.channel.expected_range = (-max_sf, max_sf)

    action_name = target.name + '_end'
    target.complete_cb = partial(controller.invoke_actions, action_name)


enamldef ABRManifest(ControllerManifest): manifest:

    Extension:
        id = 'abr_base_text_store'
        point = 'psi.data.sinks'

        BColzStore:
            name = 'erp_eeg'
            epoch_inputs = ['erp']
            continuous_inputs = ['eeg']

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: tone_burst:
            name = 'tone_burst'
            label = 'tone'
            hide = ['start_time']
            Tone:
                hide = ['polarity', 'phase']

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        QueuedEpochOutput: output:
            name = 'target'
            label = 'Target'
            token = tone_burst
            configurable = False
            target_name = C.output_channel
            queue ::
                self.connect(extract.queue.append)

        ContinuousInput:
            name = 'microphone'
            source_name = 'microphone_channel'

        Input:
            source_name = 'eeg_channel'
            name = 'eeg'

            IIRFilter:
                name = 'eeg_filtered'
                N = 2
                btype = 'bandpass'
                ftype = 'butter'
                source_name = 'eeg_channel'
                passthrough = not C.digital_filter
                f_highpass = C.digital_highpass
                f_lowpass = C.digital_lowpass

                ExtractEpochs: extract:
                    name = 'erp'
                    epoch_size = 8.5e-3

                    Detrend:
                        name = 'erp_detrend'
                        mode = C.detrend_mode

                        RejectEpochs:
                            name = 'valid_erp'
                            threshold = C.reject_threshold
                            mode = C.reject_mode

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'abr'
            label = 'ABR settings'

            EnumParameter:
                name = 'detrend_mode'
                label = 'Detrend mode'
                choices = {
                    'None': 'None',
                    'constant': '"constant"',
                    'linear': '"linear"',
                }
                default = 'None'
                scope = 'experiment'

            EnumParameter:
                name = 'reject_mode'
                label = 'Reject mode'
                compact_label = 'Rej. mode'
                choices = {
                    'absolute value': '"absolute value"',
                    'amplitude (max-min)': '"amplitude"',
                }
                default = 'absolute value'
                scope = 'experiment'

            Parameter:
                name = 'reject_threshold'
                label = 'Reject threshold'
                compact_label = 'Th'
                default = 2.5
                scope = 'experiment'

            Parameter:
                name = 'averages'
                label = 'Averages'
                default = 512
                scope = 'experiment'

            Parameter:
                name = 'rate'
                label = 'Reps. per sec.'
                default = 80
                scope = 'experiment'

            BoolParameter:
                name = 'alternate_polarity'
                label = 'Alternate polarity?'
                default = True
                scope = 'experiment'

            EnumParameter:
                name = 'ordering'
                label = 'Stimulus ordering'
                choices = {
                    'interleaved': '"interleaved"',
                    'sequential': '"sequential"',
                    'random': '"random"',
                }
                scope = 'experiment'

        ContextGroup:
            name = 'digital_filter'
            label = 'Digital filter settings'

            BoolParameter:
                name = 'digital_filter'
                label = 'Digital filter?'
                scope = 'experiment'
                default = True

            Parameter:
                name = 'digital_highpass'
                label = 'Digital highpass filter cutoff'
                default = 300
                scope = 'experiment'

            Parameter:
                name = 'digital_lowpass'
                label = 'Digital lowpass filter cutoff'
                default = 3000
                scope = 'experiment'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware settings'

            EnumParameter:
                name = 'output_channel'
                label = 'Output channel'
                compact_label = 'ao'
                choices = manifest.get_hw_ao_choices()
                selected = next(iter(manifest.get_hw_ao_choices()))
                scope = 'experiment'

            Parameter:
                name = 'amplifier_highpass'
                label = 'Amplifier highpass filter cutoff'
                default = 10
                scope = 'experiment'

            Parameter:
                name = 'amplifier_lowpass'
                label = 'Amplifier lowpass filter cutoff'
                default = 10e3
                scope = 'experiment'

            Parameter:
                name = 'amplifier_gain'
                label = 'Amplifier gain'
                default = 100e3
                scope = 'experiment'

        OrderedContextMeta: epoch_groups:
            name = 'settings'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'ABR sequence'

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_experiment'
            handler = configure_experiment

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            event = 'valid_erp_acquired'
            command = 'target.decrement_key'

        ExperimentAction:
            event = 'target_end'
            command = 'psi.controller.stop'

    Extension:
        id = 'sink'
        point = 'psi.data.sinks'

        GroupedEpochCounter:
            name = 'valid_erp_counter'
            label = 'Valid ERPs acquired'
            source_name = 'valid_erp'
            groups << epoch_groups

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        MultiPlotContainer: mc:
            name = 'abr_results'
            label = 'ABR waveforms'
            group = 'target_tone_frequency'

            TimeContainer:
                name = 'erp_container'
                label = 'ERP average'
                span = 8.5e-3

                ViewBox:
                    y_min = -5
                    y_max = 5
                    label = 'Signal (V) {}'.format(loop_item)

                    StackedEpochAveragePlot:
                        label = 'ERP average plot'
                        source_name = 'valid_erp'
                        n_update = 8
                        group_filter = lambda key: key['target_tone_frequency'] == loop_item
                        pen_width = 2
                        groups << epoch_groups
