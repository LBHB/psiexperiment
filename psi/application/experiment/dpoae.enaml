import logging
log = logging.getLogger(__name__)

from functools import partial


import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.calibration.util import tone_power_conv_nf
from psi.context.api import ContextGroup, Parameter, Result
from psi.context.selector import CartesianProduct

from psi.controller.api import ExperimentAction
from psi.controller.base_manifest import BaseManifest
from psi.controller.base_plugin import BasePlugin
from psi.controller.input import ExtractEpochs, Accumulate, IIRFilter, Decimate, Blocked, ContinuousInput, IIRFilter, Capture, Callback, Discard, accumulate
from psi.controller.output import EpochOutput, Synchronized
from psi.token.primitives import Cos2Envelope, Tone

from psi.data.plots import ViewBox, PlotContainer


def process_fft(fs, calibration, workbench, raw_data):
    context = workbench.get_plugin('psi.context')
    controller = workbench.get_plugin('psi.controller')
    core = workbench.get_plugin('enaml.workbench.core')

    results = {}
    f1 = context.get_value('primary_tone_frequency')
    f2 = context.get_value('secondary_tone_frequency')
    dpoae = 2 * f1 - f2
    data = np.mean(raw_data, axis=-1)

    for f in (f1, f2, dpoae):
        nf_rms, f_rms = tone_power_conv_nf(data, fs, f)
        nf_spl, f_spl = calibration.get_spl(f, [nf_rms.mean(), f_rms.mean()])
        results[f] = { 'nf_spl': nf_spl, 'spl': f_spl, }

    context.next_setting('default')
    ts = controller.get_ts()
    core.invoke_command('dpoae_capture.end')
    core.invoke_command('dpoae.clear', {'timestamp': ts, 'delay': 1.0})
    core.invoke_command('dpoae.start', {'timestamp': ts, 'delay': 1.0})


def process_time(fs, calibration, context, target, raw_data):
    '''
    Accept data if DPOAE amplitude is greater than the noise floor or the noise
    floor is less than the specified value.
    '''
    f1 = context.get_value('primary_tone_frequency')
    f2 = context.get_value('secondary_tone_frequency')
    noise_floor = context.get_value('dpoae_noise_floor')
    dpoae = 2 * f2 - f1

    data = raw_data.mean(axis=0)
    nf_rms, dp_rms = tone_power_conv_nf(data, fs, dpoae)
    nf_spl, dp_spl = calibration.get_spl(dpoae, [nf_rms, dp_rms])
    log.debug('DPOAE reject: DPOAE %.2f, noise floor %.2f', dp_spl, nf_spl)
    if (nf_spl < noise_floor) or (nf_spl < dp_spl):
        target(raw_data)


def configure_hardware(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')

    resp_window = context.get_value('response_window')
    n_time = context.get_value('n_time')
    n_fft = context.get_value('n_fft')
    discard = context.get_value('secondary_tone_rise_time')*2

    controller.set_input_attr('discard', 'duration', discard)
    controller.set_input_attr('segment', 'duration', resp_window)
    controller.set_input_attr('segments', 'n', n_time)

    input = controller.get_input('segments')
    cb_fft = partial(process_fft, input.fs, input.calibration, event.workbench)
    target = accumulate(n_fft, 0, True, cb_fft)
    cb_time = partial(process_time, input.fs, input.calibration, context, target.send)
    input.add_callback(cb_time)


enamldef ControllerManifest(BaseManifest): manifest:

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: tone:
            name = 'tone'
            label = 'tone'
            Tone:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        Synchronized:
            name = 'dpoae'

            EpochOutput: primary:
                name = 'primary'
                label = 'Primary'
                target_name = 'speaker_0'
                configurable = False
                token = tone

            EpochOutput: secondary:
                name = 'secondary'
                label = 'Secondary'
                target_name = 'speaker_1'
                configurable = False
                token = tone

        ContinuousInput:
            name = 'microphone'
            source_name = 'microphone_channel'

            IIRFilter:
                name = 'microphone_filtered'
                N = 2
                btype = 'highpass'
                ftype = 'butter'
                f_highpass = 100

                Blocked:
                    duration = 0.125

                    Capture:
                        name = 'dpoae_capture'

                        Discard:
                            name = 'discard'

                            Blocked:
                                # Duration (in seconds) of snippets to analyze
                                name = 'segment'

                                Accumulate:
                                    # Number of time segments to accumulate and
                                    # average for a single FFT.
                                    name = 'segments'
                                    axis = 0
                                    newaxis = True

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'DPOAE'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'dpoae'
            label = 'DPOAE settings'

            Parameter:
                name = 'n_fft'
                label = 'Spectrum avg. (decr. variablity)'
                compact_label = 'N FFT'
                default = 8

            Parameter:
                name = 'n_time'
                label = 'Time avg. (decr. noise floor)'
                compact_label = 'N time'
                default = 16

            Parameter:
                name = 'dpoae_noise_floor'
                label = 'DPOAE noise floor (db SPL)'
                compact_label = 'DPOAE NF'
                dtype = 'float'
                default = 0.0

            Parameter:
                name = 'response_window'
                label = 'Response window (sec)'
                compact_label = 'Resp. Window'
                dtype = 'float'
                default = 100e-3

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_hardware'
            handler = configure_hardware

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.context.next_setting'
            weight = 6
            kwargs = {'selector': 'default'}

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_hardware'
            weight = 9

        ExperimentAction:
            event = 'engines_configured'
            command = 'dpoae.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            event = 'dpoae_start'
            command = 'dpoae_capture.start'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        PlotContainer:
            name = 'results_plot_container'
            label = 'Results'

            ViewBox:
                pass
