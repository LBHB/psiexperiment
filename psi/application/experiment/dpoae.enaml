import logging
log = logging.getLogger(__name__)

from functools import partial


import numpy as np

from enaml.application import deferred_call
from enaml.widgets.api import Container, DockItem, Form, Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.calibration.util import tone_power_conv_nf
from psi.context.api import ContextGroup, Parameter, Result
from psi.context.selector import CartesianProduct

from psi.controller.api import ExperimentAction
from psi.controller.base_manifest import BaseManifest
from psi.controller.base_plugin import BasePlugin
from psi.controller.input import (Accumulate, Blocked, Capture,
                                  ContinuousInput, CustomInput, IIRFilter,
                                  Callback, Discard)

from psi.controller.output import EpochOutput, Synchronized
from psi.token.primitives import Cos2Envelope, Tone

from psi.data.plots import ViewBox, PlotContainer, ListPlot


def process_fft(input, context, controller, core, raw_data, target):
    results = {}
    f1 = context.get_value('primary_tone_frequency')
    f2 = context.get_value('secondary_tone_frequency')
    dpoae = 2 * f1 - f2
    data = np.mean(raw_data, axis=-2)

    for label, freq in zip(('f1', 'f2', 'dpoae'), (f1, f2, dpoae)):
        nf_rms, f_rms = tone_power_conv_nf(data, input.fs, freq)
        nf_spl = input.calibration.get_spl(freq, nf_rms.mean())
        f_spl = input.calibration.get_spl(freq, f_rms.mean())
        results[label + '_spl'] = f_spl
        results[label + '_noise_floor'] = nf_spl
        results[label + '_frequency'] = freq

    target(results)
    #plot.append_data(data)

    # In the for loop above the last one is dpoae, so this will be set to DPOAE
    # noise floor.
    #deferred_call(setattr, status_widget, 'dpoae_nf', nf_spl)

    context.next_setting('default')
    core.invoke_command('dpoae_capture.end')
    ts = controller.get_ts()
    core.invoke_command('dpoae.clear', {'timestamp': ts, 'delay': 1.0})
    core.invoke_command('dpoae.start', {'timestamp': ts, 'delay': 1.0})


def process_time(input, context, raw_data, target):
    '''
    Accept data if DPOAE amplitude is greater than the noise floor or the noise
    floor is less than the specified value.
    '''
    f1 = context.get_value('primary_tone_frequency')
    f2 = context.get_value('secondary_tone_frequency')
    noise_floor = context.get_value('dpoae_noise_floor')
    dpoae = 2 * f2 - f1

    data = raw_data.mean(axis=0)
    nf_rms, dp_rms = tone_power_conv_nf(data, input.fs, dpoae)
    nf_spl, dp_spl = input.calibration.get_spl(dpoae, [nf_rms, dp_rms])
    if (nf_spl < noise_floor) or (nf_spl < dp_spl):
        target(raw_data)
    else:
        log.debug('DPOAE reject: DPOAE %.2f, noise floor %.2f', dp_spl, nf_spl)


def configure_hardware(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')

    resp_window = context.get_value('response_window')
    n_time = context.get_value('n_time')
    n_fft = context.get_value('n_fft')
    discard = context.get_value('secondary_tone_rise_time')*2

    controller.set_input_attr('discard', 'duration', discard)
    controller.set_input_attr('segment', 'duration', resp_window)
    controller.set_input_attr('time_segments', 'n', n_time)
    controller.set_input_attr('fft_segments', 'n', n_fft)

    #data = event.workbench.get_plugin('psi.data')
    #plot = data.find_plot('results_plot')

    ui = event.workbench.get_plugin('enaml.workbench.ui')
    sw = ui.window.find('dpoae_status')
    status_fft = lambda x, w=sw: deferred_call(setattr, w, 'n_fft', x)
    status_time = lambda x, w=sw: deferred_call(setattr, w, 'n_time', x)
    controller.set_input_attr('time_segments', 'status_cb', status_time)
    controller.set_input_attr('fft_segments', 'status_cb', status_fft)


enamldef ControllerManifest(BaseManifest): manifest:

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: tone:
            name = 'tone'
            label = 'tone'
            Tone:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        Synchronized:
            name = 'dpoae'

            EpochOutput: primary:
                name = 'primary'
                label = 'Primary'
                target_name = 'speaker_0'
                configurable = False
                token = tone

            EpochOutput: secondary:
                name = 'secondary'
                label = 'Secondary'
                target_name = 'speaker_1'
                configurable = False
                token = tone

        ContinuousInput:
            name = 'microphone'
            source_name = 'microphone_channel'

            IIRFilter:
                name = 'microphone_filtered'
                N = 2
                btype = 'highpass'
                ftype = 'butter'
                f_highpass = 100

                Capture:
                    # Begin capturing microphone signal once DPOAE starts.
                    # Linked using an ExperimentAction.
                    name = 'dpoae_capture'

                    Discard:
                        # Discard the onset portion of the DPOAE (set in
                        # configure_hardware).
                        name = 'discard'

                        Blocked:
                            # Duration (in seconds) of snippets to analyze
                            # (set in configure_hardware)
                            name = 'segment'

                            Accumulate:
                                # Number of time segments to accumulate and
                                # average for a single FFT (set in
                                # configure_hardware).
                                name = 'time_segments'
                                axis = 0
                                newaxis = True

                                CustomInput:
                                    # Accepts set of time segments if they
                                    # don't exceed the DPOAE noise floor.
                                    function = partial(process_time,
                                                        self,
                                                        workbench.get_plugin('psi.context'))

                                    Accumulate:
                                        # Number of FFT segments to
                                        # accumulate and average for a
                                        # single FFT (set in
                                        # configure_hardware).
                                        name = 'fft_segments'
                                        axis = 0
                                        newaxis = True

                                        CustomInput:
                                            # Computes the average level
                                            # for the primaries and
                                            # distortion products.
                                            function = partial(process_fft,
                                                               self,
                                                               workbench.get_plugin('psi.context'),
                                                               workbench.get_plugin('psi.controller'),
                                                               workbench.get_plugin('enaml.workbench.core'))

                                            Callback:
                                                function = print

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'DPOAE'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'dpoae'
            label = 'DPOAE settings'

            Parameter:
                name = 'n_fft'
                label = 'Spectrum avg. (decr. variablity)'
                compact_label = 'N FFT'
                default = 8

            Parameter:
                name = 'n_time'
                label = 'Time avg. (decr. noise floor)'
                compact_label = 'N time'
                default = 16

            Parameter:
                name = 'dpoae_noise_floor'
                label = 'DPOAE noise floor (db SPL)'
                compact_label = 'DPOAE NF'
                dtype = 'float'
                default = 0.0

            Parameter:
                name = 'response_window'
                label = 'Response window (sec)'
                compact_label = 'Resp. Window'
                dtype = 'float'
                default = 100e-3

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_hardware'
            handler = configure_hardware

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.context.next_setting'
            weight = 6
            kwargs = {'selector': 'default', 'save_prior': False}

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_hardware'
            weight = 9

        ExperimentAction:
            event = 'engines_configured'
            command = 'dpoae.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            event = 'dpoae_start'
            command = 'dpoae_capture.start'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        PlotContainer:
            name = 'results_plot_container'
            label = 'Results'

            ViewBox:
                pass
                #ListPlot:
                #    y_column = 'dpoae_level'
                #    #group_names = ['f2_frequency']
                #    name = 'results_plot'

    Extension:
        id = 'dpoae_status_view'
        point = 'psi.experiment.workspace'

        DockItem: di:
            name = 'dpoae_status'
            title = 'Acquisition'

            attr n_fft = 0
            attr n_time = 0
            attr dpoae_nf = 0

            Container:
                Form:
                    Label:
                        text = 'status'

                    Label:
                        text << '{} time, {} FFT'.format(n_time, n_fft)

                    Label:
                        text = 'DPOAE noise floor'

                    Label:
                        text << '{:.2f} dB SPL'.format(dpoae_nf)
