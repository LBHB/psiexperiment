import logging
log = logging.getLogger(__name__)


import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context import choice
from psi.context.api import ContextGroup, Parameter, Result
from psi.context.selector import CartesianProduct

from psi.controller.api import ExperimentAction
from psi.controller.base_manifest import BaseManifest
from psi.controller.base_plugin import BasePlugin
from psi.controller.input import ExtractEpochs, Accumulate, IIRFilter, Decimate, Blocked, ContinuousInput, IIRFilter, Capture
from psi.controller.output import EpochOutput, Synchronized
from psi.token.primitives import Cos2Envelope, Tone

from psi.util import copy_declarative

from psi.data.plots import (TimeContainer, ViewBox, ChannelPlot, FFTContainer,
                            FFTChannelPlot)

from psi.data.sinks.trial_log import TrialLog


def dp_freq(start, end, octave_spacing, period, c=1):
    frequencies = expr.octave_space(start, end, octave_spacing)
    frequencies = expr.imul(frequencies, period)
    return choice.ascending(frequencies, c=c)


def dpoae_analyze(waveforms, fs, frequencies, mic_cal, window=None):
    results = {}
    for f in frequencies:
        nf_rms, f_rms = tone_power_conv_nf(waveforms, fs, f, window=window)
        nf_spl, f_spl = mic_cal.get_spl(f, [nf_rms.mean(), f_rms.mean()])
        results[f] = nf_spl, f_spl
    return results


def dpoae_reject(fs, dpoae, mic_cal, noise_floor, target):
    '''
    Accept data if DPOAE amplitude is greater than the noise floor or the noise
    floor is less than the specified value.
    '''
    while True:
        raw_data = (yield)
        data = raw_data.mean(axis=0)[0]
        nf_rms, dp_rms = tone_power_conv_nf(data, fs, dpoae)
        nf_spl, dp_spl = mic_cal.get_spl(dpoae, [nf_rms, dp_rms])
        log.debug('DPOAE reject: DPOAE %.2f, noise floor %.2f', dp_spl, nf_spl)
        if (nf_spl < noise_floor) or (nf_spl < dp_spl):
            target.send(raw_data)


def overlap(fraction, target):
    data = (yield)
    shape = data.shape
    samples = shape[-1]
    skip_samples = int(samples*fraction)
    while True:
        while data.shape[-1] >= samples:
            target.send(data[..., :samples])
            data = data[..., skip_samples:]
        new_data = (yield)
        data = np.concatenate((data, new_data), axis=-1)


def discard_first(target):
    # Nothing happens because we're discarding the first one ...
    data = (yield)
    while True:
        data = (yield)
        target.send(data)


#pipeline = create_pipeline(
#    accumulate_epoch,
#    discard_first,
#    broadcast(
#        count_epochs,
#        create_pipeline(
#            accumulate_time,
#            screen_epoch,
#            save_epoch
#        )
#    )
#)

#class AnalyzeDPOAE(EpochInput):
#
#    def configure_callback(self, plugin):
#        pass


def process_microphone_segment(event):
    controller = event.workbench.get_plugin('psi.controller')
    controller.segment_acquired(event.parameters)


class DPOAEController(BasePlugin):

    def start_experiment(self):
        super().start_experiment()

        self.context.next_setting(save_prior=False)
        resp_window = self.context.get_value('response_window')
        n_fft = self.context.get_value('n_fft')
        n_time = self.context.get_value('n_time')
        dp_nf = self.context.get_value('dpoae_noise_floor')

        #self.set_input_attr('microphone_segment', 'duration', resp_window)
        #self.set_input_attr('time_segments', 'n', n_time)

        self.core.invoke_command('dpoae.prepare')

        parameters = {'timestamp': self.get_ts(), 'delay': 0.5}
        self.core.invoke_command('dpoae.start', parameters=parameters)

    def segment_acquired(self, segment):
        epoch = segment['data']


enamldef ControllerManifest(BaseManifest): manifest:

    factory = DPOAEController

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Cos2Envelope:
            name = 'tone'
            label = 'tone'
            Tone:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        Synchronized:
            name = 'dpoae'

            EpochOutput: primary:
                name = 'primary'
                label = 'Primary'
                target_name = 'speaker_0'

            EpochOutput: secondary:
                name = 'secondary'
                label = 'Secondary'
                target_name = 'speaker_1'

        ContinuousInput:
            name = 'microphone'
            source_name = 'microphone_channel'

            Blocked:
                name = 'prefilter'
                duration = 0.25

                IIRFilter:
                    name = 'microphone_filtered'
                    N = 2
                    btype = 'highpass'
                    ftype = 'butter'
                    f_highpass = 100
                    save = True

            #Capture:
            #    name = 'dpoae_capture'
            #    # Capture starting at epoch start

            #    Blocked:
            #        # Duration (in seconds) of snippets to analyze
            #        name = 'microphone_segment'
            #        save = True

            #        Accumulate:
            #            # Number of time segments to accumulate and average for
            #            # DPOAE analysis.
            #            name = 'time_segments'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'DPOAE'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'dpoae'
            label = 'DPOAE settings'

            Parameter:
                name = 'n_fft'
                label = 'Spectrum avg. (decr. variablity)'
                compact_label = 'N FFT'
                default = 8

            Parameter:
                name = 'n_time'
                label = 'Time avg. (decr. noise floor)'
                compact_label = 'N time'
                default = 16

            Parameter:
                name = 'dpoae_noise_floor'
                label = 'DPOAE noise floor (db SPL)'
                compact_label = 'DPOAE NF'
                dtype = 'float'
                default = 0.0

            Parameter:
                name = 'response_window'
                label = 'Response window (sec)'
                compact_label = 'Resp. Window'
                dtype = 'float'
                default = 100e-3

    Extension:
        id = 'dpoae_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.process_microphone_segment'
            handler = process_microphone_segment

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            weight = 15
            event = 'experiment_prepare'
            command = 'psi.controller.tone_calibrate_channel'
            kwargs = {
                'input_name': 'microphone',
                'output_name': 'primary',
                'parameter_names': ['primary_tone_frequency'],
                'gain': -40,
                'max_thd': None,
                'min_snr': 6,
            }

        ExperimentAction:
            weight = 15
            event = 'experiment_prepare'
            command = 'psi.controller.tone_calibrate_channel'
            kwargs = {
                'input_name': 'microphone',
                'output_name': 'secondary',
                'parameter_names': ['secondary_tone_frequency'],
                'gain': -40,
                'max_thd': None,
                'min_snr': 6,
            }

        #ExperimentAction:
        #    event = 'microphone_segment_acquired'
        #    command = 'psi.controller.process_microphone_segment'

        #ExperimentAction:
        #    event = 'primary_start'
        #    command = 'dpoae_capture.start'

        #ExperimentAction:
        #    event = 'erp_acquired'
        #    command = 'psi.controller.save_epoch_as_trial'

        #ExperimentAction:
        #    event = 'erp_queue_empty and not carrier_active'
        #    command = 'psi.controller.stop'

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        TrialLog:
            pass

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'trial_plot_container'
            label = 'Trial timing'
            span = 5
            delay = 0.5

            ViewBox:
                y_min = -1
                y_max = 1

                ChannelPlot:
                    name = 'microphone_plot'
                    source_name = 'microphone_filtered'
                    pen_color = 'k'

        FFTContainer:
            name = 'fft_plot_container'
            label = 'FFT'
            freq_lb = 5
            freq_ub = 50000

            ViewBox:
                y_min = -120
                y_max = 100

                FFTChannelPlot:
                    source_name = 'microphone_filtered'
                    pen_color = 'k'
                    time_span = 1
