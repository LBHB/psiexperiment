import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import Branding

from psi.context.api import ContextGroup, EnumParameter, Parameter
from psi.controller.api import (ControllerManifest, EpochOutput,
                                ExperimentAction, ExperimentState,
                                get_hw_ai_choices)

from psi.controller.input import (Input, IIRFilter, CalibratedInput, RMS, SPL)

from psi.data.plots import (TimeContainer, ChannelPlot, FFTContainer,
                            FFTChannelPlot, ViewBox)

from psi.data.sinks.api import BinaryStore
from psi.token.primitives import Cos2Envelope, BandlimitedNoise

from ..core.io_mixins import ChannelInput, EpochChannelOutput


enamldef NoiseControllerManifest(ControllerManifest): manifest:

    id = 'psi.controller'

    Extension:
        id = 'noise_exposure_stores'
        point = 'psi.data.sinks'

        BinaryStore:
            continuous_inputs = ['microphone', 'noise_level']

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: noise:
            name = 'bandlimited_noise_burst'
            label = 'Bandlimited noise'
            BandlimitedNoise:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        EpochChannelOutput:
            name = 'exposure'
            label = 'Exposure'
            token = noise
            configurable = False

        ChannelInput:
            name = 'microphone_raw'

            CalibratedInput:
                name = 'microphone'

                IIRFilter:
                    btype = 'highpass'
                    ftype = 'butter'
                    N = 2
                    f_highpass = 100
                    name = 'microphone_filtered'
                    RMS:
                        name = 'RMS'
                        duration = 1
                        SPL: spl:
                            name = 'noise_level'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': None}

        ExperimentAction:
            event = 'engines_configured'
            command = 'exposure.prepare'

        ExperimentAction:
            event = 'experiment_start'
            command = 'exposure.start'
            kwargs = {'start': 2}

        ExperimentAction:
            event = 'exposure_end'
            command = 'psi.controller.stop'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'noise_level_container'
            label = 'Noise level'
            delay = 0
            span = 600

            ViewBox:
                label = 'Noise level (dB SPL)'
                save_limits = True
                y_min = 108
                y_max = 118

                ChannelPlot:
                    source_name = 'noise_level'
