import logging
log = logging.getLogger(__name__)

import cPickle as pickle

import os
import numpy as np

from enaml.widgets.api import FileDialogEx
from enaml.workbench.api import Extension, PluginManifest, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.workbench.ui.api import Workspace

from .. import get_config
from .workspace import ExperimentWorkspace
from .workbench_window import ExperimentWorkbenchWindow
from .plugin import ExperimentPlugin

PLUGIN_ID = 'psi.experiment'


layout_fd_kwargs = {
    'name_filters': [get_config('LAYOUT_WILDCARD')],
    'current_path': get_config('LAYOUT_ROOT'),
}


preferences_fd_kwargs = {
    'name_filters': [get_config('PREFERENCES_WILDCARD')],
    'current_path': get_config('PREFERENCES_ROOT'),
}


def experiment_view_factory(workbench):
    workspace = ExperimentWorkspace()
    workspace.window_title = 'Persistent View'
    return workspace


def save_layout(event):
    file_name = FileDialogEx.get_save_file_name(**layout_fd_kwargs)
    if file_name:
        _save_layout(event, file_name)


def _save_layout(event, file_name):
    if not file_name.endswith('.layout'):
        file_name += '.layout'
    plugin = event.workbench.get_plugin('psi.experiment')
    layout = plugin.get_layout()
    with open(file_name, 'wb') as fh:
        pickle.dump(layout, fh)


def load_layout(event):
    file_name = FileDialogEx.get_open_file_name(**layout_fd_kwargs)
    if file_name:
        _load_layout(event, file_name)


def _load_layout(event, file_name):
    plugin = event.workbench.get_plugin('psi.experiment')
    with open(file_name, 'rb') as fh:
        layout = pickle.load(fh)
        plugin.set_layout(layout)


def set_default_layout(event):
    layout_root = get_config('LAYOUT_ROOT')
    file_name = os.path.join(layout_root, 'default.layout')
    _save_layout(event, file_name)
    

def get_default_layout(event):
    try:
        layout_root = get_config('LAYOUT_ROOT')
        file_name = os.path.join(layout_root, 'default.layout')
        _load_layout(event, file_name)
    except IOError:
        pass


def save_preferences(event):
    filename = event.parameters.get('filename', None)
    if filename is None:
        filename = FileDialogEx.get_save_filename(**preferences_fd_kwargs)
    if filename:
        _save_preferences(event, filename)


def _save_preferences(event, file_name):
    plugin = event.workbench.get_plugin('psi.experiment')
    if not file_name.endswith('.preferences'):
        file_name += '.preferences'
    preferences = plugin.get_preferences()
    with open(file_name, 'wb') as fh:
        pickle.dump(preferences, fh)


def load_preferences(event):
    filename = event.parameters.get('filename', None)
    if filename is None:
        filename = FileDialogEx.get_open_file_name(**preferences_fd_kwargs)
    if filename:
        _load_preferences(event, filename)


def _load_preferences(event, file_name):
    with open(file_name, 'rb') as fh:
        preferences = pickle.load(fh)
    plugin = event.workbench.get_plugin('psi.experiment')
    plugin.set_preferences(preferences)


def set_default_preferences(event):
    preferences_root = get_config('PREFERENCES_ROOT')
    file_name = os.path.join(preferences_root, 'default.preferences')
    _save_preferences(event, file_name)
    

def get_default_preferences(event):
    try:
        preferences_root = get_config('PREFERENCES_ROOT')
        file_name = os.path.join(preferences_root, 'default.preferences')
        _load_preferences(event, file_name)
    except IOError:
        pass


def window_factory(workbench):
    return ExperimentWorkbenchWindow()


def setup_workspace(event):
    log.debug('Setting up workspace')
    plugin = event.workbench.get_plugin(PLUGIN_ID)
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin.setup_workspace(ui.workspace)
    plugin.setup_toolbar(ui.workspace)


enamldef ExperimentManifest(PluginManifest):
    '''
    This plugin acts as the entry point for all other plugins in this example.
    It contributes the window branding, default actions, and the workspace
    definitions.
    '''
    id = PLUGIN_ID
    factory = ExperimentPlugin

    Extension:
        id = 'workspace'
        point = 'enaml.workbench.ui.workspaces'
        factory = experiment_view_factory

    Extension:
        id = 'window'
        point = 'enaml.workbench.ui.window_factory'
        factory = window_factory

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.save_layout'
            handler = save_layout
        Command:
            id = 'psi.load_layout'
            handler = load_layout
        Command:
            id = 'psi.set_default_layout'
            handler = set_default_layout
        Command:
            id = 'psi.get_default_layout'
            handler = get_default_layout
        Command:
            id = 'psi.save_preferences'
            handler = save_preferences
        Command:
            id = 'psi.load_preferences'
            handler = load_preferences
        Command:
            id = 'psi.set_default_preferences'
            handler = set_default_preferences
        Command:
            id = 'psi.get_default_preferences'
            handler = get_default_preferences
        Command:
            id = 'psi.setup_workspace'
            handler = setup_workspace

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/configuration'
            label = 'Configuration'
        
        MenuItem:
            path = '/configuration/layout'
            label = 'Layout'
            ItemGroup:
                id = 'layout_io'
            ItemGroup:
                id = 'layout_default'

        ActionItem:
            path = '/configuration/layout/save_layout'
            label = 'Save'
            command = 'psi.save_layout'
            group = 'layout_io'
        ActionItem:
            path = '/configuration/layout/load_layout'
            label = 'Load'
            command = 'psi.load_layout'
            group = 'layout_io'
        ActionItem:
            path = '/configuration/layout/set_default_layout'
            label = 'Set default'
            command = 'psi.set_default_layout'
            group = 'layout_default'
        ActionItem:
            path = '/configuration/layout/get_default_layout'
            label = 'Revert to default'
            command = 'psi.get_default_layout'
            group = 'layout_default'

        MenuItem:
            path = '/configuration/preferences'
            label = 'Preferences'
            ItemGroup:
                id = 'preferences_io'
            ItemGroup:
                id = 'preferences_default'

        ActionItem:
            path = '/configuration/preferences/save_preferences'
            label = 'Save'
            command = 'psi.save_preferences'
            group = 'preferences_io'
        ActionItem:
            path = '/configuration/preferences/load_preferences'
            label = 'Load'
            command = 'psi.load_preferences'
            group = 'preferences_io'
        ActionItem:
            path = '/configuration/preferences/set_default_preferences'
            label = 'Set default'
            command = 'psi.set_default_preferences'
            group = 'preferences_default'
        ActionItem:
            path = '/configuration/preferences/get_default_preferences'
            label = 'Revert to default'
            command = 'psi.get_default_preferences'
            group = 'preferences_default'


    ExtensionPoint:
        id = 'toolbar'

    ExtensionPoint:
        id = 'workspace'

    ExtensionPoint:
        id = 'preferences'
