import numpy as np

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import Branding

from psi.controller.appetitive_manifest import AppetitiveManifest
from psi.controller.engines.nidaq import NIDAQEngine

from psi.context.api import ContextGroup, Parameter
from psi.controller.api import (ContinuousAnalogInput, AnalogThreshold,
                                ContinuousOutput, EpochOutput, AIChannel,
                                AOChannel, ExperimentAction)


def insert_target(event):
    controller = event.workbench.get_plugin('psi.controller')
    ts = controller.get_ts()

    target = controller._outputs['target']
    waveform = target.get_waveform()
    offset = int(target.channel.fs*(0.25+ts))
    target.engine.modify_hw_ao(waveform, offset=offset)

    controller.trial_info['target_start'] = ts
    controller.trial_info['target_end'] = \
        ts+(waveform.shape[-1]/target.channel.fs)


enamldef ControllerManifest(AppetitiveManifest): manifest:

    Extension:
        id = 'branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title = 'Go-Nogo'

    Extension:
        id = 'appetitive_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.insert_target'
            handler = insert_target

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'trial_start'
            command = 'psi.controller.insert_target'

    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI'
            master_clock = True
            hw_ai_monitor_period = 0.01

            AOChannel:
                name = 'speaker'
                channel = 'Dev1/ao0'
                fs = 100e3
                expected_range = (-10, 10)

                ContinuousOutput:
                    name = 'background'
                    label = 'Background'

                EpochOutput:
                    name = 'target'
                    label = 'Target'

            AIChannel:
                name = 'microphone'
                channel = 'Dev1/ai0'
                start_trigger = 'ao/StartTrigger'
                fs = 25e3
                expected_range = (-10, 10)

                ContinuousAnalogInput:
                    name = 'microphone'

            AIChannel:
                name = 'nose_poke'
                channel = 'Dev1/ai1'
                start_trigger = 'ao/StartTrigger'
                fs = 25e3
                expected_range = (-10, 10)

                ContinuousAnalogInput:
                    name = 'nose_poke_analog'

                AnalogThreshold:
                    name = 'nose_poke'
                    threshold = 2.5
                    debounce = 100

            AIChannel:
                name = 'reward_contact'
                channel = 'Dev1/ai2'
                start_trigger = 'ao/StartTrigger'
                fs = 25e3
                expected_range = (-10, 10)

                ContinuousAnalogInput:
                    name = 'reward_contact_analog'

                AnalogThreshold:
                    name = 'reward_contact'
                    threshold = 2.5
                    debounce = 100


    # TODO: Should these automatically be contributed by the controller when it
    # loads the list of outputs? I think so.
    Extension:
        id = 'groups'
        point = 'psi.context.items'
        ContextGroup:
            name = 'background'
            label = 'Background'
        ContextGroup:
            name = 'target'
            label = 'Target'


