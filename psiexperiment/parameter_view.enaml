from enaml.core.api import Looper
from enaml.drag_drop import DropAction, DragData
from enaml.layout.api import vbox, hbox
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import (PopupView, PushButton, Label, Container,
                               CheckBox, Field, Feature)


def align_edges(widgets):
    constraints = []
    w_base = widgets[0]
    for w in widgets[1:]:
        constraints.extend([
            w.left == w_base.left,
            w.right == w_base.right
        ])
    return constraints


enamldef ParameterContainer(Container):
    attr parameters

    # Define a style that grays out the field when it's been selected to be a
    # roving parameter.
    StyleSheet:
        Style:
            element = 'Field'
            style_class = 'disabled'
            Setter:
                field = 'background'
                value = '#cccccc'

    layout_constraints => ():
        widgets = self.visible_widgets()
        cb, field = zip(*[w.visible_widgets() for w in widgets])
        constraints = [vbox(*widgets, spacing=0)]
        constraints.extend(align_edges(cb))
        constraints.extend(align_edges(field))
        return constraints

    Looper:
        # Be sure to check whether the parameter is already listed in the
        # selector. If it is, it shouldn't be shown here.
        iterable << parameters
        Container:
            padding = 0
            share_layout = True
            constraints << [hbox(cb, field)]
            CheckBox: cb:
                checked := loop_item.rove
                text = loop_item.label
            Field: field:
                text := loop_item.expression
                style_class << 'disabled' if loop_item.rove else 'enabled'
