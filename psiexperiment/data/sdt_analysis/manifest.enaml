import numpy as np
import pandas as pd

from atom.api import ContainerList, Typed, Str, Int, observe
from enaml.application import deferred_call
from enaml.layout.api import InsertItem
from enaml.widgets.api import (Container, DockItem, Label, Field)
from enaml.workbench.api import Extension, PluginManifest

from psiexperiment.core.utils import find_extension
from psiexperiment.core.enaml.dataframe_table_widget \
    import DataframeTable
from ..plugin import TrialData

PLUGIN_ID = 'psiexperiment.data.sdt_analysis'


class SDTAnalysis(TrialData):

    trial_log = Typed(pd.DataFrame)
    results = Typed(pd.DataFrame)
    grouping = ContainerList()
    visible_columns = ContainerList()
    column_info = Typed(dict, {})
    limit = Int()

    def prepare(self, context_info):
        self.grouping = ['trial_type'] + [k for k, v in context_info.items() if v['rove']]
        self.column_info = dict((k, v['compact_label']) \
                                for k, v in context_info.items())
        self.column_info.update({'mean': 'Average', 
                                 'size': 'Trials', 
                                 'sum': 'Correct'})
        self.visible_columns = self.grouping[:] + ['mean', 'sum', 'size']

    def trial_log_updated(self, trial_log):
        self.trial_log = trial_log
        self.update_results()

    @observe('limit')
    def limit_changed(self, event):
        self.update_results()

    def update_results(self):
        if self.trial_log is None:
            return
        trial_log = self.trial_log.iloc[-self.limit:]
        self.results = trial_log.groupby(self.grouping)['correct'] \
            .agg({'sum', 'size', 'mean'}).astype(np.float32).reset_index()


enamldef SDTAnalysisDockItem(DockItem):

    attr analysis

    Container:
        Label:
            text = 'Limit'
        Field:
            text << str(analysis.limit)
            text ::
                analysis.limit = int(text)

        DataframeTable:
            dataframe << analysis.results
            columns << analysis.visible_columns[:]
            column_info << analysis.column_info


def contribute_to_workspace(workbench, workspace):
    extension = find_extension(workbench, PLUGIN_ID, 'data', SDTAnalysis)
    item = SDTAnalysisDockItem(workspace.dock_area, analysis=extension,
                               name='sdt_analysis', title='SDT Analysis')
    op = InsertItem(item=item.name, position='bottom')
    deferred_call(workspace.dock_area.update_layout, op)


enamldef SDTAnalysisManifest(PluginManifest): manifest:

    id = PLUGIN_ID

    Extension:
        id = 'data'
        point = 'psiexperiment.data.trial'
        SDTAnalysis:
            pass

    Extension:
        id = 'workspace'
        point = 'psiexperiment.experiment.workspace'
        factory = contribute_to_workspace
